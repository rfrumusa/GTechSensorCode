###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        20/Mar/2018  09:41:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\NVIC\Interrupt.c
#    Command line =  
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\NVIC\Interrupt.c" -D IAR --preprocess
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\" -lC
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\" -lB
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\"
#        --diag_suppress Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Environment\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Generic
#        Services\Interface\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Uart\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\CDC\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\Sys Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -On
#    List file    =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\Interrupt.lst
#    Object file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\Interrupt.o
#
###############################################################################

C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVIC\Interrupt.c
      1          /******************************************************************************
      2           * Filename: NVIC.c
      3           *
      4           * Description: NVIC minimal functions set for ARM CORTEX-M4 processor
      5           *
      6           * Copyright (c) 2012, Freescale Semiconductor, Inc. All rights reserved.
      7           *
      8           ******************************************************************************
      9           *
     10           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
     11           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     12           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     13           * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     14           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     15           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     16           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     17           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     18           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
     19           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
     20           * THE POSSIBILITY OF SUCH DAMAGE.
     21           *
     22           *****************************************************************************/
     23          
     24          #include "EmbeddedTypes.h"
     25          #include "PortConfig.h"
     26          #include "Interrupt.h"
     27          
     28          #if defined(__IAR_SYSTEMS_ICC__)
     29          #include "intrinsics.h"
     30          #endif
     31          
     32          /******************************************************************************
     33           ******************************************************************************
     34           * Private macros
     35           ******************************************************************************
     36           ******************************************************************************/
     37          
     38          /******************************************************************************
     39           ******************************************************************************
     40           * Private type definitions
     41           ******************************************************************************
     42           ******************************************************************************/
     43          
     44          #if (defined(__GNUC__))
     45          typedef uint32_t    __istate_t;
     46          #endif
     47          
     48          /******************************************************************************
     49           ******************************************************************************
     50           * Public memory definitions
     51           ******************************************************************************
     52           ******************************************************************************/
     53          
     54          /******************************************************************************
     55           ******************************************************************************
     56           * Private function prototypes
     57           ******************************************************************************
     58           ******************************************************************************/
     59          
     60          /******************************************************************************
     61           ******************************************************************************
     62           * Public functions
     63           ******************************************************************************
     64           *****************************************************************************/
     65          
     66          /******************************************************************************
     67           * Name: NVIC_EnableIRQ
     68           * Description: Enables the specified IRQ
     69           * Parameters: [IN] irq - IRQ number
     70           * Return: TRUE if IRQ successfully enabled / FALSE otherwise
     71           * Note: Interrupts will also need to be enabled in the ARM core. This can be 
     72           *       done using the EnableInterrupts macro.
     73           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     74          bool_t NVIC_EnableIRQ 
     75          (
     76                  int irq
     77          )
     78          {		
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0001             MOVS     R1,R0
     79              int div;    
     80          
     81              if (irq > (int)(gNvicMaxIrqValue_c))
   \   00000004   0x295C             CMP      R1,#+92
   \   00000006   0xDB01             BLT.N    ??NVIC_EnableIRQ_0
     82              {
     83                  return FALSE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE045             B.N      ??NVIC_EnableIRQ_1
     84              }
     85          
     86              div = irq/32;
   \                     ??NVIC_EnableIRQ_0: (+1)
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   00000012   0x0002             MOVS     R2,R0
     87          
     88              switch (div)
   \   00000014   0x2A00             CMP      R2,#+0
   \   00000016   0xD003             BEQ.N    ??NVIC_EnableIRQ_2
   \   00000018   0x2A02             CMP      R2,#+2
   \   0000001A   0xD027             BEQ.N    ??NVIC_EnableIRQ_3
   \   0000001C   0xD313             BCC.N    ??NVIC_EnableIRQ_4
   \   0000001E   0xE038             B.N      ??NVIC_EnableIRQ_5
     89              {
     90              case 0x0:
     91                  NVICICPR0 = 1 << (irq%32);
   \                     ??NVIC_EnableIRQ_2: (+1)
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x2320             MOVS     R3,#+32
   \   00000024   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \   00000028   0xFB04 0x1413      MLS      R4,R4,R3,R1
   \   0000002C   0x40A0             LSLS     R0,R0,R4
   \   0000002E   0x....             LDR.N    R3,??DataTable2  ;; 0xe000e280
   \   00000030   0x6018             STR      R0,[R3, #+0]
     92                  NVICISER0 = 1 << (irq%32);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x2320             MOVS     R3,#+32
   \   00000036   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \   0000003A   0xFB04 0x1413      MLS      R4,R4,R3,R1
   \   0000003E   0x40A0             LSLS     R0,R0,R4
   \   00000040   0x....             LDR.N    R3,??DataTable2_1  ;; 0xe000e100
   \   00000042   0x6018             STR      R0,[R3, #+0]
     93                  break;
   \   00000044   0xE027             B.N      ??NVIC_EnableIRQ_6
     94              case 0x1:
     95                  NVICICPR1 = 1 << (irq%32);
   \                     ??NVIC_EnableIRQ_4: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x2320             MOVS     R3,#+32
   \   0000004A   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \   0000004E   0xFB04 0x1413      MLS      R4,R4,R3,R1
   \   00000052   0x40A0             LSLS     R0,R0,R4
   \   00000054   0x....             LDR.N    R3,??DataTable2_2  ;; 0xe000e284
   \   00000056   0x6018             STR      R0,[R3, #+0]
     96                  NVICISER1 = 1 << (irq%32);
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x2320             MOVS     R3,#+32
   \   0000005C   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \   00000060   0xFB04 0x1413      MLS      R4,R4,R3,R1
   \   00000064   0x40A0             LSLS     R0,R0,R4
   \   00000066   0x....             LDR.N    R3,??DataTable2_3  ;; 0xe000e104
   \   00000068   0x6018             STR      R0,[R3, #+0]
     97                  break;
   \   0000006A   0xE014             B.N      ??NVIC_EnableIRQ_6
     98              case 0x2:
     99                  NVICICPR2 = 1 << (irq%32);
   \                     ??NVIC_EnableIRQ_3: (+1)
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x2320             MOVS     R3,#+32
   \   00000070   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \   00000074   0xFB04 0x1413      MLS      R4,R4,R3,R1
   \   00000078   0x40A0             LSLS     R0,R0,R4
   \   0000007A   0x....             LDR.N    R3,??DataTable2_4  ;; 0xe000e288
   \   0000007C   0x6018             STR      R0,[R3, #+0]
    100                  NVICISER2 = 1 << (irq%32);
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x2320             MOVS     R3,#+32
   \   00000082   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \   00000086   0xFB04 0x1413      MLS      R4,R4,R3,R1
   \   0000008A   0x40A0             LSLS     R0,R0,R4
   \   0000008C   0x....             LDR.N    R3,??DataTable2_5  ;; 0xe000e108
   \   0000008E   0x6018             STR      R0,[R3, #+0]
    101                  break;
   \   00000090   0xE001             B.N      ??NVIC_EnableIRQ_6
    102                  
    103              default:
    104                  return FALSE;
   \                     ??NVIC_EnableIRQ_5: (+1)
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xE000             B.N      ??NVIC_EnableIRQ_1
    105              }              
    106              
    107              return TRUE;
   \                     ??NVIC_EnableIRQ_6: (+1)
   \   00000096   0x2001             MOVS     R0,#+1
   \                     ??NVIC_EnableIRQ_1: (+1)
   \   00000098   0xBC10             POP      {R4}
   \   0000009A   0x4770             BX       LR               ;; return
    108          }
    109          
    110          /******************************************************************************
    111           * Name: NVIC_DisableIRQ
    112           * Description: Disables the specified IRQ
    113           * Parameters: [IN] irq - IRQ number
    114           * Return: TRUE if IRQ successfully disabled / FALSE otherwise
    115           * Note: If you want to disable all interrupts, then use the 
    116           *       DisableInterrupts macro instead.
    117           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    118          bool_t NVIC_DisableIRQ 
    119          (
    120                  int irq
    121          )
    122          {
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0001             MOVS     R1,R0
    123              int div;
    124          
    125              if (irq > (int)(gNvicMaxIrqValue_c))
   \   00000004   0x295C             CMP      R1,#+92
   \   00000006   0xDB01             BLT.N    ??NVIC_DisableIRQ_0
    126                 return FALSE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE02A             B.N      ??NVIC_DisableIRQ_1
    127          
    128              div = irq/32;
   \                     ??NVIC_DisableIRQ_0: (+1)
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   00000012   0x0002             MOVS     R2,R0
    129          
    130              switch (div)
   \   00000014   0x2A00             CMP      R2,#+0
   \   00000016   0xD003             BEQ.N    ??NVIC_DisableIRQ_2
   \   00000018   0x2A02             CMP      R2,#+2
   \   0000001A   0xD015             BEQ.N    ??NVIC_DisableIRQ_3
   \   0000001C   0xD30A             BCC.N    ??NVIC_DisableIRQ_4
   \   0000001E   0xE01D             B.N      ??NVIC_DisableIRQ_5
    131              {
    132              case 0x0:
    133                  NVICICER0 = 1 << (irq%32);
   \                     ??NVIC_DisableIRQ_2: (+1)
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x2320             MOVS     R3,#+32
   \   00000024   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \   00000028   0xFB04 0x1413      MLS      R4,R4,R3,R1
   \   0000002C   0x40A0             LSLS     R0,R0,R4
   \   0000002E   0x....             LDR.N    R3,??DataTable2_6  ;; 0xe000e180
   \   00000030   0x6018             STR      R0,[R3, #+0]
    134                  break;
   \   00000032   0xE015             B.N      ??NVIC_DisableIRQ_6
    135              case 0x1:
    136                  NVICICER1 = 1 << (irq%32);
   \                     ??NVIC_DisableIRQ_4: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x2320             MOVS     R3,#+32
   \   00000038   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \   0000003C   0xFB04 0x1413      MLS      R4,R4,R3,R1
   \   00000040   0x40A0             LSLS     R0,R0,R4
   \   00000042   0x....             LDR.N    R3,??DataTable2_7  ;; 0xe000e184
   \   00000044   0x6018             STR      R0,[R3, #+0]
    137                  break;
   \   00000046   0xE00B             B.N      ??NVIC_DisableIRQ_6
    138              case 0x2:
    139                  NVICICER2 = 1 << (irq%32);
   \                     ??NVIC_DisableIRQ_3: (+1)
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x2320             MOVS     R3,#+32
   \   0000004C   0xFB91 0xF4F3      SDIV     R4,R1,R3
   \   00000050   0xFB04 0x1413      MLS      R4,R4,R3,R1
   \   00000054   0x40A0             LSLS     R0,R0,R4
   \   00000056   0x....             LDR.N    R3,??DataTable2_8  ;; 0xe000e188
   \   00000058   0x6018             STR      R0,[R3, #+0]
    140                  break;
   \   0000005A   0xE001             B.N      ??NVIC_DisableIRQ_6
    141                  
    142              default:
    143                  return FALSE;
   \                     ??NVIC_DisableIRQ_5: (+1)
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xE000             B.N      ??NVIC_DisableIRQ_1
    144              } 
    145              
    146              return TRUE;
   \                     ??NVIC_DisableIRQ_6: (+1)
   \   00000060   0x2001             MOVS     R0,#+1
   \                     ??NVIC_DisableIRQ_1: (+1)
   \   00000062   0xBC10             POP      {R4}
   \   00000064   0x4770             BX       LR               ;; return
    147          }
    148          
    149          /******************************************************************************
    150           * Name: NVIC_SetPriority
    151           * Description: Sets the specified IRQ priority
    152           * Parameters: [IN] irq - IRQ number
    153           *             [IN] prio - the desired priority (0..15 levels, 0 = maximum)
    154           * Return: TRUE if IRQ priority successfully set / FALSE otherwise 
    155           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    156          bool_t NVIC_SetPriority 
    157          (
    158                  int irq,
    159                  int prio
    160          )
    161          {    
   \                     NVIC_SetPriority: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    162              uint8_t *prio_reg;
    163          
    164              if (irq > (int)(gNvicMaxIrqValue_c))
   \   00000002   0x2A5C             CMP      R2,#+92
   \   00000004   0xDB01             BLT.N    ??NVIC_SetPriority_0
    165                  return FALSE;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE00B             B.N      ??NVIC_SetPriority_1
    166          
    167              if (prio > (int)(gNvicMaxPrioValue_c))
   \                     ??NVIC_SetPriority_0: (+1)
   \   0000000A   0x2910             CMP      R1,#+16
   \   0000000C   0xDB01             BLT.N    ??NVIC_SetPriority_2
    168                  return FALSE;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE007             B.N      ??NVIC_SetPriority_1
    169          
    170              prio_reg = (uint8_t *)(((uint32_t)&NVICIP0) + irq);    
   \                     ??NVIC_SetPriority_2: (+1)
   \   00000012   0xF102 0x4060      ADD      R0,R2,#-536870912
   \   00000016   0xF510 0x4064      ADDS     R0,R0,#+58368
   \   0000001A   0x0003             MOVS     R3,R0
    171              *prio_reg = ( (prio&0xF) << (8 - gNvicInterruptLevelBits_c) );      
   \   0000001C   0x0108             LSLS     R0,R1,#+4
   \   0000001E   0x7018             STRB     R0,[R3, #+0]
    172              
    173              return TRUE;
   \   00000020   0x2001             MOVS     R0,#+1
   \                     ??NVIC_SetPriority_1: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    174          }
    175          
    176          #if (defined(__GNUC__))
    177          /******************************************************************************
    178           * Name: __set_interrupt_state
    179           * Description: sets the specified interrupt state
    180           * Parameters: [IN] bits - interrupt state bit mask
    181           * Return: - 
    182           ******************************************************************************/
    183          void __set_interrupt_state
    184          (
    185                  __istate_t bits
    186          )
    187          {	
    188          	asm("MSR PRIMASK, %0" : : "r" (bits));	
    189          }
    190          
    191          /******************************************************************************
    192           * Name: __get_interrupt_state
    193           * Description: gets the current interrupt state
    194           * Parameters: -
    195           * Return: interrupt state bit mask
    196           ******************************************************************************/
    197          __istate_t __get_interrupt_state
    198          (
    199                  void
    200          )
    201          {	
    202          	__istate_t tmp=0;
    203          	asm("mrs %0,PRIMASK" : "=r" (tmp));
    204          	return tmp;
    205          }
    206          #endif
    207          
    208          /******************************************************************************
    209           * Name: IntRestoreAll
    210           * Description: restores the interrupt state and enables interrupts
    211           * Parameters: [IN] if_bits - interrupt state bit mask
    212           * Return: -
    213           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    214          void IntRestoreAll
    215          (
    216                  uint32_t    if_bits
    217          )
    218          { 
    219          #if (defined(__GNUC__))
    220          //	if_bits = if_bits;
    221          //	EnableInterrupts();
    222          	__set_interrupt_state((__istate_t)if_bits);	
    223          #elif defined(__IAR_SYSTEMS_ICC__)
    224              __set_interrupt_state((__istate_t)if_bits);
   \                     IntRestoreAll: (+1)
   \   00000000   0xF380 0x8810      MSR      PRIMASK,R0
    225          #else
    226          #warning "Unknown / unsupported toolchain"
    227          #endif
    228          }
   \   00000004   0x4770             BX       LR               ;; return
    229          
    230          /******************************************************************************
    231           * Name: IntDisableAll
    232           * Description: disables interrupts
    233           * Parameters: -
    234           * Return: interrupt state bit mask before being disabled
    235           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    236          uint32_t IntDisableAll
    237          (
    238                  void
    239          )
    240          {
    241          #if defined(__IAR_SYSTEMS_ICC__)
    242              __istate_t istate = 0; 
   \                     IntDisableAll: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    243              istate = __get_interrupt_state();
   \   00000002   0xF3EF 0x8110      MRS      R1,PRIMASK
   \   00000006   0x0008             MOVS     R0,R1
    244              DisableInterrupts();
   \   00000008   0xB672             CPSID i
    245              return (unsigned int)istate;
   \   0000000A   0x4770             BX       LR               ;; return
    246          #elif defined(__GNUC__)
    247              __istate_t istate = 0; 
    248              istate = __get_interrupt_state();    
    249              DisableInterrupts();
    250              return (unsigned int)istate;
    251          #else
    252          #warning "Unknown / unsupported toolchain"
    253              return 0;
    254          #endif
    255          }
    256          
    257          /******************************************************************************
    258           * Name: NVIC_ClearPendingIRQ
    259           * Description: Clear IRQn Pending Status 
    260           * Parameters: interrupt number
    261           * Return: -
    262           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    263          void NVIC_ClearPendingIRQ(uint8_t IRQn)
    264          {
    265            NVIC_ICPR(((uint32_t)(IRQn) >> 5)) = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   \                     NVIC_ClearPendingIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable2  ;; 0xe000e280
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
    266          }
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xE000E284         DC32     0xe000e284

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xE000E104         DC32     0xe000e104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0xE000E288         DC32     0xe000e288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0xE000E108         DC32     0xe000e108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0xE000E184         DC32     0xe000e184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0xE000E188         DC32     0xe000e188

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   IntDisableAll
       0   IntRestoreAll
       0   NVIC_ClearPendingIRQ
       4   NVIC_DisableIRQ
       4   NVIC_EnableIRQ
       0   NVIC_SetPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
      12  IntDisableAll
       6  IntRestoreAll
      20  NVIC_ClearPendingIRQ
     102  NVIC_DisableIRQ
     156  NVIC_EnableIRQ
      36  NVIC_SetPriority

 
 368 bytes in section .text
 
 368 bytes of CODE memory

Errors: none
Warnings: none
