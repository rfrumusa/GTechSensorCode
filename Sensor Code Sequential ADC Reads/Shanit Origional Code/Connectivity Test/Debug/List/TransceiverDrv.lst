###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        02/Sep/2018  13:33:20
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\DRV\TransceiverDrv.c
#    Command line =  
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\DRV\TransceiverDrv.c" -D IAR
#        --preprocess "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code
#        Sequential ADC Reads\Shanit Origional Code\Connectivity
#        Test\Debug\List\" -lC "F:\Guardrail Work\Sensor Code\Git Repo\Sensor
#        Code Sequential ADC Reads\Shanit Origional Code\Connectivity
#        Test\Debug\List\" -lB "F:\Guardrail Work\Sensor Code\Git Repo\Sensor
#        Code Sequential ADC Reads\Shanit Origional Code\Connectivity
#        Test\Debug\List\" --diag_suppress
#        Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Environment\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Interface\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\Generic Services\Interface\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Uart\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\CDC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Sys Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\LPM\" -On
#    List file    =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\Debug\List\TransceiverDrv.lst
#    Object file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\Debug\Obj\TransceiverDrv.o
#
###############################################################################

F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\TransceiverDrv.c
      1          /*****************************************************************************
      2           *                               INCLUDED HEADERS                            *
      3           *---------------------------------------------------------------------------*
      4           * Add to this section all the headers that this module needs to include.    *
      5           *---------------------------------------------------------------------------*
      6           *****************************************************************************/
      7          #include "EmbeddedTypes.h"
      8          #include "TransceiverDrv.h"
      9          #include "TransceiverReg.h"
     10          #include "Interrupt.h"
     11          //#include "NVIC.h"
     12          
     13          /*****************************************************************************
     14           *                               PRIVATE VARIABLES                           *
     15           *---------------------------------------------------------------------------*
     16           * Add to this section all the variables and constants that have local       *
     17           * (file) scope.                                                             *
     18           * Each of this declarations shall be preceded by the 'static' keyword.      *
     19           * These variables / constants cannot be accessed outside this module.       *
     20           *---------------------------------------------------------------------------*
     21           *****************************************************************************/
     22          
     23          //uint8_t mSpiDMABuff[512];

   \                                 In section .bss, align 4
     24            uint32_t mSpiDMA_PUSH_Reg;
   \                     mSpiDMA_PUSH_Reg:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25            uint32_t mLastSpiDMA_PUSH_Reg;
   \                     mLastSpiDMA_PUSH_Reg:
   \   00000000                      DS8 4
     26          
     27          
     28          /*****************************************************************************
     29           *                               PUBLIC VARIABLES                            *
     30           *---------------------------------------------------------------------------*
     31           * Add to this section all the variables and constants that have global      *
     32           * (project) scope.                                                          *
     33           * These variables / constants can be accessed outside this module.          *
     34           * These variables / constants shall be preceded by the 'extern' keyword in  *
     35           * the interface header.                                                     *
     36           *---------------------------------------------------------------------------*
     37           *****************************************************************************/
     38          
     39          /*****************************************************************************
     40           *                           PRIVATE FUNCTIONS PROTOTYPES                    *
     41           *---------------------------------------------------------------------------*
     42           * Add to this section all the functions prototypes that have local (file)   *
     43           * scope.                                                                    *
     44           * These functions cannot be accessed outside this module.                   *
     45           * These declarations shall be preceded by the 'static' keyword.             *
     46           *---------------------------------------------------------------------------*
     47           *****************************************************************************/
     48          
     49          /*****************************************************************************
     50           *                                PRIVATE FUNCTIONS                          *
     51           *---------------------------------------------------------------------------*
     52           * Add to this section all the functions that have local (file) scope.       *
     53           * These functions cannot be accessed outside this module.                   *
     54           * These definitions shall be preceded by the 'static' keyword.              *
     55           *---------------------------------------------------------------------------*
     56           *****************************************************************************/
     57          
     58          /*****************************************************************************
     59           *                             PUBLIC FUNCTIONS                              *
     60           *---------------------------------------------------------------------------*
     61           * Add to this section all the functions that have global (project) scope.   *
     62           * These functions can be accessed outside this module.                      *
     63           * These functions shall have their declarations (prototypes) within the     *
     64           * interface header file and shall be preceded by the 'extern' keyword.      *
     65           *---------------------------------------------------------------------------*
     66           *****************************************************************************/
     67          
     68          /*---------------------------------------------------------------------------
     69           * Name: MC1324xDrv_SPIInit
     70           * Description: -
     71           * Parameters: -
     72           * Return: -
     73           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     74          void MC1324xDrv_SPIInit
     75          (
     76            void
     77          )
     78          {
     79            /* Enable SPI PORT clock */ 
     80            MC1324x_SPI_PORT_SIM_SCG |= cSPI_PORT_SIM_SCG_Config_c;
   \                     MC1324xDrv_SPIInit: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable18  ;; 0x40048038
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     81            
     82            /* Enable SPI clock */ 
     83            MC1324x_SPI_SIM_SCG |= cSPI_SIM_SCG_Config_c;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x4004803c
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable19  ;; 0x4004803c
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     84            
     85            /* Initialize SPI Pin Control registers */
     86            
     87            MC1324x_SPI_SSEL_PCR &= ~PORT_PCR_MUX_MASK;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x4004a028
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0x4004a028
   \   0000002E   0x6008             STR      R0,[R1, #+0]
     88            MC1324x_SPI_SSEL_PCR |= PORT_PCR_MUX(2);
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x4004a028
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0x4004a028
   \   0000003E   0x6008             STR      R0,[R1, #+0]
     89            MC1324x_SPI_SCLK_PCR &= ~PORT_PCR_MUX_MASK;
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable19_2  ;; 0x4004a02c
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable19_2  ;; 0x4004a02c
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     90            MC1324x_SPI_SCLK_PCR |= PORT_PCR_MUX(2);
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable19_2  ;; 0x4004a02c
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable19_2  ;; 0x4004a02c
   \   0000005E   0x6008             STR      R0,[R1, #+0]
     91            MC1324x_SPI_MOSI_PCR &= ~PORT_PCR_MUX_MASK;
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x4004a040
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x4004a040
   \   0000006E   0x6008             STR      R0,[R1, #+0]
     92            MC1324x_SPI_MOSI_PCR |= PORT_PCR_MUX(2);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x4004a040
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x4004a040
   \   0000007E   0x6008             STR      R0,[R1, #+0]
     93            MC1324x_SPI_MISO_PCR &= ~PORT_PCR_MUX_MASK;
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable19_4  ;; 0x4004a044
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable19_4  ;; 0x4004a044
   \   0000008E   0x6008             STR      R0,[R1, #+0]
     94            MC1324x_SPI_MISO_PCR |= PORT_PCR_MUX(2);
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable19_4  ;; 0x4004a044
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable19_4  ;; 0x4004a044
   \   0000009E   0x6008             STR      R0,[R1, #+0]
     95            
     96            /* Initialize SPI module */
     97            MC1324x_SPI_MCR = cSPI_MCR_Config_c;
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable19_5  ;; 0x81013c01
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   000000A8   0x6008             STR      R0,[R1, #+0]
     98            MC1324x_SPI_CTAR0 = cSPI_CTAR0_Config_c;
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable19_7  ;; 0x38000012
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x4002d00c
   \   000000B2   0x6008             STR      R0,[R1, #+0]
     99            MC1324x_SPI_CTAR1 = cSPI_CTAR1_Config_c;
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable19_9  ;; 0x38010012
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x4002d010
   \   000000BC   0x6008             STR      R0,[R1, #+0]
    100            MC1324x_SPI_RSER = cSPI_RSER_Config_c;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable19_11  ;; 0x4002d030
   \   000000C4   0x6008             STR      R0,[R1, #+0]
    101            
    102          }
   \   000000C6   0x4770             BX       LR               ;; return
    103          
    104          #if 0
    105          
    106          /*---------------------------------------------------------------------------
    107           * Name: MC1324xDrv_SPI_DMA_Init
    108           * Description: -
    109           * Parameters: -
    110           * Return: -
    111           *---------------------------------------------------------------------------*/
    112          void MC1324xDrv_SPI_DMA_Init
    113          (
    114            void
    115          )
    116          {
    117            /* DMAMUX clock gate enabled */
    118            MC1324x_DMA_MUX_SIM_SCG |= (uint32_t)(cDMA_MUX_SIM_SCG_Config_c);
    119            /* DMA clock gate enabled */
    120            MC1324x_eDMA_SIM_SCG |= (uint32_t)(ceDMA_SIM_SCG_Config_c);
    121            
    122            /* MEM2MEM DMAMUX config */
    123            MC1324x_DMAMUX_MEM2MEM = 0x00;
    124            MC1324x_DMAMUX_MEM2MEM = (0
    125            | DMAMUX_CHCFG_SOURCE(54)
    126            | DMAMUX_CHCFG_ENBL_MASK);
    127            
    128            /* MEM2SPI DMAMUX config */
    129            MC1324x_DMAMUX_MEM2SPI = 0x00;
    130            MC1324x_DMAMUX_MEM2SPI = (0
    131            | DMAMUX_CHCFG_SOURCE(19)
    132            | DMAMUX_CHCFG_ENBL_MASK );
    133            
    134              /* SPI2MEM DMAMUX config */
    135            MC1324x_DMAMUX_SPI2MEM = 0x00;
    136            MC1324x_DMAMUX_SPI2MEM = (0
    137            | DMAMUX_CHCFG_SOURCE(18)
    138            | DMAMUX_CHCFG_ENBL_MASK );
    139            
    140            /* DMA MEM2MEM default config */
    141            MC1324x_DMA_MEM2MEM_TCD_SOFF = 1;
    142            MC1324x_DMA_MEM2MEM_TCD_ATTR = (0
    143            | DMA_ATTR_DSIZE(0)
    144            | DMA_ATTR_DMOD(0)
    145            | DMA_ATTR_SSIZE(0)
    146            | DMA_ATTR_SMOD(0) );
    147            MC1324x_DMA_MEM2MEM_TCD_NBYTES_MLNO = DMA_NBYTES_MLNO_NBYTES(1);
    148            MC1324x_DMA_MEM2MEM_TCD_SLAST = DMA_SLAST_SLAST(0);
    149            MC1324x_DMA_MEM2MEM_TCD_DOFF = 0;
    150            MC1324x_DMA_MEM2MEM_TCD_CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(1);
    151            MC1324x_DMA_MEM2MEM_TCD_DLASTSGA = DMA_DLAST_SGA_DLASTSGA(0);
    152            MC1324x_DMA_MEM2MEM_TCD_CSR = (0
    153            | DMA_CSR_DREQ_MASK
    154            | DMA_CSR_BWC(0) );
    155            MC1324x_DMA_MEM2MEM_TCD_BITER_ELINKNO = DMA_BITER_ELINKNO_BITER(1);
    156            
    157            /* DMA MEM2SPI default config */
    158            MC1324x_DMA_MEM2SPI_TCD_SADDR = (uint32_t) &mSpiDMA_PUSH_Reg;
    159            MC1324x_DMA_MEM2SPI_TCD_SOFF = 0;
    160            MC1324x_DMA_MEM2SPI_TCD_ATTR = (0
    161            | DMA_ATTR_DSIZE(2)
    162            | DMA_ATTR_DMOD(0)
    163            | DMA_ATTR_SSIZE(2)
    164            | DMA_ATTR_SMOD(0) );
    165            MC1324x_DMA_MEM2SPI_TCD_SLAST = DMA_SLAST_SLAST(0);
    166            MC1324x_DMA_MEM2SPI_TCD_NBYTES_MLNO = DMA_NBYTES_MLNO_NBYTES(4);
    167            MC1324x_DMA_MEM2SPI_TCD_DADDR = (uint32_t) &(MC1324x_SPI_PUSHR);
    168            MC1324x_DMA_MEM2SPI_TCD_DOFF = 0;
    169            MC1324x_DMA_MEM2SPI_TCD_DLASTSGA = DMA_DLAST_SGA_DLASTSGA(0);
    170            MC1324x_DMA_MEM2SPI_TCD_CSR = (0
    171            | DMA_CSR_INTMAJOR_MASK
    172            | DMA_CSR_DREQ_MASK
    173            | DMA_CSR_BWC(0) );
    174            
    175            NVIC_EnableIRQ(14);
    176            NVIC_SetPriority(14, 2);
    177            
    178            /* DMA SPI2MEM default config */
    179            MC1324x_DMA_SPI2MEM_TCD_SADDR = (uint32_t) &(MC1324x_SPI_POPR);
    180            MC1324x_DMA_SPI2MEM_TCD_SOFF = 0;
    181            MC1324x_DMA_SPI2MEM_TCD_ATTR = (0
    182            | DMA_ATTR_DSIZE(0)
    183            | DMA_ATTR_DMOD(0)
    184            | DMA_ATTR_SSIZE(0)
    185            | DMA_ATTR_SMOD(0) );
    186            MC1324x_DMA_SPI2MEM_TCD_SLAST = DMA_SLAST_SLAST(0);
    187            MC1324x_DMA_SPI2MEM_TCD_NBYTES_MLNO = DMA_NBYTES_MLNO_NBYTES(1);
    188            MC1324x_DMA_SPI2MEM_TCD_DOFF = 1;
    189            MC1324x_DMA_SPI2MEM_TCD_DLASTSGA = DMA_DLAST_SGA_DLASTSGA(0);
    190            MC1324x_DMA_SPI2MEM_TCD_CSR = (0
    191            | DMA_CSR_INTMAJOR_MASK
    192            | DMA_CSR_DREQ_MASK
    193            | DMA_CSR_BWC(0) );
    194            
    195            NVIC_EnableIRQ(14);
    196            NVIC_SetPriority(14, 2);
    197            
    198            //NVIC_EnableIRQ(13);
    199            //NVIC_SetPriority(14, 1);
    200          }
    201          
    202          /*---------------------------------------------------------------------------
    203           * Name: MC1324xDrv_Start_PB_DMA_SPI_Write
    204           * Description: -
    205           * Parameters: -
    206           * Return: -
    207           *---------------------------------------------------------------------------*/
    208          void MC1324xDrv_Start_PB_DMA_SPI_Write
    209          (
    210            uint8_t * srcAddress,
    211            uint8_t numOfBytes
    212          )
    213          {
    214            MC1324x_SPI_PUSHR = (uint32_t) ( 0
    215            | TransceiverSPI_PacketBuffAccessSelect
    216            | TransceiverSPI_PacketBuffBurstModeSelect
    217            | cSPI_PUSHR_CONT_enable_c
    218            | cSPI_PUSHR_PCS_select_c
    219            | cSPI_PUSHR_CTAS0_select_c);
    220            
    221            MC1324x_SPI_PUSHR = (uint32_t) (uint32_t) ( 0
    222            | numOfBytes
    223            | cSPI_PUSHR_CONT_enable_c
    224            | cSPI_PUSHR_PCS_select_c
    225            | cSPI_PUSHR_CTAS0_select_c);
    226            
    227            mSpiDMA_PUSH_Reg = (uint32_t) ( 0
    228            | srcAddress[0]
    229            | cSPI_PUSHR_CONT_enable_c
    230            | cSPI_PUSHR_PCS_select_c
    231            | cSPI_PUSHR_CTAS0_select_c);
    232            
    233            mLastSpiDMA_PUSH_Reg = (uint32_t) ( 0
    234            | srcAddress[(numOfBytes - 1)]
    235            | cSPI_PUSHR_EOQ_assert_c
    236            | cSPI_PUSHR_PCS_select_c
    237            | cSPI_PUSHR_CTAS0_select_c);
    238          
    239            MC1324x_DMA_MEM2MEM_TCD_SADDR = (uint32_t) (srcAddress + 1);
    240            MC1324x_DMA_MEM2MEM_TCD_DADDR = (uint32_t) &mSpiDMA_PUSH_Reg;
    241            
    242            MC1324x_DMA_MEM2SPI_TCD_CITER_ELINKYES = (0 
    243            | DMA_CITER_ELINKYES_CITER((numOfBytes - 1))                              
    244            | DMA_CITER_ELINKYES_LINKCH(15)
    245            | DMA_CITER_ELINKYES_ELINK_MASK
    246            );
    247            MC1324x_DMA_MEM2SPI_TCD_BITER_ELINKYES = (0 
    248            | DMA_BITER_ELINKYES_BITER((numOfBytes - 1))                              
    249            | DMA_BITER_ELINKYES_LINKCH(15)
    250            | DMA_BITER_ELINKYES_ELINK_MASK
    251            );
    252            
    253            DMA_ERQ |= (uint32_t) (1 << 14);
    254            
    255            MC1324x_SPI_RSER |= 0x03000000;
    256            
    257            StartSPITransfer();
    258          }
    259          
    260          /*---------------------------------------------------------------------------
    261           * Name: MC1324xDrv_Start_PB_DMA_SPI_Read
    262           * Description: -
    263           * Parameters: -
    264           * Return: -
    265           *---------------------------------------------------------------------------*/
    266          void MC1324xDrv_Start_PB_DMA_SPI_Read
    267          (
    268            uint8_t * dstAddress,
    269            uint8_t numOfBytes
    270          )
    271          {
    272            MC1324x_DMA_MEM2MEM_TCD_SOFF = 0;
    273            MC1324x_DMA_MEM2MEM_TCD_DADDR = (uint32_t) &(MC1324x_SPI_PUSHR);
    274            MC1324x_DMA_MEM2MEM_TCD_SADDR = (uint32_t) &mSpiDMA_PUSH_Reg;
    275            
    276            MC1324x_DMA_SPI2MEM_TCD_DADDR = (uint32_t) (dstAddress);
    277            
    278            MC1324x_DMA_SPI2MEM_TCD_CITER_ELINKYES = (0 
    279            | DMA_CITER_ELINKYES_CITER((numOfBytes))                              
    280            | DMA_CITER_ELINKYES_LINKCH(15)
    281            | DMA_CITER_ELINKYES_ELINK_MASK
    282            );
    283            MC1324x_DMA_SPI2MEM_TCD_BITER_ELINKYES = (0 
    284            | DMA_BITER_ELINKYES_BITER((numOfBytes))                              
    285            | DMA_BITER_ELINKYES_LINKCH(15)
    286            | DMA_BITER_ELINKYES_ELINK_MASK
    287            );
    288            
    289            MC1324x_SPI_PUSHR = (uint32_t) ( 0
    290            | TransceiverSPI_PacketBuffAccessSelect
    291            | TransceiverSPI_PacketBuffBurstModeSelect
    292            | cSPI_PUSHR_CONT_enable_c
    293            | cSPI_PUSHR_PCS_select_c
    294            | cSPI_PUSHR_CTAS0_select_c);
    295            
    296            mSpiDMA_PUSH_Reg = (uint32_t) ( 0
    297            | cSPI_PUSHR_CONT_enable_c
    298            | cSPI_PUSHR_PCS_select_c
    299            | cSPI_PUSHR_CTAS0_select_c);
    300          
    301            DMA_ERQ |= (uint32_t) (1 << 13);
    302            
    303            StartSPITransfer();
    304            
    305            WaitSPI_TransferCompleteFlag();
    306            ClearSPI_TransferCompleteFlag();  
    307            
    308            SPI_DummyRead();
    309          
    310            MC1324x_SPI_RSER |= 0x00030000;
    311          }
    312          
    313          /*---------------------------------------------------------------------------
    314           * Name: DMA_Channel_15_Isr
    315           * Description: -
    316           * Parameters: -
    317           * Return: -
    318           *---------------------------------------------------------------------------*/
    319          void DMA_Channel_15_Isr
    320          (
    321            void
    322          )
    323          {
    324            DMA_INT |= (uint16_t) (1 << 15);
    325            DMA_ERQ |= (uint32_t) (1 << 14);
    326            
    327            StartSPITransfer();
    328            
    329            MC1324x_SPI_RSER |= 0x03000000;
    330          }
    331          
    332          /*---------------------------------------------------------------------------
    333           * Name: DMA_Channel_14_Isr
    334           * Description: -
    335           * Parameters: -
    336           * Return: -
    337           *---------------------------------------------------------------------------*/
    338          void DMA_Channel_14_Isr
    339          (
    340            void
    341          )
    342          {
    343            DMA_INT |= (uint16_t) (1 << 14);
    344            WaitSPI_TxFIFO_NotFullFlag();
    345            MC1324x_SPI_PUSHR = mLastSpiDMA_PUSH_Reg;
    346            
    347          }
    348          #endif
    349          
    350          /*---------------------------------------------------------------------------
    351           * Name: MC1324xDrv_DirectAccessSPIWrite
    352           * Description: -
    353           * Parameters: -
    354           * Return: -
    355           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    356          void MC1324xDrv_DirectAccessSPIWrite
    357          (
    358           uint8_t address,
    359           uint8_t value
    360          )
    361          {
   \                     MC1324xDrv_DirectAccessSPIWrite: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    362            uint32_t SPIPushRegister;
    363            uint32_t irqMaskRegister;
    364            
    365            irqMaskRegister = IntDisableAll();
   \   00000006   0x.... 0x....      BL       IntDisableAll
   \   0000000A   0x0007             MOVS     R7,R0
    366              
    367            FlushSPIFifo();
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    368            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000026   0x4308             ORRS     R0,R1,R0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    369          
    370            SPIPushRegister = (uint32_t) (address & TransceiverSPI_DirectRegisterAddressMask);
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0xF014 0x003F      ANDS     R0,R4,#0x3F
   \   00000034   0x0006             MOVS     R6,R0
    371            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    372                                           cSPI_PUSHR_PCS_select_c |
    373                                           cSPI_PUSHR_CTAS0_select_c);
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   0000003A   0x4306             ORRS     R6,R0,R6
    374            
    375            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   00000040   0x6006             STR      R6,[R0, #+0]
    376            
    377            SPIPushRegister = (uint32_t) (value);
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x002E             MOVS     R6,R5
    378            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
    379                                           cSPI_PUSHR_PCS_select_c |
    380                                           cSPI_PUSHR_CTAS0_select_c);
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable19_16  ;; 0x8010000
   \   0000004A   0x4306             ORRS     R6,R0,R6
    381          
    382            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   00000050   0x6006             STR      R6,[R0, #+0]
    383            
    384            StartSPITransfer();
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x0840             LSRS     R0,R0,#+1
   \   0000005A   0x0040             LSLS     R0,R0,#+1
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000060   0x6008             STR      R0,[R1, #+0]
    385            
    386            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_DirectAccessSPIWrite_0: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x00C0             LSLS     R0,R0,#+3
   \   0000006A   0xD5FA             BPL.N    ??MC1324xDrv_DirectAccessSPIWrite_0
    387            
    388            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000076   0x4308             ORRS     R0,R1,R0
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    389            
    390            StopSPITransferAndFlushFifo();
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF640 0x4101      MOVW     R1,#+3073
   \   00000088   0x4308             ORRS     R0,R1,R0
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    391            
    392            IntRestoreAll(irqMaskRegister);
   \   00000090   0x0038             MOVS     R0,R7
   \   00000092   0x.... 0x....      BL       IntRestoreAll
    393          }
   \   00000096   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    394          
    395          /*---------------------------------------------------------------------------
    396           * Name: MC1324xDrv_DirectAccessSPIMultiByteWrite
    397           * Description: -
    398           * Parameters: -
    399           * Return: -
    400           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    401          void MC1324xDrv_DirectAccessSPIMultiByteWrite
    402          (
    403           uint8_t startAddress,
    404           uint8_t * byteArray,
    405           uint8_t numOfBytes
    406          )
    407          {
   \                     MC1324xDrv_DirectAccessSPIMultiByteWrite: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    408            uint32_t SPIPushRegister;
    409            uint8_t fifoIdx = 0;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    410            uint32_t irqMaskRegister;
    411          
    412            if( (numOfBytes == 0) || (byteArray == NULL) )
   \   0000000E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD001             BEQ.N    ??MC1324xDrv_DirectAccessSPIMultiByteWrite_0
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD100             BNE.N    ??MC1324xDrv_DirectAccessSPIMultiByteWrite_1
    413            {
    414              return;
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_0: (+1)
   \   00000018   0xE086             B.N      ??MC1324xDrv_DirectAccessSPIMultiByteWrite_2
    415            }
    416          
    417            irqMaskRegister = IntDisableAll();
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_1: (+1)
   \   0000001A   0x.... 0x....      BL       IntDisableAll
   \   0000001E   0x4681             MOV      R9,R0
    418              
    419            FlushSPIFifo();
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    420            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   0000003A   0x4308             ORRS     R0,R1,R0
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   00000040   0x6008             STR      R0,[R1, #+0]
    421            
    422            SPIPushRegister = (uint32_t) (startAddress & TransceiverSPI_DirectRegisterAddressMask);
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0xF014 0x003F      ANDS     R0,R4,#0x3F
   \   00000048   0x0007             MOVS     R7,R0
    423            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    424                                           cSPI_PUSHR_PCS_select_c |
    425                                           cSPI_PUSHR_CTAS0_select_c);
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   0000004E   0x4307             ORRS     R7,R0,R7
    426            
    427            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   00000054   0x6007             STR      R7,[R0, #+0]
    428            fifoIdx++;
   \   00000056   0xF118 0x0801      ADDS     R8,R8,#+1
    429            
    430            while( (numOfBytes > 1)  && (fifoIdx < 4) )
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_3: (+1)
   \   0000005A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005C   0x2E02             CMP      R6,#+2
   \   0000005E   0xDB11             BLT.N    ??MC1324xDrv_DirectAccessSPIMultiByteWrite_4
   \   00000060   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000064   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000068   0xDA0C             BGE.N    ??MC1324xDrv_DirectAccessSPIMultiByteWrite_4
    431            {
    432              SPIPushRegister = (uint32_t) *(byteArray++);
   \   0000006A   0x7828             LDRB     R0,[R5, #+0]
   \   0000006C   0x0007             MOVS     R7,R0
   \   0000006E   0x1C6D             ADDS     R5,R5,#+1
    433              SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    434                                             cSPI_PUSHR_PCS_select_c |
    435                                             cSPI_PUSHR_CTAS0_select_c);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   00000074   0x4307             ORRS     R7,R0,R7
    436              MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   0000007A   0x6007             STR      R7,[R0, #+0]
    437              numOfBytes--;
   \   0000007C   0x1E76             SUBS     R6,R6,#+1
    438              fifoIdx++;
   \   0000007E   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000082   0xE7EA             B.N      ??MC1324xDrv_DirectAccessSPIMultiByteWrite_3
    439            }
    440            
    441            StartSPITransfer();
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_4: (+1)
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x0840             LSRS     R0,R0,#+1
   \   0000008C   0x0040             LSLS     R0,R0,#+1
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000092   0x6008             STR      R0,[R1, #+0]
    442            
    443            while((numOfBytes > 1))
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_5: (+1)
   \   00000094   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000096   0x2E02             CMP      R6,#+2
   \   00000098   0xDB17             BLT.N    ??MC1324xDrv_DirectAccessSPIMultiByteWrite_6
    444            {
    445              SPIPushRegister = (uint32_t) *(byteArray++);
   \   0000009A   0x7828             LDRB     R0,[R5, #+0]
   \   0000009C   0x0007             MOVS     R7,R0
   \   0000009E   0x1C6D             ADDS     R5,R5,#+1
    446              SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    447                                             cSPI_PUSHR_PCS_select_c |
    448                                             cSPI_PUSHR_CTAS0_select_c);
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   000000A4   0x4307             ORRS     R7,R0,R7
    449              WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_7: (+1)
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD5FA             BPL.N    ??MC1324xDrv_DirectAccessSPIMultiByteWrite_7
    450              ClearSPI_TransferCompleteFlag();
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    451              
    452              MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   000000C4   0x6007             STR      R7,[R0, #+0]
    453              numOfBytes--;
   \   000000C6   0x1E76             SUBS     R6,R6,#+1
   \   000000C8   0xE7E4             B.N      ??MC1324xDrv_DirectAccessSPIMultiByteWrite_5
    454            }
    455            
    456            SPIPushRegister = (uint32_t) *(byteArray);
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_6: (+1)
   \   000000CA   0x7828             LDRB     R0,[R5, #+0]
   \   000000CC   0x0007             MOVS     R7,R0
    457            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
    458                                           cSPI_PUSHR_PCS_select_c |
    459                                           cSPI_PUSHR_CTAS0_select_c);
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable19_16  ;; 0x8010000
   \   000000D2   0x4307             ORRS     R7,R0,R7
    460            WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_8: (+1)
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD5FA             BPL.N    ??MC1324xDrv_DirectAccessSPIMultiByteWrite_8
    461            ClearSPI_TransferCompleteFlag();
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000EC   0x6008             STR      R0,[R1, #+0]
    462            
    463            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   000000F2   0x6007             STR      R7,[R0, #+0]
    464            
    465            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_9: (+1)
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0x00C0             LSLS     R0,R0,#+3
   \   000000FC   0xD5FA             BPL.N    ??MC1324xDrv_DirectAccessSPIMultiByteWrite_9
    466            
    467            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000108   0x4308             ORRS     R0,R1,R0
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000010E   0x6008             STR      R0,[R1, #+0]
    468            StopSPITransferAndFlushFifo();
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0xF640 0x4101      MOVW     R1,#+3073
   \   0000011A   0x4308             ORRS     R0,R1,R0
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000120   0x6008             STR      R0,[R1, #+0]
    469          
    470            IntRestoreAll(irqMaskRegister);
   \   00000122   0x4648             MOV      R0,R9
   \   00000124   0x.... 0x....      BL       IntRestoreAll
    471          }
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteWrite_2: (+1)
   \   00000128   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    472          
    473          /*---------------------------------------------------------------------------
    474           * Name: MC1324xDrv_PB_SPIBurstWrite
    475           * Description: -
    476           * Parameters: -
    477           * Return: -
    478           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    479          void MC1324xDrv_PB_SPIBurstWrite
    480          (
    481           uint8_t * byteArray,
    482           uint8_t numOfBytes
    483          )
    484          {
   \                     MC1324xDrv_PB_SPIBurstWrite: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    485            uint32_t SPIPushRegister;
    486            uint8_t fifoIdx = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    487            uint32_t irqMaskRegister;
    488          
    489            if( (numOfBytes == 0) || (byteArray == NULL) )
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD001             BEQ.N    ??MC1324xDrv_PB_SPIBurstWrite_0
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD100             BNE.N    ??MC1324xDrv_PB_SPIBurstWrite_1
    490            {
    491              return;
   \                     ??MC1324xDrv_PB_SPIBurstWrite_0: (+1)
   \   00000014   0xE07F             B.N      ??MC1324xDrv_PB_SPIBurstWrite_2
    492            }
    493          
    494            irqMaskRegister = IntDisableAll();
   \                     ??MC1324xDrv_PB_SPIBurstWrite_1: (+1)
   \   00000016   0x.... 0x....      BL       IntDisableAll
   \   0000001A   0x4680             MOV      R8,R0
    495              
    496            FlushSPIFifo();
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    497            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000036   0x4308             ORRS     R0,R1,R0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    498            
    499            SPIPushRegister = (uint32_t) ( TransceiverSPI_WriteSelect
    500                                          |TransceiverSPI_PacketBuffAccessSelect
    501                                          |TransceiverSPI_PacketBuffBurstModeSelect);
   \   0000003E   0x2040             MOVS     R0,#+64
   \   00000040   0x0006             MOVS     R6,R0
    502            
    503            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    504                                           cSPI_PUSHR_PCS_select_c |
    505                                           cSPI_PUSHR_CTAS0_select_c);
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   00000046   0x4306             ORRS     R6,R0,R6
    506            
    507            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   0000004C   0x6006             STR      R6,[R0, #+0]
    508            fifoIdx++;
   \   0000004E   0x1C7F             ADDS     R7,R7,#+1
    509            
    510            while( (numOfBytes > 1)  && (fifoIdx < 4) )
   \                     ??MC1324xDrv_PB_SPIBurstWrite_3: (+1)
   \   00000050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   0x2D02             CMP      R5,#+2
   \   00000054   0xDB0E             BLT.N    ??MC1324xDrv_PB_SPIBurstWrite_4
   \   00000056   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000058   0x2F04             CMP      R7,#+4
   \   0000005A   0xDA0B             BGE.N    ??MC1324xDrv_PB_SPIBurstWrite_4
    511            {
    512              SPIPushRegister = (uint32_t) *(byteArray++);
   \   0000005C   0x7820             LDRB     R0,[R4, #+0]
   \   0000005E   0x0006             MOVS     R6,R0
   \   00000060   0x1C64             ADDS     R4,R4,#+1
    513              SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    514                                             cSPI_PUSHR_PCS_select_c |
    515                                             cSPI_PUSHR_CTAS0_select_c);
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   00000066   0x4306             ORRS     R6,R0,R6
    516              MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   0000006C   0x6006             STR      R6,[R0, #+0]
    517              numOfBytes--;
   \   0000006E   0x1E6D             SUBS     R5,R5,#+1
    518              fifoIdx++;
   \   00000070   0x1C7F             ADDS     R7,R7,#+1
   \   00000072   0xE7ED             B.N      ??MC1324xDrv_PB_SPIBurstWrite_3
    519            }
    520            
    521            StartSPITransfer();
   \                     ??MC1324xDrv_PB_SPIBurstWrite_4: (+1)
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x0840             LSRS     R0,R0,#+1
   \   0000007C   0x0040             LSLS     R0,R0,#+1
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000082   0x6008             STR      R0,[R1, #+0]
    522            
    523            while((numOfBytes > 1))
   \                     ??MC1324xDrv_PB_SPIBurstWrite_5: (+1)
   \   00000084   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000086   0x2D02             CMP      R5,#+2
   \   00000088   0xDB17             BLT.N    ??MC1324xDrv_PB_SPIBurstWrite_6
    524            {
    525              SPIPushRegister = (uint32_t) *(byteArray++);
   \   0000008A   0x7820             LDRB     R0,[R4, #+0]
   \   0000008C   0x0006             MOVS     R6,R0
   \   0000008E   0x1C64             ADDS     R4,R4,#+1
    526              SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    527                                             cSPI_PUSHR_PCS_select_c |
    528                                             cSPI_PUSHR_CTAS0_select_c);
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   00000094   0x4306             ORRS     R6,R0,R6
    529              WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_PB_SPIBurstWrite_7: (+1)
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD5FA             BPL.N    ??MC1324xDrv_PB_SPIBurstWrite_7
    530              ClearSPI_TransferCompleteFlag();
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000AE   0x6008             STR      R0,[R1, #+0]
    531              
    532              MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   000000B4   0x6006             STR      R6,[R0, #+0]
    533              numOfBytes--;
   \   000000B6   0x1E6D             SUBS     R5,R5,#+1
   \   000000B8   0xE7E4             B.N      ??MC1324xDrv_PB_SPIBurstWrite_5
    534            }
    535            
    536            SPIPushRegister = (uint32_t) *(byteArray);
   \                     ??MC1324xDrv_PB_SPIBurstWrite_6: (+1)
   \   000000BA   0x7820             LDRB     R0,[R4, #+0]
   \   000000BC   0x0006             MOVS     R6,R0
    537            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
    538                                           cSPI_PUSHR_PCS_select_c |
    539                                           cSPI_PUSHR_CTAS0_select_c);
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable19_16  ;; 0x8010000
   \   000000C2   0x4306             ORRS     R6,R0,R6
    540            WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_PB_SPIBurstWrite_8: (+1)
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD5FA             BPL.N    ??MC1324xDrv_PB_SPIBurstWrite_8
    541            ClearSPI_TransferCompleteFlag();
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000DC   0x6008             STR      R0,[R1, #+0]
    542            
    543            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   000000E2   0x6006             STR      R6,[R0, #+0]
    544            
    545            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_PB_SPIBurstWrite_9: (+1)
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0x00C0             LSLS     R0,R0,#+3
   \   000000EC   0xD5FA             BPL.N    ??MC1324xDrv_PB_SPIBurstWrite_9
    546            
    547            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c);
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0xF050 0x4010      ORRS     R0,R0,#0x90000000
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000FC   0x6008             STR      R0,[R1, #+0]
    548          
    549            StopSPITransferAndFlushFifo();
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0xF640 0x4101      MOVW     R1,#+3073
   \   00000108   0x4308             ORRS     R0,R1,R0
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000010E   0x6008             STR      R0,[R1, #+0]
    550          
    551            IntRestoreAll(irqMaskRegister);
   \   00000110   0x4640             MOV      R0,R8
   \   00000112   0x.... 0x....      BL       IntRestoreAll
    552          }
   \                     ??MC1324xDrv_PB_SPIBurstWrite_2: (+1)
   \   00000116   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    553          
    554          /*---------------------------------------------------------------------------
    555           * Name: MC1324xDrv_DirectAccessSPIRead
    556           * Description: -
    557           * Parameters: -
    558           * Return: -
    559           *---------------------------------------------------------------------------*/
    560          

   \                                 In section .text, align 2, keep-with-next
    561          uint8_t MC1324xDrv_DirectAccessSPIRead
    562          (
    563           uint8_t address
    564          )
    565          {
   \                     MC1324xDrv_DirectAccessSPIRead: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    566            uint32_t SPIPushRegister, SPIPopRegister;
    567            uint32_t irqMaskRegister;
    568            
    569            irqMaskRegister = IntDisableAll();
   \   00000004   0x.... 0x....      BL       IntDisableAll
   \   00000008   0x0007             MOVS     R7,R0
    570              
    571            FlushSPIFifo();
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000018   0x6008             STR      R0,[R1, #+0]
    572            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000024   0x4308             ORRS     R0,R1,R0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    573          
    574            SPIPushRegister = (uint32_t) ((address & TransceiverSPI_DirectRegisterAddressMask) |
    575                                          TransceiverSPI_ReadSelect);
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0xF014 0x003F      ANDS     R0,R4,#0x3F
   \   00000032   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000036   0x0005             MOVS     R5,R0
    576            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    577                                           cSPI_PUSHR_PCS_select_c |
    578                                           cSPI_PUSHR_CTAS1_select_c);
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable19_17  ;; 0x90010000
   \   0000003C   0x4305             ORRS     R5,R0,R5
    579            
    580            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   00000042   0x6005             STR      R5,[R0, #+0]
    581            
    582            SPIPushRegister = (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
    583                                          cSPI_PUSHR_PCS_select_c |
    584                                          cSPI_PUSHR_CTAS1_select_c);
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable19_18  ;; 0x18010000
   \   00000048   0x0005             MOVS     R5,R0
    585          
    586            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   0000004E   0x6005             STR      R5,[R0, #+0]
    587            
    588            StartSPITransfer();
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x0840             LSRS     R0,R0,#+1
   \   00000058   0x0040             LSLS     R0,R0,#+1
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    589            
    590            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_DirectAccessSPIRead_0: (+1)
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x00C0             LSLS     R0,R0,#+3
   \   00000068   0xD5FA             BPL.N    ??MC1324xDrv_DirectAccessSPIRead_0
    591            
    592            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000074   0x4308             ORRS     R0,R1,R0
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    593            
    594            StopSPITransfer();
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    595            
    596            SPIPopRegister = MC1324x_SPI_RXFR1;
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable19_19  ;; 0x4002d080
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0006             MOVS     R6,R0
    597          
    598            FlushSPIFifo();
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    599          
    600            IntRestoreAll(irqMaskRegister);
   \   000000A4   0x0038             MOVS     R0,R7
   \   000000A6   0x.... 0x....      BL       IntRestoreAll
    601            
    602            return (uint8_t)SPIPopRegister;
   \   000000AA   0x0030             MOVS     R0,R6
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    603            
    604          }
    605          
    606          /*---------------------------------------------------------------------------
    607           * Name: MC1324xDrv_DirectAccessSPIMultyByteRead
    608           * Description: -
    609           * Parameters: -
    610           * Return: -
    611           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    612          void MC1324xDrv_DirectAccessSPIMultiByteRead
    613          (
    614           uint8_t startAddress,
    615           uint8_t * byteArray,
    616           uint8_t numOfBytes
    617          )
    618          {
   \                     MC1324xDrv_DirectAccessSPIMultiByteRead: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    619            uint32_t SPIPushRegister;
    620            uint32_t irqMaskRegister;
    621            
    622            if( (numOfBytes == 0) || (byteArray == NULL) )
   \   0000000A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000C   0x2E00             CMP      R6,#+0
   \   0000000E   0xD001             BEQ.N    ??MC1324xDrv_DirectAccessSPIMultiByteRead_0
   \   00000010   0x2D00             CMP      R5,#+0
   \   00000012   0xD100             BNE.N    ??MC1324xDrv_DirectAccessSPIMultiByteRead_1
    623            {
    624              return;
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteRead_0: (+1)
   \   00000014   0xE089             B.N      ??MC1324xDrv_DirectAccessSPIMultiByteRead_2
    625            }
    626            
    627            //asm(" MRS %0,PRIMASK" : "=r" (irqMaskRegister) );
    628            //asm(" CPSID i");
    629            irqMaskRegister = IntDisableAll();
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteRead_1: (+1)
   \   00000016   0x.... 0x....      BL       IntDisableAll
   \   0000001A   0x4680             MOV      R8,R0
    630               
    631            FlushSPIFifo();
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    632            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000036   0x4308             ORRS     R0,R1,R0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    633          
    634            SPIPushRegister = (uint32_t) ((startAddress & TransceiverSPI_DirectRegisterAddressMask) |
    635                                          TransceiverSPI_ReadSelect);
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0xF014 0x003F      ANDS     R0,R4,#0x3F
   \   00000044   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000048   0x0007             MOVS     R7,R0
    636            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    637                                           cSPI_PUSHR_PCS_select_c |
    638                                           cSPI_PUSHR_CTAS1_select_c);
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable19_17  ;; 0x90010000
   \   0000004E   0x4307             ORRS     R7,R0,R7
    639            
    640            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   00000054   0x6007             STR      R7,[R0, #+0]
    641            
    642            StartSPITransfer();
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x0840             LSRS     R0,R0,#+1
   \   0000005E   0x0040             LSLS     R0,R0,#+1
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000064   0x6008             STR      R0,[R1, #+0]
    643            
    644            WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteRead_3: (+1)
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD5FA             BPL.N    ??MC1324xDrv_DirectAccessSPIMultiByteRead_3
    645            ClearSPI_TransferCompleteFlag();
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    646            
    647            //Flush RX FIFO
    648            MC1324x_SPI_MCR |= (uint32_t)((SPI_MCR_CLR_RXF_MASK));
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    649          
    650            while( (numOfBytes > 1) )
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteRead_4: (+1)
   \   00000090   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000092   0x2E02             CMP      R6,#+2
   \   00000094   0xDB1B             BLT.N    ??MC1324xDrv_DirectAccessSPIMultiByteRead_5
    651            {
    652              SPIPushRegister = (uint32_t) 0;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x0007             MOVS     R7,R0
    653              SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    654                                             cSPI_PUSHR_PCS_select_c |
    655                                             cSPI_PUSHR_CTAS1_select_c);
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable19_17  ;; 0x90010000
   \   0000009E   0x4307             ORRS     R7,R0,R7
    656              
    657              MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   000000A4   0x6007             STR      R7,[R0, #+0]
    658              
    659              WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteRead_6: (+1)
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD5FA             BPL.N    ??MC1324xDrv_DirectAccessSPIMultiByteRead_6
    660              ClearSPI_TransferCompleteFlag();
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    661              
    662              *byteArray++ = MC1324x_SPI_POPR;
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable19_20  ;; 0x4002d038
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0x7028             STRB     R0,[R5, #+0]
   \   000000C8   0x1C6D             ADDS     R5,R5,#+1
    663              
    664              numOfBytes--;
   \   000000CA   0x1E76             SUBS     R6,R6,#+1
   \   000000CC   0xE7E0             B.N      ??MC1324xDrv_DirectAccessSPIMultiByteRead_4
    665            }
    666            
    667            SPIPushRegister = (uint32_t) 0;
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteRead_5: (+1)
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x0007             MOVS     R7,R0
    668            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
    669                                           cSPI_PUSHR_PCS_select_c |
    670                                           cSPI_PUSHR_CTAS1_select_c);
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable19_18  ;; 0x18010000
   \   000000D6   0x4307             ORRS     R7,R0,R7
    671            
    672            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   000000DC   0x6007             STR      R7,[R0, #+0]
    673            
    674            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteRead_7: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0x00C0             LSLS     R0,R0,#+3
   \   000000E6   0xD5FA             BPL.N    ??MC1324xDrv_DirectAccessSPIMultiByteRead_7
    675            
    676            *byteArray++ = MC1324x_SPI_POPR;
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable19_20  ;; 0x4002d038
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0x7028             STRB     R0,[R5, #+0]
   \   000000F0   0x1C6D             ADDS     R5,R5,#+1
    677            
    678            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   000000FC   0x4308             ORRS     R0,R1,R0
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   00000102   0x6008             STR      R0,[R1, #+0]
    679            
    680            StopSPITransfer();
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000112   0x6008             STR      R0,[R1, #+0]
    681            
    682            FlushSPIFifo();
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000122   0x6008             STR      R0,[R1, #+0]
    683          
    684            //asm(" MSR PRIMASK, %0" : : "r" (irqMaskRegister) );
    685            IntRestoreAll(irqMaskRegister);
   \   00000124   0x4640             MOV      R0,R8
   \   00000126   0x.... 0x....      BL       IntRestoreAll
    686          }
   \                     ??MC1324xDrv_DirectAccessSPIMultiByteRead_2: (+1)
   \   0000012A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    687          
    688          /*---------------------------------------------------------------------------
    689           * Name: MC1324xDrv_PB_SPIBurstRead
    690           * Description: -
    691           * Parameters: -
    692           * Return: -
    693           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    694          void MC1324xDrv_PB_SPIBurstRead
    695          (
    696           uint8_t * byteArray,
    697           uint8_t numOfBytes
    698          )
    699          {
   \                     MC1324xDrv_PB_SPIBurstRead: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    700            uint32_t SPIPushRegister;
    701            uint32_t irqMaskRegister;
    702          
    703            if( (numOfBytes == 0) || (byteArray == NULL) )
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x2D00             CMP      R5,#+0
   \   0000000A   0xD001             BEQ.N    ??MC1324xDrv_PB_SPIBurstRead_0
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD100             BNE.N    ??MC1324xDrv_PB_SPIBurstRead_1
    704            {
    705              return;
   \                     ??MC1324xDrv_PB_SPIBurstRead_0: (+1)
   \   00000010   0xE085             B.N      ??MC1324xDrv_PB_SPIBurstRead_2
    706            }
    707            
    708            //asm(" MRS %0,PRIMASK" : "=r" (irqMaskRegister) );
    709            //asm(" CPSID i");
    710            irqMaskRegister = IntDisableAll();
   \                     ??MC1324xDrv_PB_SPIBurstRead_1: (+1)
   \   00000012   0x.... 0x....      BL       IntDisableAll
   \   00000016   0x0007             MOVS     R7,R0
    711               
    712            FlushSPIFifo();
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000026   0x6008             STR      R0,[R1, #+0]
    713            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000032   0x4308             ORRS     R0,R1,R0
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   00000038   0x6008             STR      R0,[R1, #+0]
    714            
    715            SPIPushRegister = (uint32_t) ( TransceiverSPI_ReadSelect
    716                                          |TransceiverSPI_PacketBuffAccessSelect
    717                                          |TransceiverSPI_PacketBuffBurstModeSelect);
   \   0000003A   0x20C0             MOVS     R0,#+192
   \   0000003C   0x0006             MOVS     R6,R0
    718            
    719            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    720                                           cSPI_PUSHR_PCS_select_c |
    721                                           cSPI_PUSHR_CTAS1_select_c);
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable19_17  ;; 0x90010000
   \   00000042   0x4306             ORRS     R6,R0,R6
    722            
    723            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   00000048   0x6006             STR      R6,[R0, #+0]
    724            
    725            StartSPITransfer();
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x0840             LSRS     R0,R0,#+1
   \   00000052   0x0040             LSLS     R0,R0,#+1
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000058   0x6008             STR      R0,[R1, #+0]
    726            
    727            WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_PB_SPIBurstRead_3: (+1)
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD5FA             BPL.N    ??MC1324xDrv_PB_SPIBurstRead_3
    728            ClearSPI_TransferCompleteFlag();
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   00000072   0x6008             STR      R0,[R1, #+0]
    729            
    730            //Flush RX FIFO
    731            MC1324x_SPI_MCR |= (uint32_t)((SPI_MCR_CLR_RXF_MASK));
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000082   0x6008             STR      R0,[R1, #+0]
    732            
    733            while( (numOfBytes > 1) )
   \                     ??MC1324xDrv_PB_SPIBurstRead_4: (+1)
   \   00000084   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000086   0x2D02             CMP      R5,#+2
   \   00000088   0xDB1B             BLT.N    ??MC1324xDrv_PB_SPIBurstRead_5
    734            {
    735              SPIPushRegister = (uint32_t) 0;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x0006             MOVS     R6,R0
    736              SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    737                                             cSPI_PUSHR_PCS_select_c |
    738                                             cSPI_PUSHR_CTAS1_select_c);
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable19_17  ;; 0x90010000
   \   00000092   0x4306             ORRS     R6,R0,R6
    739              
    740              MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   00000098   0x6006             STR      R6,[R0, #+0]
    741              
    742              WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_PB_SPIBurstRead_6: (+1)
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD5FA             BPL.N    ??MC1324xDrv_PB_SPIBurstRead_6
    743              ClearSPI_TransferCompleteFlag();
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000B2   0x6008             STR      R0,[R1, #+0]
    744              
    745              *byteArray++ = MC1324x_SPI_POPR;
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable19_20  ;; 0x4002d038
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x7020             STRB     R0,[R4, #+0]
   \   000000BC   0x1C64             ADDS     R4,R4,#+1
    746              
    747              numOfBytes--;
   \   000000BE   0x1E6D             SUBS     R5,R5,#+1
   \   000000C0   0xE7E0             B.N      ??MC1324xDrv_PB_SPIBurstRead_4
    748            }
    749            
    750            SPIPushRegister = (uint32_t) 0;
   \                     ??MC1324xDrv_PB_SPIBurstRead_5: (+1)
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x0006             MOVS     R6,R0
    751            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
    752                                           cSPI_PUSHR_PCS_select_c |
    753                                           cSPI_PUSHR_CTAS1_select_c);
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable19_18  ;; 0x18010000
   \   000000CA   0x4306             ORRS     R6,R0,R6
    754            
    755            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   000000D0   0x6006             STR      R6,[R0, #+0]
    756            
    757            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_PB_SPIBurstRead_7: (+1)
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0x00C0             LSLS     R0,R0,#+3
   \   000000DA   0xD5FA             BPL.N    ??MC1324xDrv_PB_SPIBurstRead_7
    758            
    759            *byteArray++ = MC1324x_SPI_POPR;
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable19_20  ;; 0x4002d038
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0x7020             STRB     R0,[R4, #+0]
   \   000000E4   0x1C64             ADDS     R4,R4,#+1
    760            
    761            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   000000F0   0x4308             ORRS     R0,R1,R0
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000F6   0x6008             STR      R0,[R1, #+0]
    762            
    763            StopSPITransfer();
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000106   0x6008             STR      R0,[R1, #+0]
    764            
    765            FlushSPIFifo();
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000116   0x6008             STR      R0,[R1, #+0]
    766            
    767            //asm(" MSR PRIMASK, %0" : : "r" (irqMaskRegister) );
    768            IntRestoreAll(irqMaskRegister);
   \   00000118   0x0038             MOVS     R0,R7
   \   0000011A   0x.... 0x....      BL       IntRestoreAll
    769          }
   \                     ??MC1324xDrv_PB_SPIBurstRead_2: (+1)
   \   0000011E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    770          
    771          /*---------------------------------------------------------------------------
    772           * Name: MC1324xDrv_IndirectAccessSPIWrite
    773           * Description: -
    774           * Parameters: -
    775           * Return: -
    776           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    777          void MC1324xDrv_IndirectAccessSPIWrite
    778          (
    779           uint8_t address,
    780           uint8_t value
    781          )
    782          {
   \                     MC1324xDrv_IndirectAccessSPIWrite: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    783            uint32_t SPIPushRegister = (uint8_t) TransceiverSPI_IARIndexReg;
   \   00000006   0x263E             MOVS     R6,#+62
    784            uint32_t irqMaskRegister;
    785            
    786            //asm(" MRS %0,PRIMASK" : "=r" (irqMaskRegister) );
    787            //asm(" CPSID i");
    788            irqMaskRegister = IntDisableAll();
   \   00000008   0x.... 0x....      BL       IntDisableAll
   \   0000000C   0x0007             MOVS     R7,R0
    789              
    790            FlushSPIFifo();
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    791            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000028   0x4308             ORRS     R0,R1,R0
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    792            
    793            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    794                                           cSPI_PUSHR_PCS_select_c |
    795                                           cSPI_PUSHR_CTAS0_select_c);
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   00000034   0x4306             ORRS     R6,R0,R6
    796            
    797            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   0000003A   0x6006             STR      R6,[R0, #+0]
    798            
    799            SPIPushRegister = (uint32_t) (address);
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0x0026             MOVS     R6,R4
    800            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    801                                           cSPI_PUSHR_PCS_select_c |
    802                                           cSPI_PUSHR_CTAS0_select_c);
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   00000044   0x4306             ORRS     R6,R0,R6
    803            
    804            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   0000004A   0x6006             STR      R6,[R0, #+0]
    805          
    806            SPIPushRegister = (uint32_t) (value);
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x002E             MOVS     R6,R5
    807            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
    808                                           cSPI_PUSHR_PCS_select_c |
    809                                           cSPI_PUSHR_CTAS0_select_c);
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable19_16  ;; 0x8010000
   \   00000054   0x4306             ORRS     R6,R0,R6
    810            
    811            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   0000005A   0x6006             STR      R6,[R0, #+0]
    812            
    813            StartSPITransfer();
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x0840             LSRS     R0,R0,#+1
   \   00000064   0x0040             LSLS     R0,R0,#+1
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    814            
    815            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_IndirectAccessSPIWrite_0: (+1)
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x00C0             LSLS     R0,R0,#+3
   \   00000074   0xD5FA             BPL.N    ??MC1324xDrv_IndirectAccessSPIWrite_0
    816            
    817            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   00000080   0x4308             ORRS     R0,R1,R0
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   00000086   0x6008             STR      R0,[R1, #+0]
    818            
    819            StopSPITransferAndFlushFifo();
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0xF640 0x4101      MOVW     R1,#+3073
   \   00000092   0x4308             ORRS     R0,R1,R0
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000098   0x6008             STR      R0,[R1, #+0]
    820            
    821            //asm(" MSR PRIMASK, %0" : : "r" (irqMaskRegister) );
    822            IntRestoreAll(irqMaskRegister);
   \   0000009A   0x0038             MOVS     R0,R7
   \   0000009C   0x.... 0x....      BL       IntRestoreAll
    823          }
   \   000000A0   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    824          
    825          /*---------------------------------------------------------------------------
    826           * Name: MC1324xDrv_IndirectAccessSPIMultiByteWrite
    827           * Description: -
    828           * Parameters: -
    829           * Return: -
    830           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    831          void MC1324xDrv_IndirectAccessSPIMultiByteWrite
    832          (
    833           uint8_t startAddress,
    834           uint8_t * byteArray,
    835           uint8_t numOfBytes
    836          )
    837          {
   \                     MC1324xDrv_IndirectAccessSPIMultiByteWrite: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    838            uint32_t SPIPushRegister = (uint8_t) TransceiverSPI_IARIndexReg;
   \   0000000A   0x273E             MOVS     R7,#+62
    839            uint8_t fifoIdx = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    840            uint32_t irqMaskRegister;
    841            
    842            if( (numOfBytes == 0) || (byteArray == NULL) )
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0x2E00             CMP      R6,#+0
   \   00000014   0xD001             BEQ.N    ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_0
   \   00000016   0x2D00             CMP      R5,#+0
   \   00000018   0xD100             BNE.N    ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_1
    843            {
    844              return;
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_0: (+1)
   \   0000001A   0xE082             B.N      ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_2
    845            }
    846            
    847            //asm(" MRS %0,PRIMASK" : "=r" (irqMaskRegister) );
    848            //asm(" CPSID i");
    849            irqMaskRegister = IntDisableAll();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_1: (+1)
   \   0000001C   0x.... 0x....      BL       IntDisableAll
   \   00000020   0x4681             MOV      R9,R0
    850              
    851            FlushSPIFifo();
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   00000030   0x6008             STR      R0,[R1, #+0]
    852            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable19_13  ;; 0x90020000
   \   0000003C   0x4308             ORRS     R0,R1,R0
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   00000042   0x6008             STR      R0,[R1, #+0]
    853          
    854            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    855                                           cSPI_PUSHR_PCS_select_c |
    856                                           cSPI_PUSHR_CTAS0_select_c);
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   00000048   0x4307             ORRS     R7,R0,R7
    857            
    858            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   0000004E   0x6007             STR      R7,[R0, #+0]
    859            fifoIdx++;
   \   00000050   0xF118 0x0801      ADDS     R8,R8,#+1
    860            
    861            SPIPushRegister = (uint32_t) (startAddress);
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0x0027             MOVS     R7,R4
    862            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    863                                           cSPI_PUSHR_PCS_select_c |
    864                                           cSPI_PUSHR_CTAS0_select_c);
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   0000005C   0x4307             ORRS     R7,R0,R7
    865            
    866            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   00000062   0x6007             STR      R7,[R0, #+0]
    867            fifoIdx++;
   \   00000064   0xF118 0x0801      ADDS     R8,R8,#+1
    868            
    869            while( (numOfBytes > 1)  && (fifoIdx < 4) )
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_3: (+1)
   \   00000068   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000006A   0x2E02             CMP      R6,#+2
   \   0000006C   0xDB11             BLT.N    ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_4
   \   0000006E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000072   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000076   0xDA0C             BGE.N    ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_4
    870            {
    871              SPIPushRegister = (uint32_t) *(byteArray++);
   \   00000078   0x7828             LDRB     R0,[R5, #+0]
   \   0000007A   0x0007             MOVS     R7,R0
   \   0000007C   0x1C6D             ADDS     R5,R5,#+1
    872              SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    873                                             cSPI_PUSHR_PCS_select_c |
    874                                             cSPI_PUSHR_CTAS0_select_c);
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   00000082   0x4307             ORRS     R7,R0,R7
    875              MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   00000088   0x6007             STR      R7,[R0, #+0]
    876              fifoIdx++;
   \   0000008A   0xF118 0x0801      ADDS     R8,R8,#+1
    877              numOfBytes--;
   \   0000008E   0x1E76             SUBS     R6,R6,#+1
   \   00000090   0xE7EA             B.N      ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_3
    878            }
    879            
    880            StartSPITransfer();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_4: (+1)
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4002d000
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0x0840             LSRS     R0,R0,#+1
   \   0000009A   0x0040             LSLS     R0,R0,#+1
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4002d000
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    881            
    882            while((numOfBytes > 1))
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_5: (+1)
   \   000000A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A4   0x2E02             CMP      R6,#+2
   \   000000A6   0xDB17             BLT.N    ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_6
    883            {
    884              SPIPushRegister = (uint32_t) *(byteArray++);
   \   000000A8   0x7828             LDRB     R0,[R5, #+0]
   \   000000AA   0x0007             MOVS     R7,R0
   \   000000AC   0x1C6D             ADDS     R5,R5,#+1
    885              SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    886                                             cSPI_PUSHR_PCS_select_c |
    887                                             cSPI_PUSHR_CTAS0_select_c);
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x80010000
   \   000000B2   0x4307             ORRS     R7,R0,R7
    888              WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_7: (+1)
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD5FA             BPL.N    ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_7
    889              ClearSPI_TransferCompleteFlag();
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000CC   0x6008             STR      R0,[R1, #+0]
    890              
    891              MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4002d034
   \   000000D2   0x6007             STR      R7,[R0, #+0]
    892              numOfBytes--;
   \   000000D4   0x1E76             SUBS     R6,R6,#+1
   \   000000D6   0xE7E4             B.N      ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_5
    893            }
    894            
    895            SPIPushRegister = (uint32_t) *(byteArray);
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_6: (+1)
   \   000000D8   0x7828             LDRB     R0,[R5, #+0]
   \   000000DA   0x0007             MOVS     R7,R0
    896            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
    897                                           cSPI_PUSHR_PCS_select_c |
    898                                           cSPI_PUSHR_CTAS0_select_c);
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable19_16  ;; 0x8010000
   \   000000E0   0x4307             ORRS     R7,R0,R7
    899            WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_8: (+1)
   \   000000E2   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x2800             CMP      R0,#+0
   \   000000E8   0xD5FB             BPL.N    ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_8
    900            ClearSPI_TransferCompleteFlag();
   \   000000EA   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000F2   0x....             LDR.N    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000F4   0x6008             STR      R0,[R1, #+0]
    901            
    902            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000F6   0x....             LDR.N    R0,??DataTable19_15  ;; 0x4002d034
   \   000000F8   0x6007             STR      R7,[R0, #+0]
    903            
    904            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_9: (+1)
   \   000000FA   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0x00C0             LSLS     R0,R0,#+3
   \   00000100   0xD5FB             BPL.N    ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_9
    905            
    906            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   00000102   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000104   0x6800             LDR      R0,[R0, #+0]
   \   00000106   0x....             LDR.N    R1,??DataTable19_13  ;; 0x90020000
   \   00000108   0x4308             ORRS     R0,R1,R0
   \   0000010A   0x....             LDR.N    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000010C   0x6008             STR      R0,[R1, #+0]
    907            StopSPITransferAndFlushFifo();
   \   0000010E   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   00000110   0x6800             LDR      R0,[R0, #+0]
   \   00000112   0xF640 0x4101      MOVW     R1,#+3073
   \   00000116   0x4308             ORRS     R0,R1,R0
   \   00000118   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   0000011A   0x6008             STR      R0,[R1, #+0]
    908            
    909            //asm(" MSR PRIMASK, %0" : : "r" (irqMaskRegister) );
    910            IntRestoreAll(irqMaskRegister);
   \   0000011C   0x4648             MOV      R0,R9
   \   0000011E   0x.... 0x....      BL       IntRestoreAll
    911          }
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteWrite_2: (+1)
   \   00000122   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    912          
    913          /*---------------------------------------------------------------------------
    914           * Name: MC1324xDrv_IndirectAccessSPIRead
    915           * Description: -
    916           * Parameters: -
    917           * Return: -
    918           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    919          uint8_t MC1324xDrv_IndirectAccessSPIRead
    920          (
    921           uint8_t address
    922          )
    923          {
   \                     MC1324xDrv_IndirectAccessSPIRead: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    924            uint32_t SPIPushRegister = (uint8_t) (TransceiverSPI_IARIndexReg | TransceiverSPI_ReadSelect), SPIPopRegister;
   \   00000004   0x26BE             MOVS     R6,#+190
    925            uint32_t irqMaskRegister;
    926            
    927            //asm(" MRS %0,PRIMASK" : "=r" (irqMaskRegister) );
    928            //asm(" CPSID i");
    929            irqMaskRegister = IntDisableAll();
   \   00000006   0x.... 0x....      BL       IntDisableAll
   \   0000000A   0x0007             MOVS     R7,R0
    930              
    931            FlushSPIFifo();
   \   0000000C   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   00000014   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   00000016   0x6008             STR      R0,[R1, #+0]
    932            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   00000018   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable19_13  ;; 0x90020000
   \   0000001E   0x4308             ORRS     R0,R1,R0
   \   00000020   0x....             LDR.N    R1,??DataTable19_12  ;; 0x4002d02c
   \   00000022   0x6008             STR      R0,[R1, #+0]
    933            
    934            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    935                                           cSPI_PUSHR_PCS_select_c |
    936                                           cSPI_PUSHR_CTAS1_select_c);
   \   00000024   0x....             LDR.N    R0,??DataTable19_17  ;; 0x90010000
   \   00000026   0x4306             ORRS     R6,R0,R6
    937            
    938            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000028   0x....             LDR.N    R0,??DataTable19_15  ;; 0x4002d034
   \   0000002A   0x6006             STR      R6,[R0, #+0]
    939            
    940            SPIPushRegister = (uint32_t) (address);
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x0026             MOVS     R6,R4
    941            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
    942                                           cSPI_PUSHR_PCS_select_c |
    943                                           cSPI_PUSHR_CTAS1_select_c);
   \   00000030   0x....             LDR.N    R0,??DataTable19_17  ;; 0x90010000
   \   00000032   0x4306             ORRS     R6,R0,R6
    944            
    945            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000034   0x....             LDR.N    R0,??DataTable19_15  ;; 0x4002d034
   \   00000036   0x6006             STR      R6,[R0, #+0]
    946          
    947            SPIPushRegister = (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
    948                                          cSPI_PUSHR_PCS_select_c |
    949                                          cSPI_PUSHR_CTAS1_select_c);
   \   00000038   0x....             LDR.N    R0,??DataTable19_18  ;; 0x18010000
   \   0000003A   0x0006             MOVS     R6,R0
    950            
    951            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   0000003C   0x....             LDR.N    R0,??DataTable19_15  ;; 0x4002d034
   \   0000003E   0x6006             STR      R6,[R0, #+0]
    952            
    953            StartSPITransfer();
   \   00000040   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x0840             LSRS     R0,R0,#+1
   \   00000046   0x0040             LSLS     R0,R0,#+1
   \   00000048   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    954            
    955            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_IndirectAccessSPIRead_0: (+1)
   \   0000004C   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x00C0             LSLS     R0,R0,#+3
   \   00000052   0xD5FB             BPL.N    ??MC1324xDrv_IndirectAccessSPIRead_0
    956           
    957            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   00000054   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x....             LDR.N    R1,??DataTable19_13  ;; 0x90020000
   \   0000005A   0x4308             ORRS     R0,R1,R0
   \   0000005C   0x....             LDR.N    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    958            
    959            StopSPITransfer();
   \   00000060   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000068   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    960            
    961            SPIPopRegister = MC1324x_SPI_RXFR2;
   \   0000006C   0x....             LDR.N    R0,??DataTable19_21  ;; 0x4002d084
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x0005             MOVS     R5,R0
    962          
    963            FlushSPIFifo();
   \   00000072   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   0000007A   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    964            
    965            //asm(" MSR PRIMASK, %0" : : "r" (irqMaskRegister) );
    966            IntRestoreAll(irqMaskRegister);
   \   0000007E   0x0038             MOVS     R0,R7
   \   00000080   0x.... 0x....      BL       IntRestoreAll
    967          
    968            return (uint8_t)SPIPopRegister;
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    969          }
    970          
    971          /*---------------------------------------------------------------------------
    972           * Name: MC1324xDrv_IndirectAccessSPIMultiByteRead
    973           * Description: -
    974           * Parameters: -
    975           * Return: -
    976           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    977          void MC1324xDrv_IndirectAccessSPIMultiByteRead
    978          (
    979           uint8_t startAddress,
    980           uint8_t * byteArray,
    981           uint8_t numOfBytes
    982          )
    983          {
   \                     MC1324xDrv_IndirectAccessSPIMultiByteRead: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    984            uint32_t SPIPushRegister = (uint8_t) (TransceiverSPI_IARIndexReg | TransceiverSPI_ReadSelect);
   \   0000000A   0x27BE             MOVS     R7,#+190
    985            uint32_t irqMaskRegister;
    986            
    987            if( (numOfBytes == 0) || (byteArray == NULL) )
   \   0000000C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000E   0x2E00             CMP      R6,#+0
   \   00000010   0xD001             BEQ.N    ??MC1324xDrv_IndirectAccessSPIMultiByteRead_0
   \   00000012   0x2D00             CMP      R5,#+0
   \   00000014   0xD100             BNE.N    ??MC1324xDrv_IndirectAccessSPIMultiByteRead_1
    988            {
    989              return;
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteRead_0: (+1)
   \   00000016   0xE074             B.N      ??MC1324xDrv_IndirectAccessSPIMultiByteRead_2
    990            }
    991            
    992            //asm(" MRS %0,PRIMASK" : "=r" (irqMaskRegister) );
    993            //asm(" CPSID i");
    994            irqMaskRegister = IntDisableAll();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteRead_1: (+1)
   \   00000018   0x.... 0x....      BL       IntDisableAll
   \   0000001C   0x4680             MOV      R8,R0
    995              
    996            FlushSPIFifo();
   \   0000001E   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   00000026   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   00000028   0x6008             STR      R0,[R1, #+0]
    997            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   0000002A   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x....             LDR.N    R1,??DataTable19_13  ;; 0x90020000
   \   00000030   0x4308             ORRS     R0,R1,R0
   \   00000032   0x....             LDR.N    R1,??DataTable19_12  ;; 0x4002d02c
   \   00000034   0x6008             STR      R0,[R1, #+0]
    998            
    999            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
   1000                                           cSPI_PUSHR_PCS_select_c |
   1001                                           cSPI_PUSHR_CTAS1_select_c);
   \   00000036   0x....             LDR.N    R0,??DataTable19_17  ;; 0x90010000
   \   00000038   0x4307             ORRS     R7,R0,R7
   1002            
   1003            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   0000003A   0x....             LDR.N    R0,??DataTable19_15  ;; 0x4002d034
   \   0000003C   0x6007             STR      R7,[R0, #+0]
   1004            
   1005            SPIPushRegister = (uint32_t) (startAddress);
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x0027             MOVS     R7,R4
   1006            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
   1007                                           cSPI_PUSHR_PCS_select_c |
   1008                                           cSPI_PUSHR_CTAS1_select_c);
   \   00000042   0x....             LDR.N    R0,??DataTable19_17  ;; 0x90010000
   \   00000044   0x4307             ORRS     R7,R0,R7
   1009            
   1010            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000046   0x....             LDR.N    R0,??DataTable19_15  ;; 0x4002d034
   \   00000048   0x6007             STR      R7,[R0, #+0]
   1011            
   1012          
   1013            StartSPITransfer();
   \   0000004A   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x0840             LSRS     R0,R0,#+1
   \   00000050   0x0040             LSLS     R0,R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   00000054   0x6008             STR      R0,[R1, #+0]
   1014            
   1015            WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteRead_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD5FB             BPL.N    ??MC1324xDrv_IndirectAccessSPIMultiByteRead_3
   1016            ClearSPI_TransferCompleteFlag();
   \   0000005E   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000066   0x....             LDR.N    R1,??DataTable19_12  ;; 0x4002d02c
   \   00000068   0x6008             STR      R0,[R1, #+0]
   1017            
   1018            WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteRead_4: (+1)
   \   0000006A   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD5FB             BPL.N    ??MC1324xDrv_IndirectAccessSPIMultiByteRead_4
   1019            ClearSPI_TransferCompleteFlag();
   \   00000072   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   0000007A   0x....             LDR.N    R1,??DataTable19_12  ;; 0x4002d02c
   \   0000007C   0x6008             STR      R0,[R1, #+0]
   1020            
   1021            //Flush RX FIFO
   1022            MC1324x_SPI_MCR |= (uint32_t)((SPI_MCR_CLR_RXF_MASK));
   \   0000007E   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000086   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   00000088   0x6008             STR      R0,[R1, #+0]
   1023            
   1024            while( (numOfBytes > 1) )
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteRead_5: (+1)
   \   0000008A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008C   0x2E02             CMP      R6,#+2
   \   0000008E   0xDB15             BLT.N    ??MC1324xDrv_IndirectAccessSPIMultiByteRead_6
   1025            {
   1026              SPIPushRegister = (uint32_t) 0;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x0007             MOVS     R7,R0
   1027              SPIPushRegister |= (uint32_t) (cSPI_PUSHR_CONT_enable_c |
   1028                                             cSPI_PUSHR_PCS_select_c |
   1029                                             cSPI_PUSHR_CTAS1_select_c);
   \   00000094   0x....             LDR.N    R0,??DataTable19_17  ;; 0x90010000
   \   00000096   0x4307             ORRS     R7,R0,R7
   1030              
   1031              MC1324x_SPI_PUSHR = SPIPushRegister;
   \   00000098   0x....             LDR.N    R0,??DataTable19_15  ;; 0x4002d034
   \   0000009A   0x6007             STR      R7,[R0, #+0]
   1032              
   1033              WaitSPI_TransferCompleteFlag();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteRead_7: (+1)
   \   0000009C   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD5FB             BPL.N    ??MC1324xDrv_IndirectAccessSPIMultiByteRead_7
   1034              ClearSPI_TransferCompleteFlag();
   \   000000A4   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000AC   0x....             LDR.N    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000AE   0x6008             STR      R0,[R1, #+0]
   1035              
   1036              *byteArray++ = MC1324x_SPI_POPR;
   \   000000B0   0x....             LDR.N    R0,??DataTable19_20  ;; 0x4002d038
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0x7028             STRB     R0,[R5, #+0]
   \   000000B6   0x1C6D             ADDS     R5,R5,#+1
   1037              
   1038              numOfBytes--;
   \   000000B8   0x1E76             SUBS     R6,R6,#+1
   \   000000BA   0xE7E6             B.N      ??MC1324xDrv_IndirectAccessSPIMultiByteRead_5
   1039            }
   1040            
   1041            SPIPushRegister = (uint32_t) 0;
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteRead_6: (+1)
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x0007             MOVS     R7,R0
   1042            SPIPushRegister |= (uint32_t) (cSPI_PUSHR_EOQ_assert_c |
   1043                                           cSPI_PUSHR_PCS_select_c |
   1044                                           cSPI_PUSHR_CTAS1_select_c);
   \   000000C0   0x....             LDR.N    R0,??DataTable19_18  ;; 0x18010000
   \   000000C2   0x4307             ORRS     R7,R0,R7
   1045            
   1046            MC1324x_SPI_PUSHR = SPIPushRegister;
   \   000000C4   0x....             LDR.N    R0,??DataTable19_15  ;; 0x4002d034
   \   000000C6   0x6007             STR      R7,[R0, #+0]
   1047            
   1048            WaitSPI_EndOfQueueFlag();
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteRead_8: (+1)
   \   000000C8   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x00C0             LSLS     R0,R0,#+3
   \   000000CE   0xD5FB             BPL.N    ??MC1324xDrv_IndirectAccessSPIMultiByteRead_8
   1049            
   1050            *byteArray++ = MC1324x_SPI_POPR;
   \   000000D0   0x....             LDR.N    R0,??DataTable19_20  ;; 0x4002d038
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0x7028             STRB     R0,[R5, #+0]
   \   000000D6   0x1C6D             ADDS     R5,R5,#+1
   1051            
   1052            MC1324x_SPI_SR |= (uint32_t)(cSPI_SR_EOQF_MASK_c | cSPI_SR_TCF_MASK_c | cSPI_SR_RFDF_MASK_c);
   \   000000D8   0x....             LDR.N    R0,??DataTable19_12  ;; 0x4002d02c
   \   000000DA   0x6800             LDR      R0,[R0, #+0]
   \   000000DC   0x....             LDR.N    R1,??DataTable19_13  ;; 0x90020000
   \   000000DE   0x4308             ORRS     R0,R1,R0
   \   000000E0   0x....             LDR.N    R1,??DataTable19_12  ;; 0x4002d02c
   \   000000E2   0x6008             STR      R0,[R1, #+0]
   1053            
   1054            StopSPITransfer();
   \   000000E4   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000EC   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   000000EE   0x6008             STR      R0,[R1, #+0]
   1055            
   1056            FlushSPIFifo();
   \   000000F0   0x....             LDR.N    R0,??DataTable19_6  ;; 0x4002d000
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0xF450 0x6040      ORRS     R0,R0,#0xC00
   \   000000F8   0x....             LDR.N    R1,??DataTable19_6  ;; 0x4002d000
   \   000000FA   0x6008             STR      R0,[R1, #+0]
   1057          
   1058            //asm(" MSR PRIMASK, %0" : : "r" (irqMaskRegister) );
   1059            IntRestoreAll(irqMaskRegister);
   \   000000FC   0x4640             MOV      R0,R8
   \   000000FE   0x.... 0x....      BL       IntRestoreAll
   1060          }
   \                     ??MC1324xDrv_IndirectAccessSPIMultiByteRead_2: (+1)
   \   00000102   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1061          
   1062          /*---------------------------------------------------------------------------
   1063           * Name: MC1324xDrv_IRQ_PortConfig
   1064           * Description: -
   1065           * Parameters: -
   1066           * Return: -
   1067           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1068          void MC1324xDrv_IRQ_PortConfig
   1069          (
   1070            void
   1071          )
   1072          {
   1073            MC1324x_IRQ_PORT_SIM_SCG |= cIRQ_PORT_SIM_SCG_Config_c;
   \                     MC1324xDrv_IRQ_PortConfig: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable18  ;; 0x40048038
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000008   0x....             LDR.N    R1,??DataTable18  ;; 0x40048038
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1074            MC1324x_IRQ_PCR |= cIRQ_PCR_Config_c;
   \   0000000C   0x....             LDR.N    R0,??DataTable19_22  ;; 0x4004a00c
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000014   0x....             LDR.N    R1,??DataTable19_22  ;; 0x4004a00c
   \   00000016   0x6008             STR      R0,[R1, #+0]
   1075          }
   \   00000018   0x4770             BX       LR               ;; return
   1076          
   1077          /*---------------------------------------------------------------------------
   1078           * Name: MC1324xDrv_IsIrqPending
   1079           * Description: -
   1080           * Parameters: -
   1081           * Return: -
   1082           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1083          bool_t  MC1324xDrv_IsIrqPending
   1084          (
   1085            void
   1086          )
   1087          {
   1088            bool_t retVal = TRUE;
   \                     MC1324xDrv_IsIrqPending: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   1089            if((MC1324x_IRQ_PDIR & (uint32_t )Radio_IRQ_PinNumberMask_c) == (uint32_t)Radio_IRQ_PinNumberMask_c)
   \   00000002   0x....             LDR.N    R1,??DataTable19_23  ;; 0x400ff050
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x0709             LSLS     R1,R1,#+28
   \   00000008   0xD501             BPL.N    ??MC1324xDrv_IsIrqPending_0
   1090            {
   1091              retVal = FALSE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x0008             MOVS     R0,R1
   1092            }
   1093            return retVal;
   \                     ??MC1324xDrv_IsIrqPending_0: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
   1094          }
   1095          
   1096          /*---------------------------------------------------------------------------
   1097           * Name: MC1324xDrv_IRQ_Disable
   1098           * Description: -
   1099           * Parameters: -
   1100           * Return: -
   1101           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1102          void MC1324xDrv_IRQ_Disable
   1103          (
   1104            void
   1105          )
   1106          {
   1107            MC1324x_IRQ_PCR &= ~PORT_PCR_IRQC_MASK;
   \                     MC1324xDrv_IRQ_Disable: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_22  ;; 0x4004a00c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF430 0x2070      BICS     R0,R0,#0xF0000
   \   00000008   0x....             LDR.N    R1,??DataTable19_22  ;; 0x4004a00c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1108          }
   \   0000000C   0x4770             BX       LR               ;; return
   1109          
   1110          /*---------------------------------------------------------------------------
   1111           * Name: MC1324xDrv_IRQ_Enable
   1112           * Description: -
   1113           * Parameters: -
   1114           * Return: -
   1115           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1116          void MC1324xDrv_IRQ_Enable
   1117          (
   1118            void
   1119          )
   1120          {
   1121            MC1324x_IRQ_PCR |= PORT_PCR_ISF_MASK;
   \                     MC1324xDrv_IRQ_Enable: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_22  ;; 0x4004a00c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000008   0x....             LDR.N    R1,??DataTable19_22  ;; 0x4004a00c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1122            MC1324x_IRQ_PCR |= PORT_PCR_IRQC(8);
   \   0000000C   0x....             LDR.N    R0,??DataTable19_22  ;; 0x4004a00c
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000014   0x....             LDR.N    R1,??DataTable19_22  ;; 0x4004a00c
   \   00000016   0x6008             STR      R0,[R1, #+0]
   1123          }
   \   00000018   0x4770             BX       LR               ;; return
   1124          
   1125          /*---------------------------------------------------------------------------
   1126           * Name: MC1324xDrv_IRQ_Clear
   1127           * Description: -
   1128           * Parameters: -
   1129           * Return: -
   1130           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1131          void MC1324xDrv_IRQ_Clear
   1132          (
   1133            void
   1134          )
   1135          {
   1136            MC1324x_IRQ_PCR |= PORT_PCR_ISF_MASK;
   \                     MC1324xDrv_IRQ_Clear: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_22  ;; 0x4004a00c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000008   0x....             LDR.N    R1,??DataTable19_22  ;; 0x4004a00c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1137          }
   \   0000000C   0x4770             BX       LR               ;; return
   1138          
   1139          /*---------------------------------------------------------------------------
   1140           * Name: MC1324xDrv_RST_PortConfig
   1141           * Description: -
   1142           * Parameters: -
   1143           * Return: -
   1144           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1145          void MC1324xDrv_RST_B_PortConfig
   1146          (
   1147            void
   1148          )
   1149          {
   1150            MC1324x_RST_PORT_SIM_SCG |= cRST_PORT_SIM_SCG_Config_c;
   \                     MC1324xDrv_RST_B_PortConfig: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable18  ;; 0x40048038
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000008   0x....             LDR.N    R1,??DataTable18  ;; 0x40048038
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1151            MC1324x_RST_PCR |= cRST_PCR_Config_c;
   \   0000000C   0x....             LDR.N    R0,??DataTable19_24  ;; 0x4004a04c
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x70A0      ORRS     R0,R0,#0x140
   \   00000014   0x....             LDR.N    R1,??DataTable19_24  ;; 0x4004a04c
   \   00000016   0x6008             STR      R0,[R1, #+0]
   1152            MC1324x_RST_PSOR |= (uint32_t)Radio_RST_PinNumberMask_c;
   \   00000018   0x....             LDR.N    R0,??DataTable19_25  ;; 0x400ff044
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000020   0x....             LDR.N    R1,??DataTable19_25  ;; 0x400ff044
   \   00000022   0x6008             STR      R0,[R1, #+0]
   1153            MC1324x_RST_PDDR |= (uint32_t)Radio_RST_PinNumberMask_c;
   \   00000024   0x....             LDR.N    R0,??DataTable19_26  ;; 0x400ff054
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000002C   0x....             LDR.N    R1,??DataTable19_26  ;; 0x400ff054
   \   0000002E   0x6008             STR      R0,[R1, #+0]
   1154          }
   \   00000030   0x4770             BX       LR               ;; return
   1155          
   1156          /*---------------------------------------------------------------------------
   1157           * Name: MC1324xDrv_RST_Assert
   1158           * Description: -
   1159           * Parameters: -
   1160           * Return: -
   1161           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1162          void MC1324xDrv_RST_B_Assert
   1163          (
   1164            void
   1165          )
   1166          {
   1167            MC1324x_RST_PCOR |= (uint32_t)Radio_RST_PinNumberMask_c;
   \                     MC1324xDrv_RST_B_Assert: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_27  ;; 0x400ff048
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000008   0x....             LDR.N    R1,??DataTable19_27  ;; 0x400ff048
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1168          }
   \   0000000C   0x4770             BX       LR               ;; return
   1169          
   1170          /*---------------------------------------------------------------------------
   1171           * Name: MC1324xDrv_RST_Deassert
   1172           * Description: -
   1173           * Parameters: -
   1174           * Return: -
   1175           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1176          void MC1324xDrv_RST_B_Deassert
   1177          (
   1178            void
   1179          )
   1180          {
   1181            MC1324x_RST_PSOR |= (uint32_t)Radio_RST_PinNumberMask_c;
   \                     MC1324xDrv_RST_B_Deassert: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_25  ;; 0x400ff044
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000008   0x....             LDR.N    R1,??DataTable19_25  ;; 0x400ff044
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1182          }
   \   0000000C   0x4770             BX       LR               ;; return
   1183          
   1184          /*---------------------------------------------------------------------------
   1185           * Name: MC1324xDrv_SoftRST_Assert
   1186           * Description: -
   1187           * Parameters: -
   1188           * Return: -
   1189           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1190          void MC1324xDrv_SoftRST_Assert
   1191          (
   1192            void
   1193          )
   1194          {
   \                     MC1324xDrv_SoftRST_Assert: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1195            MC1324xDrv_IndirectAccessSPIWrite(SOFT_RESET, (0x80));
   \   00000002   0x2180             MOVS     R1,#+128
   \   00000004   0x2037             MOVS     R0,#+55
   \   00000006   0x.... 0x....      BL       MC1324xDrv_IndirectAccessSPIWrite
   1196          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1197          
   1198          /*---------------------------------------------------------------------------
   1199           * Name: MC1324xDrv_SoftRST_Deassert
   1200           * Description: -
   1201           * Parameters: -
   1202           * Return: -
   1203           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1204          void MC1324xDrv_SoftRST_Deassert
   1205          (
   1206            void
   1207          )
   1208          {
   \                     MC1324xDrv_SoftRST_Deassert: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1209            MC1324xDrv_IndirectAccessSPIWrite(SOFT_RESET, (0x00));
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2037             MOVS     R0,#+55
   \   00000006   0x.... 0x....      BL       MC1324xDrv_IndirectAccessSPIWrite
   1210          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1211          
   1212          /*---------------------------------------------------------------------------
   1213           * Name: MC1324xDrv_RESET
   1214           * Description: -
   1215           * Parameters: -
   1216           * Return: -
   1217           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1218          void MC1324xDrv_RESET
   1219          (
   1220            void
   1221          )
   1222          {
   \                     MC1324xDrv_RESET: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
   1223            volatile uint32_t delay = 1000;
   \   00000002   0xF44F 0x707A      MOV      R0,#+1000
   \   00000006   0x9000             STR      R0,[SP, #+0]
   1224            MC1324x_RST_PCOR |= Radio_RST_PinNumberMask_c;
   \   00000008   0x....             LDR.N    R0,??DataTable19_27  ;; 0x400ff048
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000010   0x....             LDR.N    R1,??DataTable19_27  ;; 0x400ff048
   \   00000012   0x6008             STR      R0,[R1, #+0]
   1225          // TO DO
   1226            while(delay--);
   \                     ??MC1324xDrv_RESET_0: (+1)
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0x1E41             SUBS     R1,R0,#+1
   \   00000018   0x9100             STR      R1,[SP, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD1FA             BNE.N    ??MC1324xDrv_RESET_0
   1227            MC1324x_RST_PSOR |= Radio_RST_PinNumberMask_c;
   \   0000001E   0x....             LDR.N    R0,??DataTable19_25  ;; 0x400ff044
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000026   0x....             LDR.N    R1,??DataTable19_25  ;; 0x400ff044
   \   00000028   0x6008             STR      R0,[R1, #+0]
   1228          }
   \   0000002A   0xB001             ADD      SP,SP,#+4
   \   0000002C   0x4770             BX       LR               ;; return
   1229          
   1230          /*---------------------------------------------------------------------------
   1231           * Name: MC1324xDrv_Soft_RESET
   1232           * Description: -
   1233           * Parameters: -
   1234           * Return: -
   1235           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1236          void MC1324xDrv_Soft_RESET
   1237          (
   1238            void
   1239          )
   1240          {
   \                     MC1324xDrv_Soft_RESET: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1241            //assert SOG_RST
   1242            MC1324xDrv_IndirectAccessSPIWrite(SOFT_RESET, (0x80)); 
   \   00000002   0x2180             MOVS     R1,#+128
   \   00000004   0x2037             MOVS     R0,#+55
   \   00000006   0x.... 0x....      BL       MC1324xDrv_IndirectAccessSPIWrite
   1243            //deassert SOG_RST
   1244            MC1324xDrv_IndirectAccessSPIWrite(SOFT_RESET, (0x00));
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2037             MOVS     R0,#+55
   \   0000000E   0x.... 0x....      BL       MC1324xDrv_IndirectAccessSPIWrite
   1245          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
   1246          
   1247          /*---------------------------------------------------------------------------
   1248           * Name: MC1324xDrv_Set_CLK_OUT_Freq
   1249           * Description: -
   1250           * Parameters: -
   1251           * Return: -
   1252           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1253          void MC1324xDrv_Set_CLK_OUT_Freq
   1254          (
   1255            uint8_t freqDiv
   1256          )
   1257          {
   \                     MC1324xDrv_Set_CLK_OUT_Freq: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1258            uint8_t clkOutCtrlReg;
   1259            clkOutCtrlReg = (uint8_t) ( (freqDiv & cCLK_OUT_DIV_Mask) | \
   1260                                         cCLK_OUT_EN | \
   1261                                         cCLK_OUT_EXTEND );
   \   00000004   0xF014 0x0007      ANDS     R0,R4,#0x7
   \   00000008   0xF050 0x0088      ORRS     R0,R0,#0x88
   \   0000000C   0x0005             MOVS     R5,R0
   1262            if(freqDiv == gCLK_OUT_FREQ_DISABLE)
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C08             CMP      R4,#+8
   \   00000012   0xD101             BNE.N    ??MC1324xDrv_Set_CLK_OUT_Freq_0
   1263            {
   1264              clkOutCtrlReg = (uint8_t) (cCLK_OUT_EXTEND | gCLK_OUT_FREQ_4_MHz); //reset value with clock out disabled
   \   00000014   0x2083             MOVS     R0,#+131
   \   00000016   0x0005             MOVS     R5,R0
   1265            }
   1266          
   1267            MC1324xDrv_DirectAccessSPIWrite((uint8_t) CLK_OUT_CTRL, clkOutCtrlReg);
   \                     ??MC1324xDrv_Set_CLK_OUT_Freq_0: (+1)
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x203C             MOVS     R0,#+60
   \   0000001E   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
   1268          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x4004A02C         DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x4004A040         DC32     0x4004a040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x4004A044         DC32     0x4004a044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x81013C01         DC32     0x81013c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   0x4002D000         DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \   00000000   0x38000012         DC32     0x38000012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_8:
   \   00000000   0x4002D00C         DC32     0x4002d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_9:
   \   00000000   0x38010012         DC32     0x38010012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_10:
   \   00000000   0x4002D010         DC32     0x4002d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_11:
   \   00000000   0x4002D030         DC32     0x4002d030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_12:
   \   00000000   0x4002D02C         DC32     0x4002d02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_13:
   \   00000000   0x90020000         DC32     0x90020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_14:
   \   00000000   0x80010000         DC32     0x80010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_15:
   \   00000000   0x4002D034         DC32     0x4002d034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_16:
   \   00000000   0x08010000         DC32     0x8010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_17:
   \   00000000   0x90010000         DC32     0x90010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_18:
   \   00000000   0x18010000         DC32     0x18010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_19:
   \   00000000   0x4002D080         DC32     0x4002d080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_20:
   \   00000000   0x4002D038         DC32     0x4002d038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_21:
   \   00000000   0x4002D084         DC32     0x4002d084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_22:
   \   00000000   0x4004A00C         DC32     0x4004a00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_23:
   \   00000000   0x400FF050         DC32     0x400ff050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_24:
   \   00000000   0x4004A04C         DC32     0x4004a04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_25:
   \   00000000   0x400FF044         DC32     0x400ff044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_26:
   \   00000000   0x400FF054         DC32     0x400ff054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_27:
   \   00000000   0x400FF048         DC32     0x400ff048

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   MC1324xDrv_DirectAccessSPIMultiByteRead
        24   -> IntDisableAll
        24   -> IntRestoreAll
      32   MC1324xDrv_DirectAccessSPIMultiByteWrite
        32   -> IntDisableAll
        32   -> IntRestoreAll
      24   MC1324xDrv_DirectAccessSPIRead
        24   -> IntDisableAll
        24   -> IntRestoreAll
      24   MC1324xDrv_DirectAccessSPIWrite
        24   -> IntDisableAll
        24   -> IntRestoreAll
       0   MC1324xDrv_IRQ_Clear
       0   MC1324xDrv_IRQ_Disable
       0   MC1324xDrv_IRQ_Enable
       0   MC1324xDrv_IRQ_PortConfig
      24   MC1324xDrv_IndirectAccessSPIMultiByteRead
        24   -> IntDisableAll
        24   -> IntRestoreAll
      32   MC1324xDrv_IndirectAccessSPIMultiByteWrite
        32   -> IntDisableAll
        32   -> IntRestoreAll
      24   MC1324xDrv_IndirectAccessSPIRead
        24   -> IntDisableAll
        24   -> IntRestoreAll
      24   MC1324xDrv_IndirectAccessSPIWrite
        24   -> IntDisableAll
        24   -> IntRestoreAll
       0   MC1324xDrv_IsIrqPending
      24   MC1324xDrv_PB_SPIBurstRead
        24   -> IntDisableAll
        24   -> IntRestoreAll
      24   MC1324xDrv_PB_SPIBurstWrite
        24   -> IntDisableAll
        24   -> IntRestoreAll
       4   MC1324xDrv_RESET
       0   MC1324xDrv_RST_B_Assert
       0   MC1324xDrv_RST_B_Deassert
       0   MC1324xDrv_RST_B_PortConfig
       0   MC1324xDrv_SPIInit
      16   MC1324xDrv_Set_CLK_OUT_Freq
        16   -> MC1324xDrv_DirectAccessSPIWrite
       8   MC1324xDrv_SoftRST_Assert
         8   -> MC1324xDrv_IndirectAccessSPIWrite
       8   MC1324xDrv_SoftRST_Deassert
         8   -> MC1324xDrv_IndirectAccessSPIWrite
       8   MC1324xDrv_Soft_RESET
         8   -> MC1324xDrv_IndirectAccessSPIWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_22
       4  ??DataTable19_23
       4  ??DataTable19_24
       4  ??DataTable19_25
       4  ??DataTable19_26
       4  ??DataTable19_27
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
     302  MC1324xDrv_DirectAccessSPIMultiByteRead
     300  MC1324xDrv_DirectAccessSPIMultiByteWrite
     176  MC1324xDrv_DirectAccessSPIRead
     152  MC1324xDrv_DirectAccessSPIWrite
      14  MC1324xDrv_IRQ_Clear
      14  MC1324xDrv_IRQ_Disable
      26  MC1324xDrv_IRQ_Enable
      26  MC1324xDrv_IRQ_PortConfig
     262  MC1324xDrv_IndirectAccessSPIMultiByteRead
     294  MC1324xDrv_IndirectAccessSPIMultiByteWrite
     138  MC1324xDrv_IndirectAccessSPIRead
     162  MC1324xDrv_IndirectAccessSPIWrite
      18  MC1324xDrv_IsIrqPending
     288  MC1324xDrv_PB_SPIBurstRead
     282  MC1324xDrv_PB_SPIBurstWrite
      46  MC1324xDrv_RESET
      14  MC1324xDrv_RST_B_Assert
      14  MC1324xDrv_RST_B_Deassert
      50  MC1324xDrv_RST_B_PortConfig
     200  MC1324xDrv_SPIInit
      36  MC1324xDrv_Set_CLK_OUT_Freq
      12  MC1324xDrv_SoftRST_Assert
      12  MC1324xDrv_SoftRST_Deassert
      20  MC1324xDrv_Soft_RESET
       4  mLastSpiDMA_PUSH_Reg
       4  mSpiDMA_PUSH_Reg

 
     8 bytes in section .bss
 2 974 bytes in section .text
 
 2 974 bytes of CODE memory
     8 bytes of DATA memory

Errors: none
Warnings: none
