###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        20/Mar/2018  09:41:48
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\MCG\mcg.c
#    Command line =  
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\MCG\mcg.c" -D
#        IAR --preprocess "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior
#        Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\Debug\List\" -lC "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\Debug\List\" -lB "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\Debug\List\" --diag_suppress
#        Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Environment\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Generic
#        Services\Interface\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Uart\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\CDC\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\Sys Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -On
#    List file    =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\mcg.lst
#    Object file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\mcg.o
#
###############################################################################

C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity Test\PLM\Source\MCG\mcg.c
      1          /******************************************************************************
      2           * Filename: mcg.c
      3           *
      4           * Description: MCG driver for ARM CORTEX-M4 processor
      5           * Notes: - Assumes the MCG mode is in the default FEI mode out of reset
      6           *        - One of 4 clocking options can be selected.
      7           *        - One of 16 crystal values can be used
      8           *
      9           * Copyright (c) 2012, Freescale Semiconductor, Inc. All rights reserved.
     10           *
     11           ******************************************************************************
     12           *
     13           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
     14           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     15           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     16           * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     17           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     18           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     19           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     20           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     21           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
     22           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
     23           * THE POSSIBILITY OF SUCH DAMAGE.
     24           *
     25           *****************************************************************************/
     26          
     27          #include "EmbeddedTypes.h"
     28          #include "PortConfig.h"
     29          #include "Utilities_Interface.h"
     30          #include "mcg.h"
     31          
     32          
     33          /******************************************************************************
     34           ******************************************************************************
     35           * Private macros
     36           ******************************************************************************
     37           ******************************************************************************/
     38          /*
     39           * Name: MCG_SystemClkMhz_c
     40           * Description: System clock frequency (MHz)
     41           */
     42          #define MCG_SystemClkMhz_c        48
     43          
     44          /******************************************************************************
     45           ******************************************************************************
     46           * Private type definitions
     47           ******************************************************************************
     48           ******************************************************************************/
     49          
     50          /******************************************************************************
     51           ******************************************************************************
     52           * Private memory definitions
     53           ******************************************************************************
     54           ******************************************************************************/
     55          
     56          /******************************************************************************
     57           *******************************************************************************
     58           * Private function prototypes
     59           *******************************************************************************
     60           ******************************************************************************/
     61          
     62          
     63          static void MCG_SetSysDividers
     64          (
     65                  uint32_t,
     66                  uint32_t,
     67                  uint32_t,
     68                  uint32_t
     69          );
     70          
     71          /******************************************************************************
     72           ******************************************************************************
     73           * Public memory definitions
     74           ******************************************************************************
     75           ******************************************************************************/
     76          
     77          /*
     78           * Name: gMCG_coreClkKHz (KHz units)
     79           * Description: Actual core clock frequency 
     80           */

   \                                 In section .bss, align 4
     81          int gMCG_coreClkKHz;
   \                     gMCG_coreClkKHz:
   \   00000000                      DS8 4
     82          
     83          /*
     84           * Name: gMCG_coreClkMHz
     85           * Description: Actual core clock frequency (MHz units)
     86           */

   \                                 In section .bss, align 4
     87          int gMCG_coreClkMHz;
   \                     gMCG_coreClkMHz:
   \   00000000                      DS8 4
     88          
     89          /*
     90           * Name: gMCG_periphClkKHz
     91           * Description: Actual peripheral (bus) clock frequency (KHz units) 
     92           */

   \                                 In section .bss, align 4
     93          int gMCG_periphClkKHz;
   \                     gMCG_periphClkKHz:
   \   00000000                      DS8 4
     94          
     95          /******************************************************************************
     96           ******************************************************************************
     97           * Public functions
     98           ******************************************************************************
     99           *****************************************************************************/
    100          
    101          /******************************************************************************
    102           * Name: MCG_PLLInit
    103           * Description: Initialize the PLL module to operate with a 4 MHz external 
    104           *              reference clock (if MCU is clocked by the radio) or with a
    105           *              50MHz external reference clock (if MCU is clocked by the TWR 
    106           *              on-board clock oscillator). The PLL output frequency will be 
    107           *              48 MHz in both situations.
    108           *              MCGCLKOUT = PLL output frequency
    109           * Parameters: -
    110           *
    111           * Notes: It is assumed that the MCG is in default FEI mode out of reset.
    112           * Return: PLL frequency (MHz)
    113           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    114          uint8_t MCG_PLLInit
    115          (
    116                  void
    117          )
    118          {
   \                     MCG_PLLInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    119          
    120          #if (defined(__GNUC__))
    121              /*
    122               * Define a pointer to function that will points to the RAM copy
    123               * of MCG_SetSysDividers() function
    124               */
    125              void (*pfSetSysDividers)(uint32_t, uint32_t, uint32_t, uint32_t);
    126          
    127              uint32_t fcn_thumb_flag;
    128              uint32_t fcn_rom_addr;
    129              uint32_t fcn_ram_addr;
    130          
    131              /*
    132               * Allocate stack space for MCG_SetSysDividers() function copy
    133               * The sizeof(fcn_ram_copy) must be enough to
    134               * fit whole MCG_SetSysDividers() function.
    135               */
    136              uint32_t fcn_ram_copy[128];
    137          
    138              /*
    139               * Copy MCG_SetSysDividers() function to stack @ fcn_ram_addr address
    140               * Because Thumb-2 instruction mode is used its necessary to set
    141               * bit[0] correctly to represent the opcode type of the branch target.
    142               * For details see:
    143               * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka12545.html
    144               */
    145          
    146              fcn_thumb_flag = (uint32_t)MCG_SetSysDividers & 0x01;
    147              fcn_rom_addr = (uint32_t)MCG_SetSysDividers & ~(uint32_t)0x01;
    148              fcn_ram_addr = (uint32_t)fcn_ram_copy | (fcn_rom_addr & 0x02);
    149          
    150              FLib_MemCpyAligned32bit((void*)fcn_rom_addr, (void*)fcn_ram_addr, sizeof(fcn_ram_copy)-3);
    151          
    152              /* Get pointer of MCG_SetSysDividers function to run_in_ram_fcn  */
    153              pfSetSysDividers = (void (*)(uint32_t, uint32_t, uint32_t, uint32_t)) (fcn_ram_addr | fcn_thumb_flag);    
    154          #endif
    155          
    156              /* Load slow internal reference clock (IRC) trim values, if any */
    157              if ( *((uint8_t*) 0x03FFU) != 0xFFU) 
   \   00000002   0xF240 0x30FF      MOVW     R0,#+1023
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x28FF             CMP      R0,#+255
   \   0000000C   0xD013             BEQ.N    ??MCG_PLLInit_0
    158              {
    159                  MCG_C3 = *((uint8_t*) 0x03FFU);
   \   0000000E   0xF240 0x30FF      MOVW     R0,#+1023
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable7  ;; 0x40064002
   \   00000018   0x7008             STRB     R0,[R1, #+0]
    160                  MCG_C4 = (MCG_C4 & 0xE0U) | ((*((uint8_t*) 0x03FEU)) & 0x1FU);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40064003
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0xF010 0x00E0      ANDS     R0,R0,#0xE0
   \   00000024   0xF240 0x31FE      MOVW     R1,#+1022
   \   00000028   0x7809             LDRB     R1,[R1, #+0]
   \   0000002A   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   0000002E   0x4308             ORRS     R0,R1,R0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable7_1  ;; 0x40064003
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    161              }
    162          
    163              /************************ 
    164               * Transition: FEI->FBE 
    165               ************************/
    166          #if defined(MCU_MK60N512VMD100) || defined(MCU_MK60D10)
    167              MCG_C2 = 0;
    168          #elif (defined(MCU_MK20D5) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    169              //MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK | MCG_C2_IRCS_MASK;
    170              MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_HGO0_MASK | MCG_C2_IRCS_MASK;
   \                     ??MCG_PLLInit_0: (+1)
   \   00000036   0x2029             MOVS     R0,#+41
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable7_2  ;; 0x40064001
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    171          #else
    172              //MCG_C2 = MCG_C2_RANGE(2) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK | MCG_C2_IRCS_MASK;
    173              MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_HGO0_MASK | MCG_C2_IRCS_MASK;
    174          #endif
    175          
    176              /* Select external oscillator and Reference Divider and clear IREFS 
    177               * to start external oscillator
    178               * CLKS = 2, FRDIV = 3, IREFS = 0, IRCLKEN = 0, IREFSTEN = 0
    179               */
    180          #if (defined(MCU_MK20D5) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    181              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
   \   0000003E   0x2098             MOVS     R0,#+152
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable7_3  ;; 0x40064000
   \   00000044   0x7008             STRB     R0,[R1, #+0]
    182          #elif (defined(MCU_MK60N512VMD100) || defined(MCU_MK60D10))
    183              MCG_C1 = MCG_C1_CLKS(2);
    184          #endif
    185          
    186          #if (defined(MCU_MK20D5))
    187              /* Wait for oscillator to initialize */
    188              while (!(MCG_S & MCG_S_OSCINIT0_MASK)){};
    189          #endif
    190          
    191          #if (!defined(MCU_MK20D5))
    192              /* wait for Reference clock Status bit to clear */
    193              while (MCG_S & MCG_S_IREFST_MASK) {};
   \                     ??MCG_PLLInit_1: (+1)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable7_4  ;; 0x40064006
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x06C0             LSLS     R0,R0,#+27
   \   0000004E   0xD4FA             BMI.N    ??MCG_PLLInit_1
    194              /* The source of FLL reference clock is the external reference clock */
    195          #endif
    196          
    197              /* Wait for clock status bits to show that clock source is External Reference Clock */
    198              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) {};
   \                     ??MCG_PLLInit_2: (+1)
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable7_4  ;; 0x40064006
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x2802             CMP      R0,#+2
   \   0000005E   0xD1F7             BNE.N    ??MCG_PLLInit_2
    199          
    200              /************************ 
    201               * Transition: FBE->PBE 
    202               ************************/    
    203          #if (defined(MCU_MK60N512VMD100))    
    204              MCG_C5 = MCG_C5_PRDIV(24); /* divide by 25 the external reference clock (50MHz / 25 = 2 MHz) used by PLL */
    205          #elif (defined(MCU_MK60D10))
    206              MCG_C5 = MCG_C5_PRDIV0(24); /* divide by 25 the external reference clock (50MHz / 25 = 2 MHz) used by PLL */
    207          #elif (defined(MCU_MK20D5))
    208              MCG_C5 = MCG_C5_PRDIV0(3) | MCG_C5_PLLCLKEN0_MASK;  /* divide by 4 the external reference clock (8MHz /4 = 2MHz) used by PLL */
    209          #elif (defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    210              MCG_C5 = MCG_C5_PRDIV0(1) | MCG_C5_PLLCLKEN0_MASK;  /* divide by 2 the external reference clock (4MHz /2 = 2MHz) used by PLL */
   \   00000060   0x2041             MOVS     R0,#+65
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable7_5  ;; 0x40064004
   \   00000066   0x7008             STRB     R0,[R1, #+0]
    211          #else
    212              MCG_C5 = MCG_C5_PRDIV(1);  /* divide by 2 the external reference clock */
    213          #endif
    214          
    215              /* Ensure MCG_C6 is at the reset default of 0 */
    216              MCG_C6 = 0x0;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable7_6  ;; 0x40064005
   \   0000006E   0x7008             STRB     R0,[R1, #+0]
    217          
    218              /* Set system options dividers
    219               * MCG = PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    220               */
    221          #if (defined(__GNUC__))
    222              pfSetSysDividers(0,0,0,1);
    223          #elif (defined(__IAR_SYSTEMS_ICC__))
    224              MCG_SetSysDividers(0,0,0,1);
   \   00000070   0x2301             MOVS     R3,#+1
   \   00000072   0x2200             MOVS     R2,#+0
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x.... 0x....      BL       MCG_SetSysDividers
    225          #endif
    226          
    227          #if !(defined(MCU_MK60N512VMD100))
    228              if(MCG_SC & MCG_SC_LOCS0_MASK)
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable7_7  ;; 0x40064008
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x07C0             LSLS     R0,R0,#+31
   \   00000084   0xD506             BPL.N    ??MCG_PLLInit_3
    229              {
    230                MCG_SC |= MCG_SC_LOCS0_MASK;
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable7_7  ;; 0x40064008
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000090   0x....             LDR.N    R1,??DataTable7_7  ;; 0x40064008
   \   00000092   0x7008             STRB     R0,[R1, #+0]
    231              }
    232          #endif
    233          
    234              /* Set the VCO divider and enable the PLL for 48MHz operation */
    235          #if (defined(MCU_MK60N512VMD100))   
    236              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(0); /* VDIV = 0 (x24), Clock Monitor enabled */
    237          #elif(defined(MCU_MK20D5) || defined(MCU_MK60D10) || defined(MCU_MK21DN512) || defined (MCU_MK21DX256))
    238              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0); /* VDIV = 0 (x24), Clock Monitor enabled */
   \                     ??MCG_PLLInit_3: (+1)
   \   00000094   0x2040             MOVS     R0,#+64
   \   00000096   0x....             LDR.N    R1,??DataTable7_6  ;; 0x40064005
   \   00000098   0x7008             STRB     R0,[R1, #+0]
    239          #endif
    240          
    241              /* wait for PLL status bit to set */
    242              while (!(MCG_S & MCG_S_PLLST_MASK)) {};
   \                     ??MCG_PLLInit_4: (+1)
   \   0000009A   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0x0680             LSLS     R0,R0,#+26
   \   000000A0   0xD5FB             BPL.N    ??MCG_PLLInit_4
    243          
    244              /* Wait for LOCK bit to set */
    245          #if (defined (MCU_MK20D5) || defined(MCU_MK60D10) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    246              while (!(MCG_S & MCG_S_LOCK0_MASK)){};  
   \                     ??MCG_PLLInit_5: (+1)
   \   000000A2   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   000000A4   0x7800             LDRB     R0,[R0, #+0]
   \   000000A6   0x0640             LSLS     R0,R0,#+25
   \   000000A8   0xD5FB             BPL.N    ??MCG_PLLInit_5
    247          #else    
    248              while (!(MCG_S & MCG_S_LOCK_MASK)) {};
    249          #endif
    250          
    251              /************************ 
    252               * Transition: PBE->PEE 
    253               ************************/       
    254          
    255              /* Transition into PEE by setting CLKS to 0
    256               * CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    257               */
    258              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   000000AA   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40064000
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
   \   000000AE   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   000000B2   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   000000B4   0x7008             STRB     R0,[R1, #+0]
    259          
    260              /* Wait for clock status bits to update */
    261              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) {};
   \                     ??MCG_PLLInit_6: (+1)
   \   000000B6   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   000000B8   0x7800             LDRB     R0,[R0, #+0]
   \   000000BA   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   000000BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C0   0x2803             CMP      R0,#+3
   \   000000C2   0xD1F8             BNE.N    ??MCG_PLLInit_6
    262          
    263          #if(defined(MCU_MK20D5))
    264              /* Enable the ER clock of oscillators */
    265              OSC0_CR = OSC_CR_ERCLKEN_MASK | OSC_CR_EREFSTEN_MASK;
    266          #elif(defined(MCU_MK60N512VMD100) || defined(MCU_MK60D10) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    267              /* Enable the ER clock of oscillators */
    268              OSC_CR = OSC_CR_ERCLKEN_MASK | OSC_CR_EREFSTEN_MASK;    
   \   000000C4   0x20A0             MOVS     R0,#+160
   \   000000C6   0x....             LDR.N    R1,??DataTable7_8  ;; 0x40065000
   \   000000C8   0x7008             STRB     R0,[R1, #+0]
    269          #endif
    270          
    271              /* Enable the clock monitor */    
    272          #if (defined(MCU_MK60N512VMD100))   
    273              MCG_C6 |= MCG_C6_CME_MASK;
    274          #elif(defined(MCU_MK20D5) || defined(MCU_MK60D10) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    275              MCG_C6 |= MCG_C6_CME0_MASK;
   \   000000CA   0x....             LDR.N    R0,??DataTable7_6  ;; 0x40064005
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000000D2   0x....             LDR.N    R1,??DataTable7_6  ;; 0x40064005
   \   000000D4   0x7008             STRB     R0,[R1, #+0]
    276          #endif    
    277          
    278              /* Now running PEE Mode */
    279              return (uint8_t)(MCG_SystemClkMhz_c);
   \   000000D6   0x2030             MOVS     R0,#+48
   \   000000D8   0xBD02             POP      {R1,PC}          ;; return
    280          }
    281          
    282          /******************************************************************************
    283           * Name: MCG_SetSysDividers
    284           * Description: Initialize the PLL module according to clock option and crystal
    285           *              value
    286           * Parameters: [IN] outdivX - system dividers values
    287           *
    288           * Notes: This routine must be placed in RAM. It is a workaround for Errata e2448.
    289           *        Flash prefetch must be disabled when the flash clock divider is changed.
    290           *        This cannot be performed while executing out of flash.
    291           *        There must be a short delay after the clock dividers are changed before
    292           *        prefetch can be re-enabled.
    293           * Return: -
    294           ******************************************************************************/
    295          #if (defined(__IAR_SYSTEMS_ICC__))

   \                                 In section .textrw, align 4, keep-with-next
    296          __ramfunc void MCG_SetSysDividers
    297          (
    298                  uint32_t outdiv1,
    299                  uint32_t outdiv2,
    300                  uint32_t outdiv3,
    301                  uint32_t outdiv4
    302          )
    303          #elif (defined(__GNUC__))
    304          static void MCG_SetSysDividers
    305          (
    306                  uint32_t outdiv1,
    307                  uint32_t outdiv2,
    308                  uint32_t outdiv3,
    309                  uint32_t outdiv4
    310          )
    311          #endif
    312          {
   \                     MCG_SetSysDividers: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    313              uint32_t temp_reg;
    314              uint8_t i;
    315          
    316              /* store present value of FMC_PFAPR */
    317              temp_reg = FMC_PFAPR;
   \   00000002   0x4E0F             LDR.N    R6,??MCG_SetSysDividers_0  ;; 0x4001f000
   \   00000004   0x6836             LDR      R6,[R6, #+0]
   \   00000006   0x0034             MOVS     R4,R6
    318          
    319          #if (defined(MCU_MK60N512VMD100) || defined(MCU_MK60D10))    
    320              /* set M0PFD through M7PFD to 1 to disable prefetch */
    321              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    322                      | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    323                      | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
    324          #elif (defined(MCU_MK20D5) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    325              /* set M0PFD through M3PFD to 1 to disable prefetch */
    326              FMC_PFAPR |= FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    327                      | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
   \   00000008   0x4E0D             LDR.N    R6,??MCG_SetSysDividers_0  ;; 0x4001f000
   \   0000000A   0x6836             LDR      R6,[R6, #+0]
   \   0000000C   0xF456 0x2670      ORRS     R6,R6,#0xF0000
   \   00000010   0x4F0B             LDR.N    R7,??MCG_SetSysDividers_0  ;; 0x4001f000
   \   00000012   0x603E             STR      R6,[R7, #+0]
    328          #endif
    329          
    330              /* set clock dividers to desired value */
    331          #if (defined(MCU_MK60N512VMD100) || defined(MCU_MK60D10))  
    332              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(outdiv1) | SIM_CLKDIV1_OUTDIV2(outdiv2)
    333                                    | SIM_CLKDIV1_OUTDIV3(outdiv3) | SIM_CLKDIV1_OUTDIV4(outdiv4);
    334          #elif (defined (MCU_MK20D5) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    335              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(outdiv1) | SIM_CLKDIV1_OUTDIV2(outdiv2)
    336                                    | SIM_CLKDIV1_OUTDIV4(outdiv4);
   \   00000014   0x060E             LSLS     R6,R1,#+24
   \   00000016   0xF016 0x6670      ANDS     R6,R6,#0xF000000
   \   0000001A   0xEA56 0x7600      ORRS     R6,R6,R0, LSL #+28
   \   0000001E   0x041F             LSLS     R7,R3,#+16
   \   00000020   0xF417 0x2770      ANDS     R7,R7,#0xF0000
   \   00000024   0x433E             ORRS     R6,R7,R6
   \   00000026   0x4F07             LDR.N    R7,??MCG_SetSysDividers_0+0x4  ;; 0x40048044
   \   00000028   0x603E             STR      R6,[R7, #+0]
    337          #endif
    338          
    339              /* wait for dividers to change */
    340              for (i = 0 ; i < outdiv4 ; i++)
   \   0000002A   0x2600             MOVS     R6,#+0
   \   0000002C   0x0035             MOVS     R5,R6
   \                     ??MCG_SetSysDividers_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x429D             CMP      R5,R3
   \   00000032   0xD201             BCS.N    ??MCG_SetSysDividers_2
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \   00000036   0xE7FA             B.N      ??MCG_SetSysDividers_1
    341              {}    
    342          
    343              /* re-store original value of FMC_PFAPR */
    344              FMC_PFAPR = temp_reg;
   \                     ??MCG_SetSysDividers_2: (+1)
   \   00000038   0x4E01             LDR.N    R6,??MCG_SetSysDividers_0  ;; 0x4001f000
   \   0000003A   0x6034             STR      R4,[R6, #+0]
    345          
    346              return;
   \   0000003C   0xBCF0             POP      {R4-R7}
   \   0000003E   0x4770             BX       LR               ;; return
   \                     ??MCG_SetSysDividers_0:
   \   00000040   0x4001F000         DC32     0x4001f000
   \   00000044   0x40048044         DC32     0x40048044
    347          }
    348          
    349          
    350          /******************************************************************************
    351           * Name: MCG_Pee2Blpi
    352           * Description: Changes the MCG operation mode from PEE to BLPI
    353           *              Transition chain from PEE to BLPI: PEE -> PBE -> FBE ->
    354           *              FBI -> BLPI
    355           * Parameters: -
    356           * Return: -
    357           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    358          void MCG_Pee2Blpi
    359          (
    360                  void
    361          )
    362          {
    363              uint8_t temp_reg;
    364          
    365          #if (defined(MCU_MK60N512VMD100) || defined (MCU_MK20D5) || defined(MCU_MK60D10)  || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    366          
    367              /* Step 1: PEE -> PBE */
    368              MCG_C1 |= MCG_C1_CLKS(2);  /* System clock from external reference OSC, not PLL. */
   \                     MCG_Pee2Blpi: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000008   0x....             LDR.N    R2,??DataTable7_3  ;; 0x40064000
   \   0000000A   0x7011             STRB     R1,[R2, #+0]
    369          
    370              /* Wait for clock status to update */
    371              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) {};
   \                     ??MCG_Pee2Blpi_0: (+1)
   \   0000000C   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   0000000E   0x7809             LDRB     R1,[R1, #+0]
   \   00000010   0xF3C1 0x0181      UBFX     R1,R1,#+2,#+2
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x2902             CMP      R1,#+2
   \   00000018   0xD1F8             BNE.N    ??MCG_Pee2Blpi_0
    372          
    373              /* Step 2: PBE -> FBE */
    374              MCG_C6 &= ~MCG_C6_PLLS_MASK;  /* Clear PLLS to select FLL, still running system from EXT OSC */
   \   0000001A   0x....             LDR.N    R1,??DataTable7_6  ;; 0x40064005
   \   0000001C   0x7809             LDRB     R1,[R1, #+0]
   \   0000001E   0xF011 0x01BF      ANDS     R1,R1,#0xBF
   \   00000022   0x....             LDR.N    R2,??DataTable7_6  ;; 0x40064005
   \   00000024   0x7011             STRB     R1,[R2, #+0]
    375              while (MCG_S & MCG_S_PLLST_MASK) {}; /* Wait for PLL status flag to reflect FLL selected */
   \                     ??MCG_Pee2Blpi_1: (+1)
   \   00000026   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   00000028   0x7809             LDRB     R1,[R1, #+0]
   \   0000002A   0x0689             LSLS     R1,R1,#+26
   \   0000002C   0xD4FB             BMI.N    ??MCG_Pee2Blpi_1
    376          
    377              /* Step 3: FBE -> FBI */
    378              MCG_C2 &= ~MCG_C2_LP_MASK;  /* FLL remains active in bypassed modes. */
   \   0000002E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40064001
   \   00000030   0x7809             LDRB     R1,[R1, #+0]
   \   00000032   0xF011 0x01FD      ANDS     R1,R1,#0xFD
   \   00000036   0x....             LDR.N    R2,??DataTable7_2  ;; 0x40064001
   \   00000038   0x7011             STRB     R1,[R2, #+0]
    379              MCG_C2 |= MCG_C2_IRCS_MASK;  /* Select fast (1MHz) internal reference */
   \   0000003A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40064001
   \   0000003C   0x7809             LDRB     R1,[R1, #+0]
   \   0000003E   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000042   0x....             LDR.N    R2,??DataTable7_2  ;; 0x40064001
   \   00000044   0x7011             STRB     R1,[R2, #+0]
    380              temp_reg = MCG_C1;
   \   00000046   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   00000048   0x7809             LDRB     R1,[R1, #+0]
   \   0000004A   0x0008             MOVS     R0,R1
    381              temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_IREFS_MASK);
   \   0000004C   0xF010 0x003B      ANDS     R0,R0,#0x3B
    382              temp_reg |= (MCG_C1_CLKS(1) | MCG_C1_IREFS_MASK);  /* Select internal reference (fast IREF clock @ 1MHz) as MCG clock source. */
   \   00000050   0xF050 0x0044      ORRS     R0,R0,#0x44
    383              MCG_C1 = temp_reg;
   \   00000054   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   00000056   0x7008             STRB     R0,[R1, #+0]
    384          
    385              while (MCG_S & MCG_S_IREFST_MASK) {}; /* Wait for Reference Status bit to update. */
   \                     ??MCG_Pee2Blpi_2: (+1)
   \   00000058   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   0000005A   0x7809             LDRB     R1,[R1, #+0]
   \   0000005C   0x06C9             LSLS     R1,R1,#+27
   \   0000005E   0xD4FB             BMI.N    ??MCG_Pee2Blpi_2
    386              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) {}; /* Wait for clock status bits to update */
   \                     ??MCG_Pee2Blpi_3: (+1)
   \   00000060   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   00000062   0x7809             LDRB     R1,[R1, #+0]
   \   00000064   0xF3C1 0x0181      UBFX     R1,R1,#+2,#+2
   \   00000068   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006A   0x2901             CMP      R1,#+1
   \   0000006C   0xD1F8             BNE.N    ??MCG_Pee2Blpi_3
    387          
    388              /* Step 4: FBI -> BLPI */
    389              MCG_C1 |= MCG_C1_IREFSTEN_MASK;  /* Keep internal reference clock running in STOP modes */
   \   0000006E   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   00000070   0x7809             LDRB     R1,[R1, #+0]
   \   00000072   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000076   0x....             LDR.N    R2,??DataTable7_3  ;; 0x40064000
   \   00000078   0x7011             STRB     R1,[R2, #+0]
    390              MCG_C2 |= MCG_C2_LP_MASK;  /* FLL remains disabled in bypassed modes */
   \   0000007A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40064001
   \   0000007C   0x7809             LDRB     R1,[R1, #+0]
   \   0000007E   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   00000082   0x....             LDR.N    R2,??DataTable7_2  ;; 0x40064001
   \   00000084   0x7011             STRB     R1,[R2, #+0]
    391              while (!(MCG_S & MCG_S_IREFST_MASK)) {}; /* Wait for Reference Status bit to update */
   \                     ??MCG_Pee2Blpi_4: (+1)
   \   00000086   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   00000088   0x7809             LDRB     R1,[R1, #+0]
   \   0000008A   0x06C9             LSLS     R1,R1,#+27
   \   0000008C   0xD5FB             BPL.N    ??MCG_Pee2Blpi_4
    392              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) {}; /* Wait for clock status bits to update */
   \                     ??MCG_Pee2Blpi_5: (+1)
   \   0000008E   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   00000090   0x7809             LDRB     R1,[R1, #+0]
   \   00000092   0xF3C1 0x0181      UBFX     R1,R1,#+2,#+2
   \   00000096   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000098   0x2901             CMP      R1,#+1
   \   0000009A   0xD1F8             BNE.N    ??MCG_Pee2Blpi_5
    393          
    394          #endif
    395          
    396          }
   \   0000009C   0x4770             BX       LR               ;; return
    397          
    398          /******************************************************************************
    399           * Name: MCG_Blpi2Pee
    400           * Description: Changes the MCG operation mode from BLPI to PEE
    401           *              Transition from BLPI to PEE: BLPI -> FBI -> FEI -> FBE ->
    402           *              PBE -> PEE
    403           * Parameters: -
    404           * Return: -
    405           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    406          void MCG_Blpi2Pee
    407          (
    408                  void
    409          )
    410          {
   \                     MCG_Blpi2Pee: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    411              uint8_t temp_reg;
    412          
    413          #if (defined(MCU_MK60N512VMD100) || defined (MCU_MK20D5) || defined(MCU_MK60D10) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    414          
    415              /* Step 1: BLPI -> FBI */
    416              MCG_C2 &= ~MCG_C2_LP_MASK;  /* FLL remains active in bypassed modes */
   \   00000002   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40064001
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000000A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40064001
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    417              while (!(MCG_S & MCG_S_IREFST_MASK)) {}; /* Wait for Reference Status bit to update */
   \                     ??MCG_Blpi2Pee_0: (+1)
   \   0000000E   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x06C0             LSLS     R0,R0,#+27
   \   00000014   0xD5FB             BPL.N    ??MCG_Blpi2Pee_0
    418              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) {}; /* Wait for clock status bits to update */
   \                     ??MCG_Blpi2Pee_1: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD1F8             BNE.N    ??MCG_Blpi2Pee_1
    419          
    420              /* Step 2: FBI -> FEI */
    421              MCG_C2 &= ~MCG_C2_LP_MASK;  /* FLL remains active in bypassed modes */
   \   00000024   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40064001
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000002C   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40064001
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    422              temp_reg = MCG_C2;  /* assign temporary variable of MCG_C2 contents */
   \   00000030   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40064001
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x0004             MOVS     R4,R0
    423          #if (defined(MCU_MK60N512VMD100))
    424              temp_reg &= ~MCG_C2_RANGE_MASK;  /* set RANGE field location to zero */
    425          #elif (defined (MCU_MK20D5) || defined(MCU_MK60D10) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    426              temp_reg &= ~MCG_C2_RANGE0_MASK;  /* set RANGE field location to zero */
   \   00000036   0xF014 0x04CF      ANDS     R4,R4,#0xCF
    427          #endif
    428              temp_reg |= (0x2 << 0x4);  /* OR in new values */
   \   0000003A   0xF054 0x0420      ORRS     R4,R4,#0x20
    429              MCG_C2 = temp_reg;  /* store new value in MCG_C2 */
   \   0000003E   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40064001
   \   00000040   0x7004             STRB     R4,[R0, #+0]
    430              MCG_C4 = 0x0E;  /* Low-range DCO output (~10MHz bus).  FCTRIM=%0111 */
   \   00000042   0x200E             MOVS     R0,#+14
   \   00000044   0x....             LDR.N    R1,??DataTable7_1  ;; 0x40064003
   \   00000046   0x7008             STRB     R0,[R1, #+0]
    431              MCG_C1 = 0x04;  /* Select internal clock as MCG source, FRDIV=%000, internal reference selected */
   \   00000048   0x2004             MOVS     R0,#+4
   \   0000004A   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    432          
    433              /* Wait for Reference Status bit to update */
    434              while (!(MCG_S & MCG_S_IREFST_MASK)) {};
   \                     ??MCG_Blpi2Pee_2: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0x06C0             LSLS     R0,R0,#+27
   \   00000054   0xD5FB             BPL.N    ??MCG_Blpi2Pee_2
    435          
    436              /* Wait for clock status bits to update */
    437              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) {};
   \                     ??MCG_Blpi2Pee_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD1F8             BNE.N    ??MCG_Blpi2Pee_3
    438          
    439              /* Handle FEI to PEE transitions using standard clock initialization routine */
    440              gMCG_coreClkMHz = MCG_PLLInit();
   \   00000064   0x.... 0x....      BL       MCG_PLLInit
   \   00000068   0x....             LDR.N    R1,??DataTable7_9
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    441          
    442              /* Use the value obtained from the MCG_PLLInit function to define variables
    443               * for the core clock in kHz and also the peripheral clock. These
    444               * variables can be used by other functions that need awareness of the
    445               * system frequency.
    446               */
    447          
    448              gMCG_coreClkKHz = gMCG_coreClkMHz * 1000;
   \   0000006C   0x....             LDR.N    R0,??DataTable7_9
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF44F 0x717A      MOV      R1,#+1000
   \   00000074   0x4348             MULS     R0,R1,R0
   \   00000076   0x....             LDR.N    R1,??DataTable7_10
   \   00000078   0x6008             STR      R0,[R1, #+0]
    449              gMCG_periphClkKHz = gMCG_coreClkKHz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV2_MASK) >> 24)+ 1);
   \   0000007A   0x....             LDR.N    R0,??DataTable7_10
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x....             LDR.N    R1,??DataTable7_11  ;; 0x40048044
   \   00000080   0x6809             LDR      R1,[R1, #+0]
   \   00000082   0xF3C1 0x6103      UBFX     R1,R1,#+24,#+4
   \   00000086   0x1C49             ADDS     R1,R1,#+1
   \   00000088   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000008C   0x....             LDR.N    R1,??DataTable7_12
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    450          
    451          #endif
    452          }
   \   00000090   0xBD10             POP      {R4,PC}          ;; return
    453          
    454          /******************************************************************************
    455           * Name: MCG_Pbe2Pee
    456           * Description: Changes the MCG operation mode from PBE to PEE
    457           * Parameters: -
    458           * Return: -
    459           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    460          void MCG_Pbe2Pee
    461          (
    462                  void
    463          )
    464          {
    465          
    466              /* select PLL as MCG_OUT */
    467              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \                     MCG_Pbe2Pee: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40064000
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000008   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    468          
    469              /* Wait for clock status bits to update */
    470              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) {};
   \                     ??MCG_Pbe2Pee_0: (+1)
   \   0000000C   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD1F8             BNE.N    ??MCG_Pbe2Pee_0
    471          }
   \   0000001A   0x4770             BX       LR               ;; return
    472          
    473          
    474          /******************************************************************************
    475           * Name: MCG_Fei2Fee
    476           * Description: Changes the MCG operation mode from FEI to FEE
    477           * Parameters: -
    478           * Return: FEE running frequency (MHz)
    479           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    480          uint8_t MCG_Fei2Fee
    481          (
    482                  void
    483          )
    484          {
   \                     MCG_Fei2Fee: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    485              const uint8_t fll_freq = 48;
   \   00000002   0x2430             MOVS     R4,#+48
    486          
    487          #if (defined(__GNUC__))
    488              /*
    489               * Define a pointer to function that will points to the RAM copy
    490               * of MCG_SetSysDividers() function
    491               */
    492              void (*pfSetSysDividers)(uint32_t, uint32_t, uint32_t, uint32_t);
    493          
    494              uint32_t fcn_thumb_flag;
    495              uint32_t fcn_rom_addr;
    496              uint32_t fcn_ram_addr;
    497          
    498              /*
    499               * Allocate stack space for MCG_SetSysDividers() function copy
    500               * The sizeof(fcn_ram_copy) must be enough to
    501               * fit whole MCG_SetSysDividers() function.
    502               */
    503              uint32_t fcn_ram_copy[128];
    504          
    505              /*
    506               * Copy MCG_SetSysDividers() function to stack @ fcn_ram_addr address
    507               * Because Thumb-2 instruction mode is used its necessary to set
    508               * bit[0] correctly to represent the opcode type of the branch target.
    509               * For details see:
    510               * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka12545.html
    511               */
    512          
    513              fcn_thumb_flag = (uint32_t)MCG_SetSysDividers & 0x01;
    514              fcn_rom_addr = (uint32_t)MCG_SetSysDividers & ~(uint32_t)0x01;
    515              fcn_ram_addr = (uint32_t)fcn_ram_copy | (fcn_rom_addr & 0x02);
    516          
    517              FLib_MemCpyAligned32bit((void*)fcn_rom_addr, (void*)fcn_ram_addr, sizeof(fcn_ram_copy)-3);
    518          
    519              /* Get pointer of MCG_SetSysDividers function to run_in_ram_fcn  */
    520              pfSetSysDividers = (void (*)(uint32_t, uint32_t, uint32_t, uint32_t))(fcn_ram_addr | fcn_thumb_flag);    
    521          
    522          #endif
    523          
    524              /* FEI - > FEE transition */             
    525          #if (defined(MCU_MK60N512VMD100))   
    526              MCG_C2 = MCG_C2_RANGE(0); /* low frequency range select */
    527          #elif(defined(MCU_MK20D5) || defined(MCU_MK60D10) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    528              MCG_C2 = MCG_C2_RANGE0(0); /* low frequency range select */
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40064001
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    529          #endif
    530          
    531              MCG_C1 = MCG_C1_CLKS(2);  /* select external reference clock (ERC) as MCGOUTCLK */
   \   0000000A   0x2080             MOVS     R0,#+128
   \   0000000C   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    532          
    533              /* Wait until the output of the ERC is selected */
    534              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT != 0x2 )) {};
   \                     ??MCG_Fei2Fee_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x2802             CMP      R0,#+2
   \   0000001C   0xD1F8             BNE.N    ??MCG_Fei2Fee_0
    535          
    536              /* wait for the FLL Reference clock status bit to clear */
    537              while (MCG_S & MCG_S_IREFST_MASK) {};
   \                     ??MCG_Fei2Fee_1: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x06C0             LSLS     R0,R0,#+27
   \   00000024   0xD4FB             BMI.N    ??MCG_Fei2Fee_1
    538          
    539              /* 32.768KHz external reference clock, DCO Mid range, DCO Out = 48 MHz */
    540              MCG_C4 = MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(1);
   \   00000026   0x20A0             MOVS     R0,#+160
   \   00000028   0x....             LDR.N    R1,??DataTable7_1  ;; 0x40064003
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
    541          
    542              /* Ensure MCG_C6 is at the reset default of 0. LOLIE disabled, PLL disabled, clk monitor disabled, PLL VCO divider is clear */
    543              MCG_C6 = 0x0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR.N    R1,??DataTable7_6  ;; 0x40064005
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    544          
    545              /* Set system options dividers
    546               * MCG=FLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    547               */
    548          
    549          #if (defined(__GNUC__))
    550              pfSetSysDividers(0,0,0,1);
    551          #elif (defined(__IAR_SYSTEMS_ICC__))
    552              MCG_SetSysDividers(0,0,0,1);
   \   00000032   0x2301             MOVS     R3,#+1
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       MCG_SetSysDividers
    553          #endif
    554          
    555              /* Enable Clock Monitor */    
    556          #if (defined(MCU_MK60N512VMD100))
    557              MCG_C6 |= MCG_C6_CME_MASK;
    558          #elif(defined(MCU_MK20D5) || defined(MCU_MK60D10) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    559              MCG_C6 |= MCG_C6_CME0_MASK;    
   \   0000003E   0x....             LDR.N    R0,??DataTable7_6  ;; 0x40064005
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000046   0x....             LDR.N    R1,??DataTable7_6  ;; 0x40064005
   \   00000048   0x7008             STRB     R0,[R1, #+0]
    560          #endif
    561          
    562              /* wait for FLL status bit to set */
    563              while ((MCG_S & MCG_S_PLLST_MASK)) {};
   \                     ??MCG_Fei2Fee_2: (+1)
   \   0000004A   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0x0680             LSLS     R0,R0,#+26
   \   00000050   0xD4FB             BMI.N    ??MCG_Fei2Fee_2
    564          
    565              /* Transition into FEE by setting CLKS to 0 */
    566              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   00000052   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40064000
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000005A   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    567          
    568              /* Wait for clock status bits to update */
    569              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT)) {};
   \                     ??MCG_Fei2Fee_3: (+1)
   \   0000005E   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1F8             BNE.N    ??MCG_Fei2Fee_3
    570          
    571              /* Now running FEE Mode */    
    572              return fll_freq;
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0xBD10             POP      {R4,PC}          ;; return
    573          }
    574          
    575          /******************************************************************************
    576           * Name: MCG_TraceSysClk
    577           * Description: Trace the system clock (divided by 1000) using the FTM2 module
    578           * Parameters: -
    579           * Return: -
    580           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    581          void MCG_TraceSysClk
    582          (
    583                  void
    584          )
    585          {
    586          
    587          #if (defined(MCU_MK60N512VMD100) || defined(MCU_MK60D10))
    588              /* Enable clock gating on PORTB */
    589              SIM_SCGC5 |= (uint32_t) SIM_SCGC5_PORTB_MASK;
    590              /* Enable clock gating on FTM2 module*/
    591              SIM_SCGC3 |= (uint32_t) SIM_SCGC3_FTM2_MASK;
    592              /* Setup pin PTB18 */
    593              PORTB_PCR18 &= ~(uint32_t) PORT_PCR_MUX_MASK;
    594              PORTB_PCR18 |= PORT_PCR_MUX(3);  
    595              /* FTM2 clock source = System Clock */
    596              FTM2_SC = (uint32_t) 0x08;
    597              /* PWM is edge-aligned. PWM toggles from high to low */
    598              FTM2_C0SC = (uint32_t)0x28; 
    599              /* PWM period = bus clock / 1000 */
    600              FTM2_MOD = 1000;
    601              /* PWM duty cycle = 50% */
    602              FTM2_C0V = 500;
    603          #elif (defined(MCU_MK20D5) || defined(MCU_MK21DN512) || defined(MCU_MK21DX256))
    604              /* Enable clock gating on PORTB */
    605              SIM_SCGC5 |= (uint32_t) SIM_SCGC5_PORTB_MASK;
   \                     MCG_TraceSysClk: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_13  ;; 0x40048038
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000008   0x....             LDR.N    R1,??DataTable7_13  ;; 0x40048038
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    606              /* Enable clock gating on FTM1 module*/
    607              SIM_SCGC6 |= (uint32_t) SIM_SCGC6_FTM1_MASK;
   \   0000000C   0x....             LDR.N    R0,??DataTable7_14  ;; 0x4004803c
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000014   0x....             LDR.N    R1,??DataTable7_14  ;; 0x4004803c
   \   00000016   0x6008             STR      R0,[R1, #+0]
    608              /* Setup pin PTB18 */
    609              PORTB_PCR18 &= ~(uint32_t) PORT_PCR_MUX_MASK;
   \   00000018   0x....             LDR.N    R0,??DataTable7_15  ;; 0x4004a048
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000020   0x....             LDR.N    R1,??DataTable7_15  ;; 0x4004a048
   \   00000022   0x6008             STR      R0,[R1, #+0]
    610              PORTB_PCR18 |= PORT_PCR_MUX(3);  
   \   00000024   0x....             LDR.N    R0,??DataTable7_15  ;; 0x4004a048
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000002C   0x....             LDR.N    R1,??DataTable7_15  ;; 0x4004a048
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    611              /* FTM1 clock source = System Clock */
    612              FTM1_SC = (uint32_t) 0x08;
   \   00000030   0x2008             MOVS     R0,#+8
   \   00000032   0x....             LDR.N    R1,??DataTable7_16  ;; 0x40039000
   \   00000034   0x6008             STR      R0,[R1, #+0]
    613              /* PWM is edge-aligned. PWM toggles from high to low */
    614              FTM1_C0SC = (uint32_t)0x28; 
   \   00000036   0x2028             MOVS     R0,#+40
   \   00000038   0x....             LDR.N    R1,??DataTable7_17  ;; 0x4003900c
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    615              /* PWM period = bus clock / 1000 */
    616              FTM1_MOD = 1000;
   \   0000003C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000040   0x....             LDR.N    R1,??DataTable7_18  ;; 0x40039008
   \   00000042   0x6008             STR      R0,[R1, #+0]
    617              /* PWM duty cycle = 50% */
    618              FTM1_C0V = 500;
   \   00000044   0xF44F 0x70FA      MOV      R0,#+500
   \   00000048   0x....             LDR.N    R1,??DataTable7_19  ;; 0x40039010
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    619          #endif
    620          }
   \   0000004C   0x4770             BX       LR               ;; return
    621          
    622          /******************************************************************************
    623           * Name: MCG_Fee2Fei
    624           * Description: Changes the MCG operation mode from FEE to FEI
    625           * Parameters: -
    626           * Return: -
    627           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    628          void MCG_Fee2Fei
    629          (
    630                  void
    631          )
    632          {
    633              /* disable clock monitor */
    634          #if (gTargetTWR_K60N512_d == 1)
    635              MCG_C6 &= ~MCG_C6_CME_MASK;
    636          #elif (gTargetTWR_K60D100M_d == 1)
    637              MCG_C6 &= ~MCG_C6_CME0_MASK;
    638          #endif
    639          
    640              /* DCO has a default range of 25%. DCO Range Select: Low range */
    641              MCG_C4 = ( MCG_C4 & ( MCG_C4_FCTRIM_MASK | MCG_C4_SCFTRIM_MASK ) );
   \                     MCG_Fee2Fei: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40064003
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000008   0x....             LDR.N    R1,??DataTable7_1  ;; 0x40064003
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    642          
    643              /* change the FFL clock source. selects the slow internal reference clock */
    644              MCG_C1 |= MCG_C1_IREFS_MASK;
   \   0000000C   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40064000
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000014   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    645          
    646              /* wait for refernce clock to switch to internal */
    647              while( (MCG_S & MCG_S_IREFST_MASK) !=  MCG_S_IREFST_MASK ){};
   \                     ??MCG_Fee2Fei_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40064006
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x06C0             LSLS     R0,R0,#+27
   \   00000020   0xD5FA             BPL.N    ??MCG_Fee2Fei_0
    648          }
   \   00000022   0x4770             BX       LR               ;; return
    649          
    650          /******************************************************************************
    651           * Name: MCG_Pee2Fei
    652           * Description: Changes the MCG operation mode from PEE to FEI
    653           * Parameters: -
    654           * Return: -
    655           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    656          void MCG_Pee2Fei
    657          (
    658                  void
    659          )
    660          {
    661              uint8_t mcgC1Reg;
    662          
    663              /* disable clock monitor */
    664          #if (gTargetTWR_K60N512_d == 1)
    665              MCG_C6 &= ~MCG_C6_CME_MASK;
    666          #elif (gTargetTWR_K60D100M_d == 1)
    667              MCG_C6 &= ~MCG_C6_CME0_MASK;
    668          #endif
    669          
    670              // PEE to PBE
    671          
    672              /* switch CLKS mux to select external reference clock as MCG_OUT */
    673              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \                     MCG_Pee2Fei: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0xF011 0x013F      ANDS     R1,R1,#0x3F
   \   00000008   0x....             LDR.N    R2,??DataTable7_3  ;; 0x40064000
   \   0000000A   0x7011             STRB     R1,[R2, #+0]
    674              MCG_C1 |= MCG_C1_CLKS(2);
   \   0000000C   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   0000000E   0x7809             LDRB     R1,[R1, #+0]
   \   00000010   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000014   0x....             LDR.N    R2,??DataTable7_3  ;; 0x40064000
   \   00000016   0x7011             STRB     R1,[R2, #+0]
    675          
    676              /* wait for clock status bits to update */
    677              while( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) != 0x2 ){};
   \                     ??MCG_Pee2Fei_0: (+1)
   \   00000018   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   0000001A   0x7809             LDRB     R1,[R1, #+0]
   \   0000001C   0xF3C1 0x0181      UBFX     R1,R1,#+2,#+2
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x2902             CMP      R1,#+2
   \   00000024   0xD1F8             BNE.N    ??MCG_Pee2Fei_0
    678          
    679              // PBE to FBE
    680          
    681              /* disable PLL */
    682              MCG_C6 &= ~MCG_C6_PLLS_MASK;
   \   00000026   0x....             LDR.N    R1,??DataTable7_6  ;; 0x40064005
   \   00000028   0x7809             LDRB     R1,[R1, #+0]
   \   0000002A   0xF011 0x01BF      ANDS     R1,R1,#0xBF
   \   0000002E   0x....             LDR.N    R2,??DataTable7_6  ;; 0x40064005
   \   00000030   0x7011             STRB     R1,[R2, #+0]
    683          
    684              /* wait for PLLST bit to be clear */
    685              while( (MCG_S & MCG_S_PLLST_MASK) ==  MCG_S_PLLST_MASK ){};
   \                     ??MCG_Pee2Fei_1: (+1)
   \   00000032   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   00000034   0x7809             LDRB     R1,[R1, #+0]
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x0689             LSLS     R1,R1,#+26
   \   0000003A   0xD4FA             BMI.N    ??MCG_Pee2Fei_1
    686          
    687              // FBE to FEI
    688          
    689              /* selects MCGOUTCLK clock source. output of FLL is selected */
    690              /* change the FFL clock source. selects the slow internal reference clock */
    691              mcgC1Reg  =  MCG_C1;
   \   0000003C   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   0000003E   0x7809             LDRB     R1,[R1, #+0]
   \   00000040   0x0008             MOVS     R0,R1
    692              mcgC1Reg &= ~MCG_C1_CLKS_MASK;
   \   00000042   0xF010 0x003F      ANDS     R0,R0,#0x3F
    693              mcgC1Reg |=  MCG_C1_IREFS_MASK;
   \   00000046   0xF050 0x0004      ORRS     R0,R0,#0x4
    694              MCG_C1    =  mcgC1Reg;
   \   0000004A   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40064000
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    695          
    696              /* wait for refernce clock to switch to internal */
    697              while( (MCG_S & MCG_S_IREFST_MASK) !=  MCG_S_IREFST_MASK ){};
   \                     ??MCG_Pee2Fei_2: (+1)
   \   0000004E   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   00000050   0x7809             LDRB     R1,[R1, #+0]
   \   00000052   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000054   0x06C9             LSLS     R1,R1,#+27
   \   00000056   0xD5FA             BPL.N    ??MCG_Pee2Fei_2
    698          
    699              /* wait for clock status bits to update */
    700              while( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) != 0x0 ){};
   \                     ??MCG_Pee2Fei_3: (+1)
   \   00000058   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40064006
   \   0000005A   0x7809             LDRB     R1,[R1, #+0]
   \   0000005C   0xF3C1 0x0181      UBFX     R1,R1,#+2,#+2
   \   00000060   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000062   0x2900             CMP      R1,#+0
   \   00000064   0xD1F8             BNE.N    ??MCG_Pee2Fei_3
    701          
    702          
    703          }
   \   00000066   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40064002         DC32     0x40064002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40064003         DC32     0x40064003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40064000         DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x40064006         DC32     0x40064006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x40064004         DC32     0x40064004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x40064005         DC32     0x40064005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x40064008         DC32     0x40064008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x40065000         DC32     0x40065000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     gMCG_coreClkMHz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     gMCG_coreClkKHz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     gMCG_periphClkKHz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x4004A048         DC32     0x4004a048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x4003900C         DC32     0x4003900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x40039008         DC32     0x40039008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x40039010         DC32     0x40039010
    704          
    705          /********************************** EOF ***************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   MCG_Blpi2Pee
         8   -> MCG_PLLInit
       0   MCG_Fee2Fei
       8   MCG_Fei2Fee
         8   -> MCG_SetSysDividers
       8   MCG_PLLInit
         8   -> MCG_SetSysDividers
       0   MCG_Pbe2Pee
       0   MCG_Pee2Blpi
       0   MCG_Pee2Fei
      16   MCG_SetSysDividers
       0   MCG_TraceSysClk


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     146  MCG_Blpi2Pee
      36  MCG_Fee2Fei
     114  MCG_Fei2Fee
     218  MCG_PLLInit
      28  MCG_Pbe2Pee
     158  MCG_Pee2Blpi
     104  MCG_Pee2Fei
      72  MCG_SetSysDividers
      78  MCG_TraceSysClk
       4  gMCG_coreClkKHz
       4  gMCG_coreClkMHz
       4  gMCG_periphClkKHz

 
  12 bytes in section .bss
 962 bytes in section .text
  72 bytes in section .textrw
 
 1 034 bytes of CODE memory
    12 bytes of DATA memory

Errors: none
Warnings: none
