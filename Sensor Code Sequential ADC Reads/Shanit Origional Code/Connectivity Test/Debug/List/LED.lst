###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        20/Mar/2018  09:41:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\LED\LED.c
#    Command line =  
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\LED\LED.c" -D
#        IAR --preprocess "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior
#        Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\Debug\List\" -lC "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\Debug\List\" -lB "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\Debug\List\" --diag_suppress
#        Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Environment\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Generic
#        Services\Interface\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Uart\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\CDC\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\Sys Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -On
#    List file    =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\LED.lst
#    Object file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\LED.o
#
###############################################################################

C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity Test\PLM\Source\LED\LED.c
      1          /******************************************************************************
      2           * Source file for LED driver.
      3           * 
      4           * Freescale Semiconductor Inc.
      5           * (c) Copyright 2004-2011 Freescale Semiconductor, Inc.
      6           * ALL RIGHTS RESERVED.
      7           *
      8          *******************************************************************************
      9           *
     10           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
     11           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
     12           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
     13           * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
     14           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
     15           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
     16           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
     17           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     18           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
     19           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
     20           * THE POSSIBILITY OF SUCH DAMAGE.
     21           *
     22          ***************************************************************************//*!
     23          ******************************************************************************/
     24          
     25          #include "LED.h"
     26          
     27          /******************************************************************************
     28           *******************************************************************************
     29           * Private macros
     30           *******************************************************************************
     31           ******************************************************************************/
     32          
     33          /******************************************************************************
     34           *******************************************************************************
     35           * Private type definitions
     36           *******************************************************************************
     37           ******************************************************************************/
     38          
     39          /******************************************************************************
     40           *******************************************************************************
     41           * Public memory definitions
     42           *******************************************************************************
     43           ******************************************************************************/
     44          
     45          #if (gLEDSupported_d == TRUE)
     46          
     47          /******************************************************************************
     48           *******************************************************************************
     49           * Private memory definitions
     50           *******************************************************************************
     51           ******************************************************************************/
     52          
     53          /******************************************************************************
     54           *******************************************************************************
     55           * Private function prototypes
     56           *******************************************************************************
     57           ******************************************************************************/
     58          
     59          /******************************************************************************
     60           * LED_FlashTimeout
     61           * 
     62           * Timer callback function that is called each time the timer expires
     63           ******************************************************************************/
     64          static void LED_FlashTimeout
     65          (
     66            tmrTimerID_t timerId     /* IN: the timer ID*/
     67          );
     68          
     69          /******************************************************************************
     70           * LED_ExitSerialFlash
     71           *  
     72           * Stops serial flashing mode, if serial flash mode is active.Turns all LEDs off.
     73           ******************************************************************************/
     74          static void LED_ExitSerialFlash
     75          (
     76            void
     77          );
     78          
     79          /******************************************************************************
     80           * LED_DecrementBlip
     81           *
     82           * Decrements the blink count
     83           ******************************************************************************/
     84          #if gLEDBlipEnabled_d
     85          static void LED_DecrementBlip
     86          (
     87            void
     88          );
     89          #endif
     90          
     91          /******************************************************************************
     92           *******************************************************************************
     93           * Private type definitions
     94           *******************************************************************************
     95           ******************************************************************************/
     96          
     97          /******************************************************************************
     98           *******************************************************************************
     99           * Private Memory Declarations
    100           *******************************************************************************
    101           ******************************************************************************/
    102          
    103          /*
    104           * Name: mfLedInSerialMode
    105           * Description: indicates if the LED module is in serial mode or not
    106           */

   \                                 In section .bss, align 1
    107          static bool_t mfLedInSerialMode;      /* doing serial lights */
   \                     mfLedInSerialMode:
   \   00000000                      DS8 1
    108          
    109          /*
    110           * Name: mLedFlashingLEDs
    111           * Description: indicates how many LEDs are in flashing mode 
    112           */

   \                                 In section .bss, align 1
    113          static uint8_t mLedFlashingLEDs = 0;  /* flashing LEDs */
   \                     mLedFlashingLEDs:
   \   00000000                      DS8 1
    114          
    115          /*
    116           * Name: mLEDTimerID
    117           * Description: LED timer ID
    118           */

   \                                 In section .data, align 1
    119          static tmrTimerID_t mLEDTimerID = gTmrInvalidTimerID_c;
   \                     mLEDTimerID:
   \   00000000   0xFF               DC8 255
    120          
    121          /*
    122           * Name: mLedBlips
    123           * Description: array that stores the LEDs blip information
    124           */		
    125          #if gLEDBlipEnabled_d

   \                                 In section .bss, align 4
    126          static uint8_t mLedBlips[gLEDsOnTargetBoardCnt_c];
   \                     mLedBlips:
   \   00000000                      DS8 4
    127          #endif
    128          
    129          
    130          /******************************************************************************
    131           ******************************************************************************
    132           * Public functions
    133           ******************************************************************************
    134           *****************************************************************************/
    135          
    136          /******************************************************************************
    137           * LED_Init
    138           * 
    139           * Initialize the LED module
    140           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    141          void LED_Init
    142          (
    143            void
    144          )
    145          {
   \                     LED_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    146          	/* enable clock */
    147          	gLED_ClkGatingReg_c |= gLED_ClkGatingBit_c; 
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40048038
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x40048038
   \   00000010   0x6008             STR      R0,[R1, #+0]
    148          
    149          	/* pin MUX configuration */
    150                  gLED_RedStatPinCtrlReg_c &= ~PORT_PCR_MUX_MASK;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x4004c010
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable12_1  ;; 0x4004c010
   \   00000020   0x6008             STR      R0,[R1, #+0]
    151                  gLED_RedStatPinCtrlReg_c |= PORT_PCR_MUX(gLED_PinCtrlAltFunc_c);
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x4004c010
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable12_1  ;; 0x4004c010
   \   00000030   0x6008             STR      R0,[R1, #+0]
    152                  gLED_GreenStatPinCtrlReg_c &= ~PORT_PCR_MUX_MASK;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x4004c00c
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable12_2  ;; 0x4004c00c
   \   00000040   0x6008             STR      R0,[R1, #+0]
    153                  gLED_GreenStatPinCtrlReg_c |= PORT_PCR_MUX(gLED_PinCtrlAltFunc_c);
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x4004c00c
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable12_2  ;; 0x4004c00c
   \   00000050   0x6008             STR      R0,[R1, #+0]
    154                  
    155          
    156          	/*Pins direction -> output */
    157                  gLED_PortDataDirReg_c |= (gLed_RedStat | gLed_GreenStat);
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable12_3  ;; 0x400ff0d4
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF050 0x0018      ORRS     R0,R0,#0x18
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable12_3  ;; 0x400ff0d4
   \   00000060   0x6008             STR      R0,[R1, #+0]
    158                  /*turn off all LEDs */
    159                  gLED_PortDataOutReg_c |= (gLed_RedStat | gLed_GreenStat);
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x400ff0c0
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x0018      ORRS     R0,R0,#0x18
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable12_4  ;; 0x400ff0c0
   \   00000070   0x6008             STR      R0,[R1, #+0]
    160                  
    161                  /* allocate a timer for use in flashing LEDs */
    162                  mLEDTimerID = TMR_AllocateTimer();
   \   00000072   0x.... 0x....      BL       TMR_AllocateTimer
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   0000007A   0x7008             STRB     R0,[R1, #+0]
    163          }                   /* LED_Init() */
   \   0000007C   0xBD01             POP      {R0,PC}          ;; return
    164          
    165          /******************************************************************************
    166           * LED_UnInit
    167           * 
    168           * Turns off all the LEDs and disables clock gating for LED port
    169           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    170          void LED_UnInit
    171          (
    172            void
    173          )
    174          {
    175          	/* turn off all LEDs */
    176          	gLED_PortDataOutReg_c &= ~(gLED_Led1Pin_c | gLED_Led2Pin_c | 
    177          			gLED_Led3Pin_c | gLED_Led4Pin_c);
   \                     LED_UnInit: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x400ff0c0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF030 0x00F0      BICS     R0,R0,#0xF0
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable12_4  ;; 0x400ff0c0
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    178          
    179          	/* disable clock */
    180          	gLED_ClkGatingReg_c &= ~gLED_ClkGatingBit_c;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40048038
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x40048038
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    181          }                 /* LED_UnInit() */
   \   00000020   0x4770             BX       LR               ;; return
    182          
    183          /******************************************************************************
    184           * LED_TurnOnLed
    185           * 
    186           * Turns ON the specified LED(s) 
    187           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    188          void LED_TurnOnLed
    189          (
    190            LED_t LEDNr     /* IN: LED number(s) to be turned ON */
    191          )
    192          {
    193          	if (LEDNr & LED1)
   \                     LED_TurnOnLed: (+1)
   \   00000000   0x07C1             LSLS     R1,R0,#+31
   \   00000002   0xD507             BPL.N    ??LED_TurnOnLed_0
    194          		Led1On(); /* turn ON LED 1 */
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable12_6  ;; 0x400ff0c8
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable12_6  ;; 0x400ff0c8
   \   00000012   0x6011             STR      R1,[R2, #+0]
    195          	if (LEDNr & LED2)
   \                     ??LED_TurnOnLed_0: (+1)
   \   00000014   0x0781             LSLS     R1,R0,#+30
   \   00000016   0xD507             BPL.N    ??LED_TurnOnLed_1
    196          		Led2On(); /* turn ON LED 2 */
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable12_6  ;; 0x400ff0c8
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xF051 0x0120      ORRS     R1,R1,#0x20
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable12_6  ;; 0x400ff0c8
   \   00000026   0x6011             STR      R1,[R2, #+0]
    197          	if (LEDNr & LED3)
   \                     ??LED_TurnOnLed_1: (+1)
   \   00000028   0x0741             LSLS     R1,R0,#+29
   \   0000002A   0xD505             BPL.N    ??LED_TurnOnLed_2
    198          		Led3On(); /* turn ON LED 3 */
   \   0000002C   0x....             LDR.N    R1,??DataTable12_6  ;; 0x400ff0c8
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   00000034   0x....             LDR.N    R2,??DataTable12_6  ;; 0x400ff0c8
   \   00000036   0x6011             STR      R1,[R2, #+0]
    199          	if (LEDNr & LED4)
   \                     ??LED_TurnOnLed_2: (+1)
   \   00000038   0x0701             LSLS     R1,R0,#+28
   \   0000003A   0xD505             BPL.N    ??LED_TurnOnLed_3
    200          		Led4On(); /* turn ON LED 4 */
   \   0000003C   0x....             LDR.N    R1,??DataTable12_6  ;; 0x400ff0c8
   \   0000003E   0x6809             LDR      R1,[R1, #+0]
   \   00000040   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000044   0x....             LDR.N    R2,??DataTable12_6  ;; 0x400ff0c8
   \   00000046   0x6011             STR      R1,[R2, #+0]
    201          }                 /* LED_TurnOnLed() */
   \                     ??LED_TurnOnLed_3: (+1)
   \   00000048   0x4770             BX       LR               ;; return
    202          
    203          /******************************************************************************
    204           * LED_TurnOffLed
    205           * 
    206           * Turns OFF the specified LED(s)
    207           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    208          void LED_TurnOffLed
    209          (
    210            LED_t LEDNr     /* IN: LED number(s) to be turned OFF */
    211          )
    212          {
    213          	if (LEDNr & LED1)
   \                     LED_TurnOffLed: (+1)
   \   00000000   0x07C1             LSLS     R1,R0,#+31
   \   00000002   0xD505             BPL.N    ??LED_TurnOffLed_0
    214          		Led1Off(); /* turn OFF LED 1 */
   \   00000004   0x....             LDR.N    R1,??DataTable12_7  ;; 0x400ff0c4
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   0000000C   0x....             LDR.N    R2,??DataTable12_7  ;; 0x400ff0c4
   \   0000000E   0x6011             STR      R1,[R2, #+0]
    215          	if (LEDNr & LED2)
   \                     ??LED_TurnOffLed_0: (+1)
   \   00000010   0x0781             LSLS     R1,R0,#+30
   \   00000012   0xD505             BPL.N    ??LED_TurnOffLed_1
    216          		Led2Off(); /* turn OFF LED 2 */
   \   00000014   0x....             LDR.N    R1,??DataTable12_7  ;; 0x400ff0c4
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0xF051 0x0120      ORRS     R1,R1,#0x20
   \   0000001C   0x....             LDR.N    R2,??DataTable12_7  ;; 0x400ff0c4
   \   0000001E   0x6011             STR      R1,[R2, #+0]
    217          	if (LEDNr & LED3)
   \                     ??LED_TurnOffLed_1: (+1)
   \   00000020   0x0741             LSLS     R1,R0,#+29
   \   00000022   0xD505             BPL.N    ??LED_TurnOffLed_2
    218          		Led3Off(); /* turn OFF LED 3 */
   \   00000024   0x....             LDR.N    R1,??DataTable12_7  ;; 0x400ff0c4
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   0000002C   0x....             LDR.N    R2,??DataTable12_7  ;; 0x400ff0c4
   \   0000002E   0x6011             STR      R1,[R2, #+0]
    219          	if (LEDNr & LED4)
   \                     ??LED_TurnOffLed_2: (+1)
   \   00000030   0x0701             LSLS     R1,R0,#+28
   \   00000032   0xD505             BPL.N    ??LED_TurnOffLed_3
    220          		Led4Off(); /* turn OFF LED 4 */
   \   00000034   0x....             LDR.N    R1,??DataTable12_7  ;; 0x400ff0c4
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   0000003C   0x....             LDR.N    R2,??DataTable12_7  ;; 0x400ff0c4
   \   0000003E   0x6011             STR      R1,[R2, #+0]
    221          }             /* LED_TurnOffLed() */
   \                     ??LED_TurnOffLed_3: (+1)
   \   00000040   0x4770             BX       LR               ;; return
    222          
    223          /******************************************************************************
    224           * LED_ToggleLed 
    225           * 
    226           * Toggles the specified LED(s)
    227           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    228          void LED_ToggleLed
    229          (
    230            LED_t LEDNr     /* IN: LED number(s) to be toggled */
    231          )
    232          {
    233          	if (LEDNr & LED1)
   \                     LED_ToggleLed: (+1)
   \   00000000   0x07C1             LSLS     R1,R0,#+31
   \   00000002   0xD505             BPL.N    ??LED_ToggleLed_0
    234          		Led1Toggle(); /* toggle LED 1 */
   \   00000004   0x....             LDR.N    R1,??DataTable12_8  ;; 0x400ff0cc
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   0000000C   0x....             LDR.N    R2,??DataTable12_8  ;; 0x400ff0cc
   \   0000000E   0x6011             STR      R1,[R2, #+0]
    235          	if (LEDNr & LED2)
   \                     ??LED_ToggleLed_0: (+1)
   \   00000010   0x0781             LSLS     R1,R0,#+30
   \   00000012   0xD505             BPL.N    ??LED_ToggleLed_1
    236          		Led2Toggle(); /* toggle LED 2 */
   \   00000014   0x....             LDR.N    R1,??DataTable12_8  ;; 0x400ff0cc
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0xF051 0x0120      ORRS     R1,R1,#0x20
   \   0000001C   0x....             LDR.N    R2,??DataTable12_8  ;; 0x400ff0cc
   \   0000001E   0x6011             STR      R1,[R2, #+0]
    237          	if (LEDNr & LED3)
   \                     ??LED_ToggleLed_1: (+1)
   \   00000020   0x0741             LSLS     R1,R0,#+29
   \   00000022   0xD505             BPL.N    ??LED_ToggleLed_2
    238          		Led3Toggle(); /* toggle LED 3 */
   \   00000024   0x....             LDR.N    R1,??DataTable12_8  ;; 0x400ff0cc
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   0000002C   0x....             LDR.N    R2,??DataTable12_8  ;; 0x400ff0cc
   \   0000002E   0x6011             STR      R1,[R2, #+0]
    239          	if (LEDNr & LED4)
   \                     ??LED_ToggleLed_2: (+1)
   \   00000030   0x0701             LSLS     R1,R0,#+28
   \   00000032   0xD505             BPL.N    ??LED_ToggleLed_3
    240          		Led4Toggle(); /* toggle LED 4 */
   \   00000034   0x....             LDR.N    R1,??DataTable12_8  ;; 0x400ff0cc
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   0000003C   0x....             LDR.N    R2,??DataTable12_8  ;; 0x400ff0cc
   \   0000003E   0x6011             STR      R1,[R2, #+0]
    241          }             /* LED_ToggleLed() */
   \                     ??LED_ToggleLed_3: (+1)
   \   00000040   0x4770             BX       LR               ;; return
    242          
    243          /******************************************************************************
    244           * LED_TurnOffAllLeds
    245           * 
    246           * Turns OFF all LEDs
    247           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    248          void LED_TurnOffAllLeds
    249          (
    250            void
    251          )
    252          {
   \                     LED_TurnOffAllLeds: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    253            LED_TurnOffLed(LED_ALL);
   \   00000002   0x200F             MOVS     R0,#+15
   \   00000004   0x.... 0x....      BL       LED_TurnOffLed
    254          }           /* LED_TurnOffAllLeds() */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    255          
    256          /******************************************************************************
    257           * Name: LED_TurnOnAllLeds
    258           * 
    259           * Turns ON all LEDs
    260           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    261          void LED_TurnOnAllLeds
    262          (
    263            void
    264          )
    265          {
   \                     LED_TurnOnAllLeds: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    266            LED_TurnOnLed(LED_ALL);
   \   00000002   0x200F             MOVS     R0,#+15
   \   00000004   0x.... 0x....      BL       LED_TurnOnLed
    267          }           /* LED_TurnOnAllLeds() */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    268          
    269          /******************************************************************************
    270           * Name: LED_StopFlashingAllLeds
    271           * 
    272           * Stops flashing and turns OFF all LEDs
    273           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    274          void LED_StopFlashingAllLeds
    275          (
    276            void
    277          )
    278          {
   \                     LED_StopFlashingAllLeds: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    279            LED_SetLed(LED_ALL, gLedOff_c);
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x200F             MOVS     R0,#+15
   \   00000006   0x.... 0x....      BL       LED_SetLed
    280          }           /* LED_StopFlashingAllLeds() */         
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    281          
    282          /******************************************************************************
    283           * LED_StartFlash
    284           *
    285           * Starts flashing one or more LEDs
    286           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    287          void LED_StartFlash
    288          (
    289            LED_t LEDNr     /* IN: LED Number (may be an OR of the list)*/
    290          )
    291          {
   \                     LED_StartFlash: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    292              /* indicate which LEDs are flashing */
    293              mLedFlashingLEDs |= LEDNr;
   \   00000004   0x....             LDR.N    R0,??DataTable12_9
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x4320             ORRS     R0,R4,R0
   \   0000000A   0x....             LDR.N    R1,??DataTable12_9
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    294              
    295              /* start the timer */
    296              TMR_StartIntervalTimer(mLEDTimerID, mLEDInterval_c, LED_FlashTimeout);
   \   0000000E   0x.... 0x....      ADR.W    R2,LED_FlashTimeout
   \   00000012   0x2164             MOVS     R1,#+100
   \   00000014   0x....             LDR.N    R0,??DataTable12_5
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x.... 0x....      BL       TMR_StartIntervalTimer
    297          }            /* LED_StartFlash() */ 
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    298          
    299          #if gLEDBlipEnabled_d
    300          /******************************************************************************
    301           * LED_StartBlip
    302           * 
    303           * Set up for blinking one or more LEDs once 
    304           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    305          void LED_StartBlip
    306          (
    307            LED_t LEDNr     /* IN: LED Number (may be an OR of the list)*/
    308          )
    309          {
   \                     LED_StartBlip: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    310              uint8_t iLedIndex;
    311          
    312              /* set up for blinking one or more LEDs once */
    313              for(iLedIndex = 0; iLedIndex < gLEDsOnTargetBoardCnt_c; ++iLedIndex) {
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
   \                     ??LED_StartBlip_0: (+1)
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D04             CMP      R5,#+4
   \   0000000C   0xDA0B             BGE.N    ??LED_StartBlip_1
    314                      if(LEDNr & (1 << iLedIndex))
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x40A8             LSLS     R0,R0,R5
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x4201             TST      R1,R0
   \   00000018   0xD003             BEQ.N    ??LED_StartBlip_2
    315                              mLedBlips[iLedIndex] = 2;   /* blink on, then back off */
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x....             LDR.N    R1,??DataTable12_10
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x5468             STRB     R0,[R5, R1]
    316              }
   \                     ??LED_StartBlip_2: (+1)
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
   \   00000024   0xE7F0             B.N      ??LED_StartBlip_0
    317          
    318              /* start flashing */
    319              LED_StartFlash(LEDNr);
   \                     ??LED_StartBlip_1: (+1)
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       LED_StartFlash
    320          }               /* LED_StartBlip() */               
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    321          #endif
    322          
    323          /******************************************************************************
    324           * LED_StopFlash
    325           * 
    326           * Stop an LED from flashing. 
    327           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    328          void LED_StopFlash
    329          (
    330            LED_t LEDNr     /* IN: LED Number (may be an OR of the list)*/
    331          )
    332          {
   \                     LED_StopFlash: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    333              /* leave stopped LEDs in the off state */
    334              LED_TurnOffLed(LEDNr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LED_TurnOffLed
    335          
    336              /* stop flashing on one or more LEDs */
    337              mLedFlashingLEDs &= (~LEDNr);
   \   0000000C   0x....             LDR.N    R0,??DataTable12_9
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x43A0             BICS     R0,R0,R4
   \   00000012   0x....             LDR.N    R1,??DataTable12_9
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    338          
    339              /* if ALL LEDs have stopped flashing, then stop timer */
    340              if(!mLedFlashingLEDs)
   \   00000016   0x....             LDR.N    R0,??DataTable12_9
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD103             BNE.N    ??LED_StopFlash_0
    341              TMR_StopTimer(mLEDTimerID);
   \   0000001E   0x....             LDR.N    R0,??DataTable12_5
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       TMR_StopTimer
    342          }             /* LED_StopFlash() */
   \                     ??LED_StopFlash_0: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    343          
    344          /******************************************************************************
    345           * LED_StartSerialFlash
    346           * 
    347           * Starts serial flashing LEDs
    348           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    349          void LED_StartSerialFlash
    350          (
    351            void
    352          )
    353          {
   \                     LED_StartSerialFlash: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    354              /* indicate going into flashing mode (must be done first) */
    355              LED_StartFlash(0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       LED_StartFlash
    356          
    357              /* set up for serial lights */
    358              LED_TurnOffAllLeds();
   \   00000008   0x.... 0x....      BL       LED_TurnOffAllLeds
    359              Led1On();
   \   0000000C   0x....             LDR.N    R0,??DataTable12_6  ;; 0x400ff0c8
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000014   0x....             LDR.N    R1,??DataTable12_6  ;; 0x400ff0c8
   \   00000016   0x6008             STR      R0,[R1, #+0]
    360              mLedFlashingLEDs = LED1 | LED2; /* toggle these to on first flash */
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x....             LDR.N    R1,??DataTable12_9
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
    361          
    362              /* indicate in serial flash mode */
    363              mfLedInSerialMode = TRUE;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable12_11
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    364          }             /* LED_StartSerialFlash() */
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    365          
    366          /******************************************************************************
    367           * Name: LED_SetHex
    368           * 
    369           * Sets a specified hex value on the LEDs 
    370           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    371          void LED_SetHex
    372          (
    373            uint8_t hexValue    /* IN: the value to be set on LEDs*/
    374          )
    375          {
   \                     LED_SetHex: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    376              LED_SetLed(LED_ALL, gLedOff_c);
   \   00000004   0x2104             MOVS     R1,#+4
   \   00000006   0x200F             MOVS     R0,#+15
   \   00000008   0x.... 0x....      BL       LED_SetLed
    377              LED_SetLed(hexValue, gLedOn_c);
   \   0000000C   0x2103             MOVS     R1,#+3
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       LED_SetLed
    378          }             /* LED_SetHex() */
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    379          
    380          /******************************************************************************
    381           * LED_SetLed
    382           *   
    383           * This function can set the specified LED(s) in one of the  following states: 
    384           * On, Off, Toggle, Flashing or StopFlash 
    385           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    386          void LED_SetLed
    387          (
    388            LED_t LEDNr,        /* IN: LED(s) to be set*/
    389            LedState_t state    /* IN: one of the possible states listed above*/
    390          )
    391          {
   \                     LED_SetLed: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    392              /* turning off flashing same as off state */
    393              if(state == gLedStopFlashing_c)
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x2D01             CMP      R5,#+1
   \   0000000A   0xD101             BNE.N    ??LED_SetLed_0
    394                      state = gLedOff_c;
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x0005             MOVS     R5,R0
    395          
    396              /* turn off serial lights if in serial mode */
    397              LED_ExitSerialFlash();
   \                     ??LED_SetLed_0: (+1)
   \   00000010   0x.... 0x....      BL       LED_ExitSerialFlash
    398          
    399              /* flash LED */
    400              if(state == gLedFlashing_c)
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x2D00             CMP      R5,#+0
   \   00000018   0xD104             BNE.N    ??LED_SetLed_1
    401              LED_StartFlash(LEDNr);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x.... 0x....      BL       LED_StartFlash
   \   00000022   0xE028             B.N      ??LED_SetLed_2
    402          
    403          #if gLEDBlipEnabled_d
    404              /* blink LEDs */
    405              else if(state == gLedBlip_c)
   \                     ??LED_SetLed_1: (+1)
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x2D02             CMP      R5,#+2
   \   00000028   0xD104             BNE.N    ??LED_SetLed_3
    406                      LED_StartBlip(LEDNr);
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x.... 0x....      BL       LED_StartBlip
   \   00000032   0xE020             B.N      ??LED_SetLed_2
    407          #endif
    408          
    409              /* On, Off or Toggle Led*/
    410              else {
    411          
    412                  /* on, off or toggle will stop flashing on the LED. Also exits serial mode */
    413                  if(mfLedInSerialMode || (mLedFlashingLEDs & LEDNr))
   \                     ??LED_SetLed_3: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable12_11
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD103             BNE.N    ??LED_SetLed_4
   \   0000003C   0x....             LDR.N    R0,??DataTable12_9
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x4220             TST      R0,R4
   \   00000042   0xD003             BEQ.N    ??LED_SetLed_5
    414                          LED_StopFlash(LEDNr);
   \                     ??LED_SetLed_4: (+1)
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       LED_StopFlash
    415          
    416                  /* Select the operation to be done on the port */
    417                  if(state == gLedOn_c)
   \                     ??LED_SetLed_5: (+1)
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x2D03             CMP      R5,#+3
   \   00000050   0xD103             BNE.N    ??LED_SetLed_6
    418                          LED_TurnOnLed(LEDNr);
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       LED_TurnOnLed
    419                  if(state == gLedOff_c)
   \                     ??LED_SetLed_6: (+1)
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0x2D04             CMP      R5,#+4
   \   0000005E   0xD103             BNE.N    ??LED_SetLed_7
    420                          LED_TurnOffLed(LEDNr);
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x.... 0x....      BL       LED_TurnOffLed
    421                  if(state == gLedToggle_c)
   \                     ??LED_SetLed_7: (+1)
   \   00000068   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   0x2D05             CMP      R5,#+5
   \   0000006C   0xD103             BNE.N    ??LED_SetLed_2
    422                          LED_ToggleLed(LEDNr);
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x.... 0x....      BL       LED_ToggleLed
    423              }
    424          }               /* LED_SetLed() */
   \                     ??LED_SetLed_2: (+1)
   \   00000076   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    425          
    426          /******************************************************************************
    427           *******************************************************************************
    428           * Private functions
    429           *******************************************************************************
    430           ******************************************************************************/
    431          
    432          /******************************************************************************
    433           * LED_ExitSerialFlash
    434           * 
    435           * Stop serial flashing mode, if serial flash mode is active. Turns all LEDs off.
    436           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    437          static void LED_ExitSerialFlash
    438          (
    439            void
    440          )
    441          {
   \                     LED_ExitSerialFlash: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    442              if(mfLedInSerialMode) 
   \   00000002   0x....             LDR.N    R0,??DataTable12_11
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD00B             BEQ.N    ??LED_ExitSerialFlash_0
    443              {
    444                  mLedFlashingLEDs = 0;   /* no LEDs are currently flashing */
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR.N    R1,??DataTable12_9
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    445                  LED_TurnOffAllLeds();
   \   00000010   0x.... 0x....      BL       LED_TurnOffAllLeds
    446                  TMR_StopTimer(mLEDTimerID);
   \   00000014   0x....             LDR.N    R0,??DataTable12_5
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x.... 0x....      BL       TMR_StopTimer
    447                  mfLedInSerialMode = FALSE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR.N    R1,??DataTable12_11
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    448              }
    449          }
   \                     ??LED_ExitSerialFlash_0: (+1)
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    450          
    451          #if gLEDBlipEnabled_d
    452          /******************************************************************************
    453           * LED_DecrementBlip
    454           *
    455           * Decrements the blink count
    456           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    457          static void LED_DecrementBlip(void)
    458          {
   \                     LED_DecrementBlip: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    459              uint8_t iLedIndex;	
    460          
    461              for(iLedIndex = 0; iLedIndex < gLEDsOnTargetBoardCnt_c; ++iLedIndex) 
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??LED_DecrementBlip_0: (+1)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C04             CMP      R4,#+4
   \   0000000A   0xDA19             BGE.N    ??LED_DecrementBlip_1
    462              {
    463                      if(mLedBlips[iLedIndex]) 
   \   0000000C   0x....             LDR.N    R0,??DataTable12_10
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x5C20             LDRB     R0,[R4, R0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD012             BEQ.N    ??LED_DecrementBlip_2
    464                      {
    465                              --mLedBlips[iLedIndex];
   \   00000016   0x....             LDR.N    R0,??DataTable12_10
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x5C20             LDRB     R0,[R4, R0]
   \   0000001C   0x1E40             SUBS     R0,R0,#+1
   \   0000001E   0x....             LDR.N    R1,??DataTable12_10
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x5460             STRB     R0,[R4, R1]
    466                              if(!mLedBlips[iLedIndex])
   \   00000024   0x....             LDR.N    R0,??DataTable12_10
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x5C20             LDRB     R0,[R4, R0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD106             BNE.N    ??LED_DecrementBlip_2
    467                              {
    468                                      mLedFlashingLEDs &= ~(1 << iLedIndex);
   \   0000002E   0x....             LDR.N    R0,??DataTable12_9
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x40A1             LSLS     R1,R1,R4
   \   00000036   0x4388             BICS     R0,R0,R1
   \   00000038   0x....             LDR.N    R1,??DataTable12_9
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
    469                              }
    470                      }
    471              }
   \                     ??LED_DecrementBlip_2: (+1)
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \   0000003E   0xE7E2             B.N      ??LED_DecrementBlip_0
    472          
    473              /* done, stop the timer */
    474              if(!mLedFlashingLEDs)
   \                     ??LED_DecrementBlip_1: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable12_9
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD103             BNE.N    ??LED_DecrementBlip_3
    475              {
    476                      TMR_StopTimer(mLEDTimerID);
   \   00000048   0x....             LDR.N    R0,??DataTable12_5
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x.... 0x....      BL       TMR_StopTimer
    477              }
    478          }
   \                     ??LED_DecrementBlip_3: (+1)
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
    479          #endif
    480          
    481          /******************************************************************************
    482           * LED_FlashTimeout
    483           * 
    484           * Timer callback function that is called each time the timer expires
    485           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    486          static void LED_FlashTimeout
    487          (
    488            tmrTimerID_t timerId /* IN: TimerID. */
    489          )
    490          {
   \                     LED_FlashTimeout: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    491              (void)timerId;  /* prevent compiler warning */
    492          
    493              if(mLedFlashingLEDs & LED1)
   \   00000004   0x....             LDR.N    R0,??DataTable12_9
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x07C0             LSLS     R0,R0,#+31
   \   0000000A   0xD505             BPL.N    ??LED_FlashTimeout_0
    494                      Led1Toggle();
   \   0000000C   0x....             LDR.N    R0,??DataTable12_8  ;; 0x400ff0cc
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000014   0x....             LDR.N    R1,??DataTable12_8  ;; 0x400ff0cc
   \   00000016   0x6008             STR      R0,[R1, #+0]
    495              if(mLedFlashingLEDs & LED2)
   \                     ??LED_FlashTimeout_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable12_9
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD505             BPL.N    ??LED_FlashTimeout_1
    496                      Led2Toggle();
   \   00000020   0x....             LDR.N    R0,??DataTable12_8  ;; 0x400ff0cc
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000028   0x....             LDR.N    R1,??DataTable12_8  ;; 0x400ff0cc
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    497              if(mLedFlashingLEDs & LED3)
   \                     ??LED_FlashTimeout_1: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable12_9
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x0740             LSLS     R0,R0,#+29
   \   00000032   0xD505             BPL.N    ??LED_FlashTimeout_2
    498                      Led3Toggle();
   \   00000034   0x....             LDR.N    R0,??DataTable12_8  ;; 0x400ff0cc
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000003C   0x....             LDR.N    R1,??DataTable12_8  ;; 0x400ff0cc
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    499              if(mLedFlashingLEDs & LED4)
   \                     ??LED_FlashTimeout_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable12_9
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x0700             LSLS     R0,R0,#+28
   \   00000046   0xD505             BPL.N    ??LED_FlashTimeout_3
    500                      Led4Toggle();
   \   00000048   0x....             LDR.N    R0,??DataTable12_8  ;; 0x400ff0cc
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000050   0x....             LDR.N    R1,??DataTable12_8  ;; 0x400ff0cc
   \   00000052   0x6008             STR      R0,[R1, #+0]
    501          
    502          #if gLEDBlipEnabled_d
    503              /* decrement blips */
    504              LED_DecrementBlip();
   \                     ??LED_FlashTimeout_3: (+1)
   \   00000054   0x.... 0x....      BL       LED_DecrementBlip
    505          #endif
    506          
    507              /* if serial lights, move on to next light */
    508              if(mfLedInSerialMode)
   \   00000058   0x....             LDR.N    R0,??DataTable12_11
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD014             BEQ.N    ??LED_FlashTimeout_4
    509              {
    510                      mLedFlashingLEDs = mLedFlashingLEDs << 1;
   \   00000060   0x....             LDR.N    R0,??DataTable12_9
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x0040             LSLS     R0,R0,#+1
   \   00000066   0x....             LDR.N    R1,??DataTable12_9
   \   00000068   0x7008             STRB     R0,[R1, #+0]
    511                      if(mLedFlashingLEDs & (LED4 << 1))  /* wrap around */
   \   0000006A   0x....             LDR.N    R0,??DataTable12_9
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x06C0             LSLS     R0,R0,#+27
   \   00000070   0xD50B             BPL.N    ??LED_FlashTimeout_4
    512                      {
    513                              mLedFlashingLEDs &= LED_ALL;
   \   00000072   0x....             LDR.N    R0,??DataTable12_9
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000007A   0x....             LDR.N    R1,??DataTable12_9
   \   0000007C   0x7008             STRB     R0,[R1, #+0]
    514                              mLedFlashingLEDs |= LED1;
   \   0000007E   0x....             LDR.N    R0,??DataTable12_9
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000086   0x....             LDR.N    R1,??DataTable12_9
   \   00000088   0x7008             STRB     R0,[R1, #+0]
    515                      }
    516              }
    517          }
   \                     ??LED_FlashTimeout_4: (+1)
   \   0000008A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x4004C00C         DC32     0x4004c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x400FF0D4         DC32     0x400ff0d4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     mLEDTimerID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x400FF0C8         DC32     0x400ff0c8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x400FF0C4         DC32     0x400ff0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x400FF0CC         DC32     0x400ff0cc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     mLedFlashingLEDs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     mLedBlips

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     mfLedInSerialMode
    518          
    519          #endif /* gLEDSupported_d */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LED_DecrementBlip
         8   -> TMR_StopTimer
       8   LED_ExitSerialFlash
         8   -> LED_TurnOffAllLeds
         8   -> TMR_StopTimer
       8   LED_FlashTimeout
         8   -> LED_DecrementBlip
       8   LED_Init
         8   -> TMR_AllocateTimer
       8   LED_SetHex
         8   -> LED_SetLed
      16   LED_SetLed
        16   -> LED_ExitSerialFlash
        16   -> LED_StartBlip
        16   -> LED_StartFlash
        16   -> LED_StopFlash
        16   -> LED_ToggleLed
        16   -> LED_TurnOffLed
        16   -> LED_TurnOnLed
      16   LED_StartBlip
        16   -> LED_StartFlash
       8   LED_StartFlash
         8   -> TMR_StartIntervalTimer
       8   LED_StartSerialFlash
         8   -> LED_StartFlash
         8   -> LED_TurnOffAllLeds
       8   LED_StopFlash
         8   -> LED_TurnOffLed
         8   -> TMR_StopTimer
       8   LED_StopFlashingAllLeds
         8   -> LED_SetLed
       0   LED_ToggleLed
       8   LED_TurnOffAllLeds
         8   -> LED_TurnOffLed
       0   LED_TurnOffLed
       8   LED_TurnOnAllLeds
         8   -> LED_TurnOnLed
       0   LED_TurnOnLed
       0   LED_UnInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
      82  LED_DecrementBlip
      36  LED_ExitSerialFlash
     140  LED_FlashTimeout
     126  LED_Init
      24  LED_SetHex
     120  LED_SetLed
      48  LED_StartBlip
      30  LED_StartFlash
      38  LED_StartSerialFlash
      40  LED_StopFlash
      12  LED_StopFlashingAllLeds
      66  LED_ToggleLed
      10  LED_TurnOffAllLeds
      66  LED_TurnOffLed
      10  LED_TurnOnAllLeds
      74  LED_TurnOnLed
      34  LED_UnInit
       1  mLEDTimerID
       4  mLedBlips
       1  mLedFlashingLEDs
       1  mfLedInSerialMode

 
     6 bytes in section .bss
     1 byte  in section .data
 1 004 bytes in section .text
 
 1 004 bytes of CODE memory
     7 bytes of DATA memory

Errors: none
Warnings: none
