###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        20/Mar/2018  09:41:53
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\Class\usb_cdc.c
#    Command line =  
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\Class\usb_cdc.c" -D IAR --preprocess
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\" -lC
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\" -lB
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\"
#        --diag_suppress Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Environment\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Generic
#        Services\Interface\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Uart\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\CDC\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\Sys Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -On
#    List file    =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\usb_cdc.lst
#    Object file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\usb_cdc.o
#
###############################################################################

C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Class\usb_cdc.c
      1          /******************************************************************************
      2           *
      3           * Freescale Semiconductor Inc.
      4           * (c) Copyright 2004-2009 Freescale Semiconductor, Inc.
      5           * ALL RIGHTS RESERVED.
      6           *
      7           ******************************************************************************
      8           *
      9           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
     10           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
     11           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
     12           * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
     13           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
     14           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
     15           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
     16           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     17           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
     18           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
     19           * THE POSSIBILITY OF SUCH DAMAGE.
     20           *
     21           **************************************************************************//*!
     22           *
     23           * @file usb_cdc.c
     24           *
     25           * @author
     26           *
     27           * @version
     28           *
     29           * @date May-28-2009
     30           *
     31           * @brief The file contains USB stack CDC layer implementation.
     32           *
     33           *****************************************************************************/
     34          
     35          /******************************************************************************
     36           * Includes
     37           *****************************************************************************/
     38          #include "USB.h" 
     39          #include "usb_cdc.h"    /* USB CDC Class Header File */
     40          #include "usb_cdc_pstn.h"
     41          /*****************************************************************************
     42           * Constant and Macro's
     43           *****************************************************************************/
     44          
     45          /****************************************************************************
     46           * Global Variables
     47          ***************************************************************************/
     48          #if gUsbCdcEnabled_d
     49          
     50          #if (gUsbIncluded_d == FALSE)
     51           #error If gUsbCdcEnabled_d == TRUE, gUsbIncluded_d must be TRUE
     52          #endif
     53          

   \                                 In section .bss, align 4
     54          static void (*pfCDCDicInServiceCallBack)(usbDeviceEvent_t* event);
   \                     pfCDCDicInServiceCallBack:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     55          static void (*pfCDCDicOutServiceCallBack)(usbDeviceEvent_t* event);
   \                     pfCDCDicOutServiceCallBack:
   \   00000000                      DS8 4
     56          extern uint8_t gDTEStatus;
     57          /*****************************************************************************
     58           * Local Types - None
     59           *****************************************************************************/
     60          #if gUSB_CDC_CIC_NotifElemSupport_d
     61          extern uint8_t gNotifyEndpoint;
     62          #endif
     63          /*****************************************************************************
     64           * Local Functions Prototypes
     65           *****************************************************************************/
     66          #if gUSB_CDC_CIC_NotifElemSupport_d
     67          static void USB_Class_CDC_ServiceCicNotify(usbDeviceEvent_t* event);
     68          #endif
     69          
     70          static void USB_Class_CDC_ServiceDicBulkIn(usbDeviceEvent_t* event);
     71          static void USB_Class_CDC_ServiceDicBulkOut(usbDeviceEvent_t* event);
     72          static uint8_t USB_CDC_OtherRequests
     73          (
     74            uint8_t controllerId,
     75            usbSetupPacket_t * setupPacket,
     76            uint8_t* *data,
     77            usbPacketSize_t *size
     78          );
     79          static void USB_CDC_ClassEvent
     80          (
     81            uint8_t controllerId,
     82            gUsbToAppEvent_t event,
     83            void* val
     84          );
     85          
     86          /*****************************************************************************
     87           * Local Variables - None
     88           *****************************************************************************/
     89          
     90           /*****************************************************************************
     91           * Local Functions
     92           *****************************************************************************/
     93          #if gUSB_CDC_CIC_NotifElemSupport_d
     94          /**************************************************************************//*!
     95           *
     96           * @name  USB_Class_CDC_Service_Cic_Notify
     97           *
     98           * @brief The funtion is callback function of CIC Notification endpoint
     99           *
    100           * @param event : Pointer to USB Event Structure
    101           *
    102           * @return None
    103           *
    104           ******************************************************************************
    105           * Called by Lower layer when data on CIC Endpoint is sent
    106           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          static void USB_Class_CDC_ServiceCicNotify 
    108          (
    109              usbDeviceEvent_t* event  /* [IN] Pointer to USB Event Structure */
    110          )
    111          {
   \                     USB_Class_CDC_ServiceCicNotify: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    112            pfUsbToAppEventHandler_t cdcClassCallback;
    113            cdcClassCallback = gpaUsbClassDescriptor[event->controllerId]->pfUsbToAppEventHandler;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable7
   \   0000000A   0x7821             LDRB     R1,[R4, #+0]
   \   0000000C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x0005             MOVS     R5,R0
    114            if(cdcClassCallback != NULL)
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD01A             BEQ.N    ??USB_Class_CDC_ServiceCicNotify_0
    115            {
    116              usbMsg_t usbMsg;
    117              usbMsg.controllerId = event->controllerId;
   \   0000001A   0x7820             LDRB     R0,[R4, #+0]
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    118              if(event->errors != 0)
   \   00000020   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD006             BEQ.N    ??USB_Class_CDC_ServiceCicNotify_1
    119              {
    120                usbMsg.eventType = gUsbToAppEvent_Error_c;
   \   00000026   0x2005             MOVS     R0,#+5
   \   00000028   0xF88D 0x0001      STRB     R0,[SP, #+1]
    121                usbMsg.eventParam.errorEvent.errors = event->errors;
   \   0000002C   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000002E   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000032   0xE00A             B.N      ??USB_Class_CDC_ServiceCicNotify_2
    122              }
    123              else
    124              {
    125                usbMsg.eventType = gUsbToAppEvent_SendComplete_c;
   \                     ??USB_Class_CDC_ServiceCicNotify_1: (+1)
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0xF88D 0x0001      STRB     R0,[SP, #+1]
    126                usbMsg.eventParam.sendCompleteEvent.epNum = event->epNum;
   \   0000003A   0x7860             LDRB     R0,[R4, #+1]
   \   0000003C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    127                usbMsg.eventParam.sendCompleteEvent.pBuffer = event->pBuffer;
   \   00000040   0x6860             LDR      R0,[R4, #+4]
   \   00000042   0x9002             STR      R0,[SP, #+8]
    128                usbMsg.eventParam.sendCompleteEvent.len = event->len;
   \   00000044   0x8920             LDRH     R0,[R4, #+8]
   \   00000046   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    129              }
    130              USB_IsrEvent(&usbMsg);
   \                     ??USB_Class_CDC_ServiceCicNotify_2: (+1)
   \   0000004A   0xA800             ADD      R0,SP,#+0
   \   0000004C   0x.... 0x....      BL       USB_IsrEvent
    131            }
    132          }
   \                     ??USB_Class_CDC_ServiceCicNotify_0: (+1)
   \   00000050   0xB005             ADD      SP,SP,#+20
   \   00000052   0xBD30             POP      {R4,R5,PC}       ;; return
    133          #endif
    134          
    135          
    136          /**************************************************************************//*!
    137           *
    138           * @name  USB_Class_CDC_Service_Dic_Bulk_In
    139           *
    140           * @brief The funtion is callback function of DIC Bulk In Endpoint
    141           *
    142           * @param event : Pointer to USB Event Structure
    143           *
    144           * @return None
    145           *
    146           ******************************************************************************
    147           * Called by Lower Layer when Data on DIC SEND Interface is sent
    148           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    149          static void USB_Class_CDC_ServiceDicBulkIn 
    150          (
    151            usbDeviceEvent_t* event /* [IN] Pointer to USB Event Structure */
    152          )
    153          {
   \                     USB_Class_CDC_ServiceDicBulkIn: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    154            if(pfCDCDicInServiceCallBack != NULL)
   \   00000006   0x....             LDR.N    R0,??DataTable7_1
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD004             BEQ.N    ??USB_Class_CDC_ServiceDicBulkIn_0
    155            {
    156              pfCDCDicInServiceCallBack(event);  
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x....             LDR.N    R1,??DataTable7_1
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x4788             BLX      R1
   \   00000016   0xE023             B.N      ??USB_Class_CDC_ServiceDicBulkIn_1
    157            }
    158            else
    159            {
    160              pfUsbToAppEventHandler_t cdcClassCallback;
    161              cdcClassCallback = gpaUsbClassDescriptor[event->controllerId]->pfUsbToAppEventHandler;
   \                     ??USB_Class_CDC_ServiceDicBulkIn_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable7
   \   0000001A   0x7821             LDRB     R1,[R4, #+0]
   \   0000001C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x0005             MOVS     R5,R0
    162              if(cdcClassCallback != NULL)
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD01A             BEQ.N    ??USB_Class_CDC_ServiceDicBulkIn_1
    163              {
    164                usbMsg_t usbMsg;
    165                usbMsg.controllerId = event->controllerId;
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    166                if(event->errors != 0)
   \   00000030   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD006             BEQ.N    ??USB_Class_CDC_ServiceDicBulkIn_2
    167                {
    168                  usbMsg.eventType = gUsbToAppEvent_Error_c;
   \   00000036   0x2005             MOVS     R0,#+5
   \   00000038   0xF88D 0x0001      STRB     R0,[SP, #+1]
    169                  usbMsg.eventParam.errorEvent.errors = event->errors;
   \   0000003C   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000003E   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000042   0xE00A             B.N      ??USB_Class_CDC_ServiceDicBulkIn_3
    170                }
    171                else
    172                {
    173                  usbMsg.eventType = gUsbToAppEvent_SendComplete_c;
   \                     ??USB_Class_CDC_ServiceDicBulkIn_2: (+1)
   \   00000044   0x2003             MOVS     R0,#+3
   \   00000046   0xF88D 0x0001      STRB     R0,[SP, #+1]
    174                  usbMsg.eventParam.sendCompleteEvent.epNum = event->epNum;
   \   0000004A   0x7860             LDRB     R0,[R4, #+1]
   \   0000004C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    175                  usbMsg.eventParam.sendCompleteEvent.pBuffer = event->pBuffer;
   \   00000050   0x6860             LDR      R0,[R4, #+4]
   \   00000052   0x9002             STR      R0,[SP, #+8]
    176                  usbMsg.eventParam.sendCompleteEvent.len = event->len;
   \   00000054   0x8920             LDRH     R0,[R4, #+8]
   \   00000056   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    177                }
    178                USB_IsrEvent(&usbMsg);
   \                     ??USB_Class_CDC_ServiceDicBulkIn_3: (+1)
   \   0000005A   0xA800             ADD      R0,SP,#+0
   \   0000005C   0x.... 0x....      BL       USB_IsrEvent
    179              }
    180            }
    181          }
   \                     ??USB_Class_CDC_ServiceDicBulkIn_1: (+1)
   \   00000060   0xB005             ADD      SP,SP,#+20
   \   00000062   0xBD30             POP      {R4,R5,PC}       ;; return
    182          
    183          /**************************************************************************//*!
    184           *
    185           * @name  USB_Class_CDC_Service_Dic_Bulk_Out
    186           *
    187           * @brief The funtion is callback function of DIC Bulk Out Endpoint
    188           *
    189           * @param event : Pointer to USB Event Structure
    190           *
    191           * @return None
    192           *
    193           ******************************************************************************
    194           * Called by Lower Layer when Data on DIC RECV Interface is received
    195           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    196          static void USB_Class_CDC_ServiceDicBulkOut 
    197          (
    198              usbDeviceEvent_t* event  /* [IN] Pointer to USB Event Structure */
    199          )
    200          {   
   \                     USB_Class_CDC_ServiceDicBulkOut: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    201            if(pfCDCDicOutServiceCallBack != NULL)
   \   00000006   0x....             LDR.N    R0,??DataTable7_2
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD004             BEQ.N    ??USB_Class_CDC_ServiceDicBulkOut_0
    202            {
    203              pfCDCDicOutServiceCallBack(event);  
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x....             LDR.N    R1,??DataTable7_2
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x4788             BLX      R1
   \   00000016   0xE023             B.N      ??USB_Class_CDC_ServiceDicBulkOut_1
    204            }
    205            else
    206            {
    207              pfUsbToAppEventHandler_t cdcClassCallback;
    208              cdcClassCallback = gpaUsbClassDescriptor[event->controllerId]->pfUsbToAppEventHandler;
   \                     ??USB_Class_CDC_ServiceDicBulkOut_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable7
   \   0000001A   0x7821             LDRB     R1,[R4, #+0]
   \   0000001C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x0005             MOVS     R5,R0
    209              if(cdcClassCallback != NULL)
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD01A             BEQ.N    ??USB_Class_CDC_ServiceDicBulkOut_1
    210              {
    211                usbMsg_t usbMsg;
    212                usbMsg.controllerId = event->controllerId;
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    213                if(event->errors != 0)
   \   00000030   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD006             BEQ.N    ??USB_Class_CDC_ServiceDicBulkOut_2
    214                {
    215                  usbMsg.eventType = gUsbToAppEvent_Error_c;
   \   00000036   0x2005             MOVS     R0,#+5
   \   00000038   0xF88D 0x0001      STRB     R0,[SP, #+1]
    216                  usbMsg.eventParam.errorEvent.errors = event->errors;
   \   0000003C   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000003E   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000042   0xE00A             B.N      ??USB_Class_CDC_ServiceDicBulkOut_3
    217                }
    218                else
    219                {
    220                  usbMsg.eventType = gUsbToAppEvent_DataReceived_c;
   \                     ??USB_Class_CDC_ServiceDicBulkOut_2: (+1)
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0xF88D 0x0001      STRB     R0,[SP, #+1]
    221                  usbMsg.eventParam.dataReceivedEvent.epNum = event->epNum;
   \   0000004A   0x7860             LDRB     R0,[R4, #+1]
   \   0000004C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    222                  usbMsg.eventParam.dataReceivedEvent.pBuffer = event->pBuffer;
   \   00000050   0x6860             LDR      R0,[R4, #+4]
   \   00000052   0x9002             STR      R0,[SP, #+8]
    223                  usbMsg.eventParam.dataReceivedEvent.len = event->len;
   \   00000054   0x8920             LDRH     R0,[R4, #+8]
   \   00000056   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    224                }
    225                  USB_IsrEvent(&usbMsg);
   \                     ??USB_Class_CDC_ServiceDicBulkOut_3: (+1)
   \   0000005A   0xA800             ADD      R0,SP,#+0
   \   0000005C   0x.... 0x....      BL       USB_IsrEvent
    226              }   
    227            }
    228          }
   \                     ??USB_Class_CDC_ServiceDicBulkOut_1: (+1)
   \   00000060   0xB005             ADD      SP,SP,#+20
   \   00000062   0xBD30             POP      {R4,R5,PC}       ;; return
    229          
    230          
    231          /**************************************************************************//*!
    232           *
    233           * @name  USB_Class_CDC_Event
    234           *
    235           * @brief The funtion initializes CDC endpoints
    236           *
    237           * @param controller_ID : Controller ID
    238           * @param event         : Event Type
    239           * @param val           : Pointer to configuration Value
    240           *
    241           * @return None
    242           *
    243           ******************************************************************************
    244           *
    245           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    246          static void USB_CDC_ClassEvent 
    247          (
    248              uint8_t controllerId,   /* [IN] Controller ID */
    249              gUsbToAppEvent_t event,           /* [IN] Event Type */
    250              void* val               /* [OUT] Pointer to configuration Value */
    251          )
    252          {
   \                     USB_CDC_ClassEvent: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    253            pfUsbToAppEventHandler_t cdcClassCallback;
    254            uint8_t index;
    255            usbEpStruct_t* usbNCEpDptr = gpaUsbClassDescriptor[controllerId]->usbNonControlEpDescriptor;    
   \   0000000A   0x....             LDR.N    R0,??DataTable7
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000012   0xF8D0 0x802C      LDR      R8,[R0, #+44]
    256            uint8_t count = gpaUsbClassDescriptor[controllerId]->numNonControlEp;
   \   00000016   0x....             LDR.N    R0,??DataTable7
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000001E   0xF890 0x9029      LDRB     R9,[R0, #+41]
    257            if(event == gUsbToAppEvent_EnumComplete_c)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D02             CMP      R5,#+2
   \   00000026   0xD160             BNE.N    ??USB_CDC_ClassEvent_0
    258            {
    259          	  /* deinitialize all endpoints in case they were initialized */
    260          		index = count;
   \   00000028   0x46CA             MOV      R10,R9
    261          		while(index > 0) 
   \                     ??USB_CDC_ClassEvent_1: (+1)
   \   0000002A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000002E   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000032   0xD012             BEQ.N    ??USB_CDC_ClassEvent_2
    262          		{   
    263          		  index--;
   \   00000034   0xF1BA 0x0A01      SUBS     R10,R10,#+1
    264          			(void)USB_DeviceDeinitEndpoint(controllerId,usbNCEpDptr[index].number, usbNCEpDptr[index].direction);
   \   00000038   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000003C   0x2006             MOVS     R0,#+6
   \   0000003E   0xFB00 0x800A      MLA      R0,R0,R10,R8
   \   00000042   0x7882             LDRB     R2,[R0, #+2]
   \   00000044   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000048   0x2006             MOVS     R0,#+6
   \   0000004A   0xFB00 0x800A      MLA      R0,R0,R10,R8
   \   0000004E   0x7801             LDRB     R1,[R0, #+0]
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x.... 0x....      BL       USB_DeviceDeinitEndpoint
   \   00000058   0xE7E7             B.N      ??USB_CDC_ClassEvent_1
    265          		}
    266                  
    267             /* intialize all non control endpoints */
    268              while(index < count)
   \                     ??USB_CDC_ClassEvent_2: (+1)
   \   0000005A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000005E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000062   0x45CA             CMP      R10,R9
   \   00000064   0xD247             BCS.N    ??USB_CDC_ClassEvent_3
    269              {
    270                usbEpStruct_t* epStruct = usbNCEpDptr + index;
   \   00000066   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000006A   0x2006             MOVS     R0,#+6
   \   0000006C   0xFB00 0x8B0A      MLA      R11,R0,R10,R8
    271                (void)USB_DeviceInitEndpoint(controllerId, epStruct, TRUE);
   \   00000070   0x2201             MOVS     R2,#+1
   \   00000072   0x4659             MOV      R1,R11
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x.... 0x....      BL       USB_DeviceInitEndpoint
    272                /* register callback service for Non Control EndPoints */
    273                switch(epStruct->type)
   \   0000007C   0xF89B 0x1001      LDRB     R1,[R11, #+1]
   \   00000080   0x2902             CMP      R1,#+2
   \   00000082   0xD00D             BEQ.N    ??USB_CDC_ClassEvent_4
   \   00000084   0x2903             CMP      R1,#+3
   \   00000086   0xD11F             BNE.N    ??USB_CDC_ClassEvent_5
    274                {
    275                  #if gUSB_CDC_CIC_NotifElemSupport_d
    276                  case gUsbEpType_Interrupt_c :
    277                         gNotifyEndpoint = epStruct->number;  
   \                     ??USB_CDC_ClassEvent_6: (+1)
   \   00000088   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   0000008C   0x....             LDR.N    R1,??DataTable7_3
   \   0000008E   0x7008             STRB     R0,[R1, #+0]
    278                         (void)USB_DeviceRegisterService(controllerId,
    279                           (uint8_t)(gUsbService_Ep0_d+epStruct->number),USB_Class_CDC_ServiceCicNotify);
   \   00000090   0x....             LDR.N    R2,??DataTable7_4
   \   00000092   0xF89B 0x1000      LDRB     R1,[R11, #+0]
   \   00000096   0x0020             MOVS     R0,R4
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x.... 0x....      BL       USB_DeviceRegisterService
    280                  break;
   \   0000009E   0xE013             B.N      ??USB_CDC_ClassEvent_7
    281                  #endif
    282                  case gUsbEpType_Bulk_c :
    283                         if(epStruct->direction == gUsbEpDirection_Out_c)
   \                     ??USB_CDC_ClassEvent_4: (+1)
   \   000000A0   0xF89B 0x0002      LDRB     R0,[R11, #+2]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD107             BNE.N    ??USB_CDC_ClassEvent_8
    284                         {
    285                           (void)USB_DeviceRegisterService(controllerId,
    286                              (uint8_t)(gUsbService_Ep0_d+epStruct->number),USB_Class_CDC_ServiceDicBulkOut);
   \   000000A8   0x....             LDR.N    R2,??DataTable7_5
   \   000000AA   0xF89B 0x1000      LDRB     R1,[R11, #+0]
   \   000000AE   0x0020             MOVS     R0,R4
   \   000000B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B2   0x.... 0x....      BL       USB_DeviceRegisterService
   \   000000B6   0xE006             B.N      ??USB_CDC_ClassEvent_9
    287                         }
    288                         else
    289                         {
    290                           (void)USB_DeviceRegisterService(controllerId,
    291                             (uint8_t)(gUsbService_Ep0_d+epStruct->number),USB_Class_CDC_ServiceDicBulkIn);
   \                     ??USB_CDC_ClassEvent_8: (+1)
   \   000000B8   0x....             LDR.N    R2,??DataTable7_6
   \   000000BA   0xF89B 0x1000      LDRB     R1,[R11, #+0]
   \   000000BE   0x0020             MOVS     R0,R4
   \   000000C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C2   0x.... 0x....      BL       USB_DeviceRegisterService
    292                         }
    293                  break;
   \                     ??USB_CDC_ClassEvent_9: (+1)
   \   000000C6   0xE7FF             B.N      ??USB_CDC_ClassEvent_7
    294          
    295                  default: 
    296                  break;
    297                }
    298                  /* set the EndPoint Status as Idle in the device layer */
    299                (void)USB_DeviceSetStatus(controllerId,
    300                          (uint8_t)(gUsbComponentStatus_Endpoint_d | epStruct->number |
    301                          (epStruct->direction << gUsbComponent_DirectionShift_d)),
    302                          (uint8_t)gUsbStatus_Idle_d);
   \                     ??USB_CDC_ClassEvent_5: (+1)
   \                     ??USB_CDC_ClassEvent_7: (+1)
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000CE   0xF89B 0x1002      LDRB     R1,[R11, #+2]
   \   000000D2   0xEA50 0x10C1      ORRS     R0,R0,R1, LSL #+7
   \   000000D6   0xF050 0x0110      ORRS     R1,R0,#0x10
   \   000000DA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000DC   0x0020             MOVS     R0,R4
   \   000000DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E0   0x.... 0x....      BL       USB_DeviceSetStatus
    303                index++;
   \   000000E4   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000000E8   0xE7B7             B.N      ??USB_CDC_ClassEvent_2
    304              }
    305            }
    306            else if(event == gUsbToAppEvent_BusReset_c)
   \                     ??USB_CDC_ClassEvent_0: (+1)
   \   000000EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000EC   0x2D00             CMP      R5,#+0
   \   000000EE   0xD102             BNE.N    ??USB_CDC_ClassEvent_3
    307            {
    308              gDTEStatus = (uint8_t)gUninitialisedVal_d;
   \   000000F0   0x20FF             MOVS     R0,#+255
   \   000000F2   0x....             LDR.N    R1,??DataTable7_7
   \   000000F4   0x7008             STRB     R0,[R1, #+0]
    309            }
    310                
    311            cdcClassCallback = gpaUsbClassDescriptor[controllerId]->pfUsbToAppEventHandler;
   \                     ??USB_CDC_ClassEvent_3: (+1)
   \   000000F6   0x....             LDR.N    R0,??DataTable7
   \   000000F8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FA   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000FE   0x6840             LDR      R0,[R0, #+4]
   \   00000100   0x0007             MOVS     R7,R0
    312            if(cdcClassCallback != NULL)
   \   00000102   0x0038             MOVS     R0,R7
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD002             BEQ.N    ??USB_CDC_ClassEvent_10
    313            {
    314              USB_IsrEvent((usbMsg_t*) val);    
   \   00000108   0x0030             MOVS     R0,R6
   \   0000010A   0x.... 0x....      BL       USB_IsrEvent
    315            }
    316          }
   \                     ??USB_CDC_ClassEvent_10: (+1)
   \   0000010E   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    317          
    318          /**************************************************************************//*!
    319           *
    320           * @name  USB_Other_Requests
    321           *
    322           * @brief The funtion provides flexibilty to add class and vendor specific
    323           *        requests
    324           *
    325           * @param controller_ID : Controller ID
    326           * @param setup_packet  : Setup packet received
    327           * @param data:         : Data to be send back
    328           * @param size:         : Size to be returned
    329           *
    330           * @return status:
    331           *                        gUsbErr_NoError_c : When Successfull
    332           *                        Others : When Error
    333           *
    334           ******************************************************************************
    335           * Handles CDC Class requests and forwards vendor specific request to the
    336           * application
    337           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    338          static uint8_t USB_CDC_OtherRequests 
    339          (
    340              uint8_t controllerId,           /* [IN] Controller ID */
    341              usbSetupPacket_t * setupPacket,/* [IN] Pointer to Setup Packet Received */
    342              uint8_t* *pData,           /* [OUT] Pointer to Data Buffer to be sent */
    343              usbPacketSize_t *pSize           /* [OUT] Size of Data buffer */
    344          )
    345          {
   \                     USB_CDC_OtherRequests: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    346            uint8_t status = gUsbErr_InvalidReqType_c;
   \   0000000C   0xF05F 0x08CD      MOVS     R8,#+205
    347            if((setupPacket->requestType & gUsbRequestClassMask_d) == gUsbRequestClass_Class_d)
   \   00000010   0x7828             LDRB     R0,[R5, #+0]
   \   00000012   0xF010 0x0060      ANDS     R0,R0,#0x60
   \   00000016   0x2820             CMP      R0,#+32
   \   00000018   0xD165             BNE.N    ??USB_CDC_OtherRequests_0
    348            {  
    349              /* class request so handle it here */
    350              status=gUsbErr_NoError_c;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x4680             MOV      R8,R0
    351          
    352              /* call for class/subclass specific requests */
    353              switch(setupPacket->request)
   \   0000001E   0x7868             LDRB     R0,[R5, #+1]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD010             BEQ.N    ??USB_CDC_OtherRequests_1
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD011             BEQ.N    ??USB_CDC_OtherRequests_2
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xD012             BEQ.N    ??USB_CDC_OtherRequests_3
   \   0000002C   0x2803             CMP      R0,#+3
   \   0000002E   0xD01C             BEQ.N    ??USB_CDC_OtherRequests_4
   \   00000030   0x2804             CMP      R0,#+4
   \   00000032   0xD023             BEQ.N    ??USB_CDC_OtherRequests_5
   \   00000034   0x2820             CMP      R0,#+32
   \   00000036   0xD038             BEQ.N    ??USB_CDC_OtherRequests_6
   \   00000038   0x2821             CMP      R0,#+33
   \   0000003A   0xD02D             BEQ.N    ??USB_CDC_OtherRequests_7
   \   0000003C   0x2822             CMP      R0,#+34
   \   0000003E   0xD03D             BEQ.N    ??USB_CDC_OtherRequests_8
   \   00000040   0x2823             CMP      R0,#+35
   \   00000042   0xD044             BEQ.N    ??USB_CDC_OtherRequests_9
   \   00000044   0xE04C             B.N      ??USB_CDC_OtherRequests_10
    354              {
    355                case gUSB_CDC_ClassRequest_SendEncapsulatedCommand_d :
    356                       /* Add code to transfer Request and Acknowledgement */
    357                       *pSize=0;
   \                     ??USB_CDC_OtherRequests_1: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x8038             STRH     R0,[R7, #+0]
    358                break;
   \   0000004A   0xE061             B.N      ??USB_CDC_OtherRequests_11
    359                case gUSB_CDC_ClassRequest_GetEncapsulatedResponse_d :
    360                       /* Add code for handling Transfer Response/Requests and Notification        */
    361                       *pSize=0;
   \                     ??USB_CDC_OtherRequests_2: (+1)
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x8038             STRH     R0,[R7, #+0]
    362                break;
   \   00000050   0xE05E             B.N      ??USB_CDC_OtherRequests_11
    363                case gUSB_CDC_ClassRequest_SetCommFeature_d :
    364                       *pData = (uint8_t*)setupPacket + gUsbSetupPacketSize_d; 
   \                     ??USB_CDC_OtherRequests_3: (+1)
   \   00000052   0xF115 0x0008      ADDS     R0,R5,#+8
   \   00000056   0x6030             STR      R0,[R6, #+0]
    365                       status = USB_Class_CDC_PSTN_SetCommFeature(controllerId,setupPacket, pData, pSize);
   \   00000058   0x003B             MOVS     R3,R7
   \   0000005A   0x0032             MOVS     R2,R6
   \   0000005C   0x0029             MOVS     R1,R5
   \   0000005E   0x0020             MOVS     R0,R4
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0x.... 0x....      BL       USB_Class_CDC_PSTN_SetCommFeature
   \   00000066   0x4680             MOV      R8,R0
    366                       
    367                break;
   \   00000068   0xE052             B.N      ??USB_CDC_OtherRequests_11
    368                case gUSB_CDC_ClassRequest_GetCommFeature_d :
    369                       status = USB_Class_CDC_PSTN_GetCommFeature(controllerId, setupPacket, pData, pSize);
   \                     ??USB_CDC_OtherRequests_4: (+1)
   \   0000006A   0x003B             MOVS     R3,R7
   \   0000006C   0x0032             MOVS     R2,R6
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0x.... 0x....      BL       USB_Class_CDC_PSTN_GetCommFeature
   \   00000078   0x4680             MOV      R8,R0
    370                break;
   \   0000007A   0xE049             B.N      ??USB_CDC_OtherRequests_11
    371                case gUSB_CDC_ClassRequest_ClearCommFeature_d : 
    372                       {
    373                         uint8_t data[2] = {0,0};
   \                     ??USB_CDC_OtherRequests_5: (+1)
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    374                         *pData = data;
   \   00000082   0xA800             ADD      R0,SP,#+0
   \   00000084   0x6030             STR      R0,[R6, #+0]
    375                         status = USB_Class_CDC_PSTN_SetCommFeature(controllerId,setupPacket, pData, pSize);
   \   00000086   0x003B             MOVS     R3,R7
   \   00000088   0x0032             MOVS     R2,R6
   \   0000008A   0x0029             MOVS     R1,R5
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x.... 0x....      BL       USB_Class_CDC_PSTN_SetCommFeature
   \   00000094   0x4680             MOV      R8,R0
    376                       }
    377                break;
   \   00000096   0xE03B             B.N      ??USB_CDC_OtherRequests_11
    378                case gUSB_CDC_ClassRequest_GetLineCoding_d :
    379                       status = USB_Class_CDC_PSTN_GetLineCoding(controllerId, setupPacket, pData, pSize);
   \                     ??USB_CDC_OtherRequests_7: (+1)
   \   00000098   0x003B             MOVS     R3,R7
   \   0000009A   0x0032             MOVS     R2,R6
   \   0000009C   0x0029             MOVS     R1,R5
   \   0000009E   0x0020             MOVS     R0,R4
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x.... 0x....      BL       USB_Class_CDC_PSTN_GetLineCoding
   \   000000A6   0x4680             MOV      R8,R0
    380                break;
   \   000000A8   0xE032             B.N      ??USB_CDC_OtherRequests_11
    381                case gUSB_CDC_ClassRequest_SetLineCoding_d :
    382                       status = USB_Class_CDC_PSTN_SetLineCoding(controllerId, setupPacket, pData, pSize);
   \                     ??USB_CDC_OtherRequests_6: (+1)
   \   000000AA   0x003B             MOVS     R3,R7
   \   000000AC   0x0032             MOVS     R2,R6
   \   000000AE   0x0029             MOVS     R1,R5
   \   000000B0   0x0020             MOVS     R0,R4
   \   000000B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   0x.... 0x....      BL       USB_Class_CDC_PSTN_SetLineCoding
   \   000000B8   0x4680             MOV      R8,R0
    383                break;
   \   000000BA   0xE029             B.N      ??USB_CDC_OtherRequests_11
    384                case gUSB_CDC_ClassRequest_SetControlLineState_d :
    385                       status = USB_Class_CDC_PSTN_SetCtrlLineState(controllerId, setupPacket, pData, pSize);
   \                     ??USB_CDC_OtherRequests_8: (+1)
   \   000000BC   0x003B             MOVS     R3,R7
   \   000000BE   0x0032             MOVS     R2,R6
   \   000000C0   0x0029             MOVS     R1,R5
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C6   0x.... 0x....      BL       USB_Class_CDC_PSTN_SetCtrlLineState
   \   000000CA   0x4680             MOV      R8,R0
    386                break;
   \   000000CC   0xE020             B.N      ??USB_CDC_OtherRequests_11
    387                case gUSB_CDC_ClassRequest_SendBreak_d :
    388                       status = USB_Class_CDC_PSTN_SendBreak(controllerId, setupPacket, pData, pSize);
   \                     ??USB_CDC_OtherRequests_9: (+1)
   \   000000CE   0x003B             MOVS     R3,R7
   \   000000D0   0x0032             MOVS     R2,R6
   \   000000D2   0x0029             MOVS     R1,R5
   \   000000D4   0x0020             MOVS     R0,R4
   \   000000D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D8   0x.... 0x....      BL       USB_Class_CDC_PSTN_SendBreak
   \   000000DC   0x4680             MOV      R8,R0
    389                break;
   \   000000DE   0xE017             B.N      ??USB_CDC_OtherRequests_11
    390                default:  
    391                       *pSize=0;
   \                     ??USB_CDC_OtherRequests_10: (+1)
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x8038             STRH     R0,[R7, #+0]
   \   000000E4   0xE014             B.N      ??USB_CDC_OtherRequests_11
    392              }
    393            }
    394            else if((setupPacket->requestType & gUsbRequestClassMask_d) == gUsbRequestClass_Vendor_d)
   \                     ??USB_CDC_OtherRequests_0: (+1)
   \   000000E6   0x7828             LDRB     R0,[R5, #+0]
   \   000000E8   0xF010 0x0060      ANDS     R0,R0,#0x60
   \   000000EC   0x2840             CMP      R0,#+64
   \   000000EE   0xD10F             BNE.N    ??USB_CDC_OtherRequests_11
    395            {
    396              /* vendor specific request  */
    397              pfusbReqHandler_t       pfVendorReqCallback;
    398              pfVendorReqCallback =  gpaUsbClassDescriptor[controllerId]->pfVendorReqHandler;
   \   000000F0   0x....             LDR.N    R0,??DataTable7
   \   000000F2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000F8   0x6880             LDR      R0,[R0, #+8]
   \   000000FA   0x4681             MOV      R9,R0
    399              if(pfVendorReqCallback != NULL)
   \   000000FC   0x4648             MOV      R0,R9
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD006             BEQ.N    ??USB_CDC_OtherRequests_11
    400              {
    401                status = pfVendorReqCallback(controllerId, setupPacket, pData, pSize);
   \   00000102   0x003B             MOVS     R3,R7
   \   00000104   0x0032             MOVS     R2,R6
   \   00000106   0x0029             MOVS     R1,R5
   \   00000108   0x0020             MOVS     R0,R4
   \   0000010A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010C   0x47C8             BLX      R9
   \   0000010E   0x4680             MOV      R8,R0
    402              }   
    403            }
    404            return status;
   \                     ??USB_CDC_OtherRequests_11: (+1)
   \   00000110   0x4640             MOV      R0,R8
   \   00000112   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000114   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    405          }
    406          
    407          
    408          /*****************************************************************************
    409           * Global Functions
    410           *****************************************************************************/
    411          /**************************************************************************//*!
    412           *
    413           * @name  USB_Class_CDC_Init
    414           *
    415           * @brief The funtion initializes the Device and Controller layer
    416           *
    417           * @param controller_ID:        Controller ID
    418           * @param cdc_class_callback:   CDC Class Callback
    419           * @param vendor_req_callback:  vendor specific class request callback
    420           * @param param_callback:       PSTN Callback
    421           *
    422           * @return status
    423           *         gUsbErr_NoError_c           : When Successfull
    424           *         Others           : Errors
    425           ******************************************************************************
    426           * This function initializes the CDC Class layer and layers it is dependent upon
    427           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    428          uint8_t USB_Class_CDC_Init 
    429          (
    430              uint8_t    controllerId                /* [IN] Controller ID */
    431          )
    432          {
   \                     USB_Class_CDC_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    433                  
    434            uint8_t count = gpaUsbClassDescriptor[controllerId]->numNonControlEp;
   \   00000004   0x....             LDR.N    R0,??DataTable7
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000000C   0xF890 0x5029      LDRB     R5,[R0, #+41]
    435            /* Initialize the device layer*/
    436            uint8_t status = USB_DeviceInit(controllerId, (uint8_t)(count+1));
   \   00000010   0x1C69             ADDS     R1,R5,#+1
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       USB_DeviceInit
   \   0000001C   0x0006             MOVS     R6,R0
    437            /* +1 is for Control Endpoint */
    438            gDTEStatus = (uint8_t)gUninitialisedVal_d;
   \   0000001E   0x20FF             MOVS     R0,#+255
   \   00000020   0x....             LDR.N    R1,??DataTable7_7
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    439            gNotifyEndpoint = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable7_3
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    440            if(status == gUsbErr_NoError_c)
   \   0000002A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0x2E00             CMP      R6,#+0
   \   0000002E   0xD106             BNE.N    ??USB_Class_CDC_Init_0
    441            {
    442              /* Initialize the generic class functions */
    443              status = USB_ClassInit(controllerId, USB_CDC_ClassEvent, USB_CDC_OtherRequests);
   \   00000030   0x....             LDR.N    R2,??DataTable7_8
   \   00000032   0x....             LDR.N    R1,??DataTable7_9
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       USB_ClassInit
   \   0000003C   0x0006             MOVS     R6,R0
    444            }
    445            return status;
   \                     ??USB_Class_CDC_Init_0: (+1)
   \   0000003E   0x0030             MOVS     R0,R6
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0xBD70             POP      {R4-R6,PC}       ;; return
    446          }
    447          
    448          /**************************************************************************//*!
    449           *
    450           * @name  USB_Class_CDC_DeInit
    451           *
    452           * @brief   The funtion de-initializes the Device and Controller layer
    453           *
    454           * @param   controller_ID               : Controller ID
    455           *
    456           * @return status:
    457           *                        gUsbErr_NoError_c        : When Successfull
    458           *                        Others        : When Error
    459           *
    460           ******************************************************************************
    461           *This function de-initializes the CDC Class layer
    462           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    463          uint8_t USB_Class_CDC_DeInit 
    464          (
    465            uint8_t controllerId              /* [IN] Controller ID */
    466          ) 
    467          {
   \                     USB_Class_CDC_DeInit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    468            uint8_t status;
    469            status = USB_ClassDeInit(controllerId); 
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       USB_ClassDeInit
   \   0000000C   0x0005             MOVS     R5,R0
    470            return status;
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    471          }
    472          
    473          
    474          /******************************************************************************
    475           *
    476           * @name  USB_Class_CDC_SetDicInServiceCallback
    477           *
    478           * @brief 
    479             
    480           ******************************************************************************/
    481           

   \                                 In section .text, align 2, keep-with-next
    482           void USB_Class_CDC_SetDicInServiceCallback(void (*pf)(usbDeviceEvent_t* event))
    483           {
    484             pfCDCDicInServiceCallBack = pf;
   \                     USB_Class_CDC_SetDicInServiceCallback: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable7_1
   \   00000002   0x6008             STR      R0,[R1, #+0]
    485           }
   \   00000004   0x4770             BX       LR               ;; return
    486           /******************************************************************************
    487           *
    488           * @name  USB_Class_CDC_SetDicOutServiceCallback
    489           *
    490           * @brief 
    491             
    492           ******************************************************************************/
    493          

   \                                 In section .text, align 2, keep-with-next
    494           void USB_Class_CDC_SetDicOutServiceCallback(void (*pf)(usbDeviceEvent_t* event))
    495           {
    496             pfCDCDicOutServiceCallBack = pf;
   \                     USB_Class_CDC_SetDicOutServiceCallback: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable7_2
   \   00000002   0x6008             STR      R0,[R1, #+0]
    497           }
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     gpaUsbClassDescriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     pfCDCDicInServiceCallBack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     pfCDCDicOutServiceCallBack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     gNotifyEndpoint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     USB_Class_CDC_ServiceCicNotify

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     USB_Class_CDC_ServiceDicBulkOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     USB_Class_CDC_ServiceDicBulkIn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     gDTEStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     USB_CDC_OtherRequests

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     USB_CDC_ClassEvent

   \                                 In section .rodata, align 2
   \   00000000   0x00 0x00          DC8 0, 0
    498          
    499          /* EOF */
    500          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   USB_CDC_ClassEvent
        40   -> USB_DeviceDeinitEndpoint
        40   -> USB_DeviceInitEndpoint
        40   -> USB_DeviceRegisterService
        40   -> USB_DeviceSetStatus
        40   -> USB_IsrEvent
      32   USB_CDC_OtherRequests
        32   -- Indirect call
        32   -> USB_Class_CDC_PSTN_GetCommFeature
        32   -> USB_Class_CDC_PSTN_GetLineCoding
        32   -> USB_Class_CDC_PSTN_SendBreak
        32   -> USB_Class_CDC_PSTN_SetCommFeature
        32   -> USB_Class_CDC_PSTN_SetCtrlLineState
        32   -> USB_Class_CDC_PSTN_SetLineCoding
      16   USB_Class_CDC_DeInit
        16   -> USB_ClassDeInit
      16   USB_Class_CDC_Init
        16   -> USB_ClassInit
        16   -> USB_DeviceInit
      32   USB_Class_CDC_ServiceCicNotify
        32   -> USB_IsrEvent
      32   USB_Class_CDC_ServiceDicBulkIn
        32   -- Indirect call
        32   -> USB_IsrEvent
      32   USB_Class_CDC_ServiceDicBulkOut
        32   -- Indirect call
        32   -> USB_IsrEvent
       0   USB_Class_CDC_SetDicInServiceCallback
       0   USB_Class_CDC_SetDicOutServiceCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       2  ?_0
     274  USB_CDC_ClassEvent
     280  USB_CDC_OtherRequests
      20  USB_Class_CDC_DeInit
      68  USB_Class_CDC_Init
      84  USB_Class_CDC_ServiceCicNotify
     100  USB_Class_CDC_ServiceDicBulkIn
     100  USB_Class_CDC_ServiceDicBulkOut
       6  USB_Class_CDC_SetDicInServiceCallback
       6  USB_Class_CDC_SetDicOutServiceCallback
       4  pfCDCDicInServiceCallBack
       4  pfCDCDicOutServiceCallBack

 
   8 bytes in section .bss
   2 bytes in section .rodata
 978 bytes in section .text
 
 978 bytes of CODE  memory
   2 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
