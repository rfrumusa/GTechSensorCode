###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        02/Sep/2018  13:33:21
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\usb_descriptor.c
#    Command line =  
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\usb_descriptor.c" -D IAR
#        --preprocess "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code
#        Sequential ADC Reads\Shanit Origional Code\Connectivity
#        Test\Debug\List\" -lC "F:\Guardrail Work\Sensor Code\Git Repo\Sensor
#        Code Sequential ADC Reads\Shanit Origional Code\Connectivity
#        Test\Debug\List\" -lB "F:\Guardrail Work\Sensor Code\Git Repo\Sensor
#        Code Sequential ADC Reads\Shanit Origional Code\Connectivity
#        Test\Debug\List\" --diag_suppress
#        Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Environment\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Interface\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\Generic Services\Interface\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Uart\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\CDC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Sys Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\LPM\" -On
#    List file    =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\Debug\List\usb_descriptor.lst
#    Object file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\Debug\Obj\usb_descriptor.o
#
###############################################################################

F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional Code\Connectivity Test\PLM\Source\USB\APP\Descriptor\usb_descriptor.c
      1          /******************************************************************************
      2           * This is the generic descriptor file
      3           * Freescale Semiconductor Inc.
      4           * (c) Copyright 2012 Freescale Semiconductor, Inc.
      5           * ALL RIGHTS RESERVED.
      6           *
      7           *****************************************************************************/
      8          
      9          /******************************************************************************
     10           * Includes
     11           *****************************************************************************/
     12          #include "EmbeddedTypes.h"
     13          #include "usb_class.h"
     14          #include "usb_descriptor.h"
     15          #include "USB.h"
     16          #include "USB_Configuration.h"
     17          
     18           #if gUsbIncluded_d
     19          /*****************************************************************************
     20           * Constant and Macro's
     21           *****************************************************************************/
     22          
     23          
     24          /****************************************************************************
     25           * Global Variables
     26           ****************************************************************************/
     27          
     28          /*****************************************************************************
     29           * Local Types - None
     30           *****************************************************************************/
     31          
     32          /*****************************************************************************
     33           * Local Functions Prototypes
     34           *****************************************************************************/
     35          
     36          /*****************************************************************************
     37           * Local Variables - None
     38           *****************************************************************************/
     39          
     40           /*****************************************************************************
     41           * Local Functions - None
     42           *****************************************************************************/
     43          
     44          /*****************************************************************************
     45           * Global Functions
     46           *****************************************************************************/
     47          
     48          /*****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     49          uint8_t USB_Desc_GetDescriptor(
     50               uint8_t controllerId,   /* [IN]  Controller ID */
     51               uint8_t type,            /* [IN]  Type of descriptor requested */
     52               uint8_t strNum,         /* [IN]  String index for string descriptor */
     53               uint16_t index,          /* [IN]  String descriptor language Id */
     54               uint8_t* *pDescriptor, /* [OUT] Output descriptor pointer */
     55               usbPacketSize_t *pSize   /* [OUT] Size of descriptor returned */
     56          )
     57          {
   \                     USB_Desc_GetDescriptor: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8030      LDR      R8,[SP, #+48]
   \   00000012   0xF8DD 0x9034      LDR      R9,[SP, #+52]
     58              uint8_t status = gUsbErr_InvalidReqType_c;
   \   00000016   0xF05F 0x0ACD      MOVS     R10,#+205
     59              pf_USB_Desc_GetDescriptor_t pfGD;
     60              pfGD = gpaUsbClassDescriptor[controllerId]->pfUSB_Desc_GetDescriptor;
   \   0000001A   0x....             LDR.N    R0,??DataTable5
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000022   0x6900             LDR      R0,[R0, #+16]
   \   00000024   0x4683             MOV      R11,R0
     61              if(pfGD != NULL)
   \   00000026   0x4658             MOV      R0,R11
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD00D             BEQ.N    ??USB_Desc_GetDescriptor_0
     62              {
     63                 status = (*pfGD)(controllerId,type,strNum,index,pDescriptor,pSize);  
   \   0000002C   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   00000030   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000034   0x003B             MOVS     R3,R7
   \   00000036   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000038   0x0032             MOVS     R2,R6
   \   0000003A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003C   0x0029             MOVS     R1,R5
   \   0000003E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x47D8             BLX      R11
   \   00000046   0x4682             MOV      R10,R0
     64              }
     65               return status; 
   \                     ??USB_Desc_GetDescriptor_0: (+1)
   \   00000048   0x4650             MOV      R0,R10
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
     66              
     67          }
     68          
     69          /*****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     70          uint8_t USB_Desc_GetInterface
     71          (
     72            uint8_t controllerId,     /* [IN] Controller ID */
     73            uint8_t interface,         /* [IN] Interface number */
     74            uint8_t* altInterface  /* [OUT] Output alternate interface */
     75          )
     76          {
   \                     USB_Desc_GetInterface: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     77            uint8_t status = gUsbErr_InvalidReqType_c;
   \   0000000A   0x27CD             MOVS     R7,#+205
     78            pf_USB_Desc_GetInterface_t pfGI;
     79            pfGI = gpaUsbClassDescriptor[controllerId]->pf_USB_Desc_GetInterface;
   \   0000000C   0x....             LDR.N    R0,??DataTable5
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000014   0x6940             LDR      R0,[R0, #+20]
   \   00000016   0x4680             MOV      R8,R0
     80            if(pfGI != NULL)
   \   00000018   0x4640             MOV      R0,R8
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD006             BEQ.N    ??USB_Desc_GetInterface_0
     81            {
     82              status = (*pfGI)(controllerId,interface,altInterface);
   \   0000001E   0x0032             MOVS     R2,R6
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x47C0             BLX      R8
   \   0000002A   0x0007             MOVS     R7,R0
     83            }
     84            return status;
   \                     ??USB_Desc_GetInterface_0: (+1)
   \   0000002C   0x0038             MOVS     R0,R7
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     85          }
     86          
     87          /*****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     88          uint8_t USB_Desc_SetInterface
     89          (
     90            uint8_t controllerId, /* [IN] Controller ID */
     91            uint8_t interface,     /* [IN] Interface number */
     92            uint8_t altInterface  /* [IN] Input alternate interface */
     93          )
     94          {
   \                     USB_Desc_SetInterface: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     95            uint8_t status = gUsbErr_InvalidReqType_c;
   \   0000000A   0x27CD             MOVS     R7,#+205
     96            pf_USB_Desc_SetInterface_t pfSI;
     97            pfSI = gpaUsbClassDescriptor[controllerId]->pf_USB_Desc_SetInterface;
   \   0000000C   0x....             LDR.N    R0,??DataTable5
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000014   0x6980             LDR      R0,[R0, #+24]
   \   00000016   0x4680             MOV      R8,R0
     98            if(pfSI != NULL)
   \   00000018   0x4640             MOV      R0,R8
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD007             BEQ.N    ??USB_Desc_SetInterface_0
     99            {
    100              status = (*pfSI)(controllerId,interface,altInterface);
   \   0000001E   0x0032             MOVS     R2,R6
   \   00000020   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x47C0             BLX      R8
   \   0000002C   0x0007             MOVS     R7,R0
    101            }
    102            /* if interface valid */
    103            return status;
   \                     ??USB_Desc_SetInterface_0: (+1)
   \   0000002E   0x0038             MOVS     R0,R7
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    104          }
    105          
    106          /*****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          bool_t USB_Desc_ValidConfiguration
    108          (
    109            uint8_t controllerId,/*[IN] Controller ID */
    110            uint16_t configVal   /*[IN] Configuration value */
    111          )
    112          {
   \                     USB_Desc_ValidConfiguration: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    113              
    114            bool_t status = FALSE;
   \   00000006   0x2600             MOVS     R6,#+0
    115            pf_USB_Desc_ValidConfiguration_t pfVC;
    116            pfVC = gpaUsbClassDescriptor[controllerId]->pf_USB_Desc_ValidConfiguration;
   \   00000008   0x....             LDR.N    R0,??DataTable5
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000010   0x69C0             LDR      R0,[R0, #+28]
   \   00000012   0x0007             MOVS     R7,R0
    117            if(pfVC != NULL)
   \   00000014   0x0038             MOVS     R0,R7
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD005             BEQ.N    ??USB_Desc_ValidConfiguration_0
    118            {
    119              status = (*pfVC)(controllerId,configVal); 
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x47B8             BLX      R7
   \   00000024   0x0006             MOVS     R6,R0
    120            }
    121            return status;  
   \                     ??USB_Desc_ValidConfiguration_0: (+1)
   \   00000026   0x0030             MOVS     R0,R6
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    122          }
    123          
    124          /*****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    125          bool_t USB_Desc_ValidInterface
    126          (
    127            uint8_t controllerId, /*[IN] Controller ID */
    128            uint8_t interface      /*[IN] Target interface */
    129          )
    130          {
   \                     USB_Desc_ValidInterface: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    131            bool_t status = FALSE;
   \   00000006   0x2600             MOVS     R6,#+0
    132            pf_USB_Desc_ValidInterface_t pfVI;
    133            pfVI = gpaUsbClassDescriptor[controllerId]->pf_USB_Desc_ValidInterface;
   \   00000008   0x....             LDR.N    R0,??DataTable5
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000010   0x6A00             LDR      R0,[R0, #+32]
   \   00000012   0x0007             MOVS     R7,R0
    134            if(pfVI != NULL)
   \   00000014   0x0038             MOVS     R0,R7
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD005             BEQ.N    ??USB_Desc_ValidInterface_0
    135            {
    136              status = (*pfVI)(controllerId,interface);
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x47B8             BLX      R7
   \   00000024   0x0006             MOVS     R6,R0
    137            }
    138            return status;
   \                     ??USB_Desc_ValidInterface_0: (+1)
   \   00000026   0x0030             MOVS     R0,R6
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    139          }
    140          
    141          /*****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    142          bool_t USB_Desc_RemoteWakeup
    143          (
    144            uint8_t controllerId      /* [IN] Controller ID */
    145          )
    146          {
   \                     USB_Desc_RemoteWakeup: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    147            bool_t status = FALSE;
   \   00000004   0x2500             MOVS     R5,#+0
    148            pf_USB_Desc_RemoteWakeup_t  pfRW;
    149            pfRW = gpaUsbClassDescriptor[controllerId]->pf_USB_Desc_RemoteWakeup;
   \   00000006   0x....             LDR.N    R0,??DataTable5
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000000E   0x6A40             LDR      R0,[R0, #+36]
   \   00000010   0x0006             MOVS     R6,R0
    150            if(pfRW != NULL)
   \   00000012   0x0030             MOVS     R0,R6
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD003             BEQ.N    ??USB_Desc_RemoteWakeup_0
    151            {
    152              status = (*pfRW)(controllerId);
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x47B0             BLX      R6
   \   0000001E   0x0005             MOVS     R5,R0
    153            }
    154            return status;
   \                     ??USB_Desc_RemoteWakeup_0: (+1)
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
    155          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     gpaUsbClassDescriptor
    156          
    157          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   USB_Desc_GetDescriptor
        48   -- Indirect call
      24   USB_Desc_GetInterface
        24   -- Indirect call
      16   USB_Desc_RemoteWakeup
        16   -- Indirect call
      24   USB_Desc_SetInterface
        24   -- Indirect call
      24   USB_Desc_ValidConfiguration
        24   -- Indirect call
      24   USB_Desc_ValidInterface
        24   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
      80  USB_Desc_GetDescriptor
      52  USB_Desc_GetInterface
      38  USB_Desc_RemoteWakeup
      54  USB_Desc_SetInterface
      44  USB_Desc_ValidConfiguration
      44  USB_Desc_ValidInterface

 
 316 bytes in section .text
 
 316 bytes of CODE memory

Errors: none
Warnings: none
