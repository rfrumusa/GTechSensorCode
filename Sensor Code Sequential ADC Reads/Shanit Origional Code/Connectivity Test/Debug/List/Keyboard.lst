###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        02/Sep/2018  14:19:38
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Keyboard\Keyboard.c
#    Command line =  
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Keyboard\Keyboard.c" -D IAR --preprocess "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\Debug\List\" -lC "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\Debug\List\" -lB "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\Debug\List\" --diag_suppress
#        Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Environment\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Interface\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\Generic Services\Interface\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Uart\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\CDC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Sys Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\LPM\" -On
#    List file    =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\Keyboard.lst
#    Object file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\Obj\Keyboard.o
#
###############################################################################

F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional Code\Connectivity Test\PLM\Source\Keyboard\Keyboard.c
      1          /******************************************************************************
      2           * Source file for Keyboard driver.
      3           * 
      4           * Freescale Semiconductor Inc.
      5           * (c) Copyright 2004-2011 Freescale Semiconductor, Inc.
      6           * ALL RIGHTS RESERVED.
      7           *
      8          *******************************************************************************
      9           *
     10           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
     11           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
     12           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
     13           * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
     14           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
     15           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
     16           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
     17           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     18           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
     19           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
     20           * THE POSSIBILITY OF SUCH DAMAGE.
     21           *
     22          ***************************************************************************//*!
     23          ******************************************************************************/
     24          
     25          #include "Keyboard.h"
     26          
     27          /******************************************************************************
     28           *******************************************************************************
     29           * Private macros
     30           *******************************************************************************
     31           ******************************************************************************/
     32          
     33          /******************************************************************************
     34           *******************************************************************************
     35           * Private type definitions
     36           *******************************************************************************
     37           ******************************************************************************/
     38          
     39          /******************************************************************************
     40           *******************************************************************************
     41           * Public memory definitions
     42           *******************************************************************************
     43           ******************************************************************************/
     44          
     45          
     46          
     47          /******************************************************************************
     48           *******************************************************************************
     49           * Private memory definitions
     50           *******************************************************************************
     51           ******************************************************************************/
     52          
     53          /******************************************************************************
     54           *******************************************************************************
     55           * Private function prototypes
     56           *******************************************************************************
     57           ******************************************************************************/
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void KeyboardInit (void)
     60          {
   \                     KeyboardInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     61            gKeyboard_ClkGatingReg_c |= gKeyboard_ClkGatingBit_c;
   \   00000002   0x....             LDR.N    R0,??DataTable1  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000000A   0x....             LDR.N    R1,??DataTable1  ;; 0x40048038
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     62            gKeyboard_Switch1PinCtrlReg_c =  PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_MUX(gSwitch_PinCtrlAltFunc_c) | PORT_PCR_IRQC(10);
   \   0000000E   0x....             LDR.N    R0,??DataTable1_1  ;; 0xa0103
   \   00000010   0x....             LDR.N    R1,??DataTable1_2  ;; 0x4004b010
   \   00000012   0x6008             STR      R0,[R1, #+0]
     63            gKeyboard_Switch2PinCtrlReg_c =  PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_MUX(gSwitch_PinCtrlAltFunc_c) | PORT_PCR_IRQC(10);
   \   00000014   0x....             LDR.N    R0,??DataTable1_1  ;; 0xa0103
   \   00000016   0x....             LDR.N    R1,??DataTable1_3  ;; 0x4004b014
   \   00000018   0x6008             STR      R0,[R1, #+0]
     64            gKeyboard_Switch3PinCtrlReg_c =  PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_MUX(gSwitch_PinCtrlAltFunc_c) | PORT_PCR_IRQC(10);
   \   0000001A   0x....             LDR.N    R0,??DataTable1_1  ;; 0xa0103
   \   0000001C   0x....             LDR.N    R1,??DataTable1_4  ;; 0x4004b018
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     65            gKeyboard_Switch4PinCtrlReg_c =  PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_MUX(gSwitch_PinCtrlAltFunc_c) | PORT_PCR_IRQC(10);
   \   00000020   0x....             LDR.N    R0,??DataTable1_1  ;; 0xa0103
   \   00000022   0x....             LDR.N    R1,??DataTable1_5  ;; 0x4004b01c
   \   00000024   0x6008             STR      R0,[R1, #+0]
     66            NVIC_EnableIRQ(gKeyboard_Irq_Number);
   \   00000026   0x203D             MOVS     R0,#+61
   \   00000028   0x.... 0x....      BL       NVIC_EnableIRQ
     67          
     68          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
     69          
     70          /******************************************************************************
     71           *******************************************************************************
     72           * Private type definitions
     73           *******************************************************************************
     74           ******************************************************************************/
     75          
     76          /******************************************************************************
     77           *******************************************************************************
     78           * Private Memory Declarations
     79           *******************************************************************************
     80           ******************************************************************************/
     81          
     82          
     83          /******************************************************************************
     84           ******************************************************************************
     85           * Public functions
     86           ******************************************************************************
     87           *****************************************************************************/
     88          
     89           /******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     90          void Switch_Press_ISR(void)
     91          {
     92             if (PORT_PCR_ISF_MASK & gKeyboard_Switch1PinCtrlReg_c)
   \                     Switch_Press_ISR: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1_2  ;; 0x4004b010
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x01C0             LSLS     R0,R0,#+7
   \   00000006   0xD505             BPL.N    ??Switch_Press_ISR_0
     93             {     
     94               Led4Toggle();      
   \   00000008   0x....             LDR.N    R0,??DataTable1_6  ;; 0x400ff0cc
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000010   0x....             LDR.N    R1,??DataTable1_6  ;; 0x400ff0cc
   \   00000012   0x6008             STR      R0,[R1, #+0]
     95             }  
     96             if (gKeyboard_Switch2PinCtrlReg_c & PORT_PCR_ISF_MASK)
   \                     ??Switch_Press_ISR_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable1_3  ;; 0x4004b014
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x01C0             LSLS     R0,R0,#+7
   \   0000001A   0xD505             BPL.N    ??Switch_Press_ISR_1
     97             {    
     98               Led3Toggle();      
   \   0000001C   0x....             LDR.N    R0,??DataTable1_6  ;; 0x400ff0cc
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000024   0x....             LDR.N    R1,??DataTable1_6  ;; 0x400ff0cc
   \   00000026   0x6008             STR      R0,[R1, #+0]
     99             }  
    100              if (gKeyboard_Switch3PinCtrlReg_c & PORT_PCR_ISF_MASK)
   \                     ??Switch_Press_ISR_1: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable1_4  ;; 0x4004b018
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x01C0             LSLS     R0,R0,#+7
   \   0000002E   0xD505             BPL.N    ??Switch_Press_ISR_2
    101             {    
    102               Led2Toggle();      
   \   00000030   0x....             LDR.N    R0,??DataTable1_6  ;; 0x400ff0cc
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000038   0x....             LDR.N    R1,??DataTable1_6  ;; 0x400ff0cc
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    103             }  
    104              if (gKeyboard_Switch4PinCtrlReg_c & PORT_PCR_ISF_MASK)
   \                     ??Switch_Press_ISR_2: (+1)
   \   0000003C   0x....             LDR.N    R0,??DataTable1_5  ;; 0x4004b01c
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x01C0             LSLS     R0,R0,#+7
   \   00000042   0xD505             BPL.N    ??Switch_Press_ISR_3
    105             {    
    106               Led1Toggle();      
   \   00000044   0x....             LDR.N    R0,??DataTable1_6  ;; 0x400ff0cc
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000004C   0x....             LDR.N    R1,??DataTable1_6  ;; 0x400ff0cc
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    107             }  
    108             
    109             PORTC_ISFR |= gLED_Led1Pin_c | gLED_Led2Pin_c | gLED_Led3Pin_c | gLED_Led4Pin_c; 
   \                     ??Switch_Press_ISR_3: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable1_7  ;; 0x4004b0a0
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF050 0x00F0      ORRS     R0,R0,#0xF0
   \   00000058   0x....             LDR.N    R1,??DataTable1_7  ;; 0x4004b0a0
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    110          }
   \   0000005C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x000A0103         DC32     0xa0103

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x4004B014         DC32     0x4004b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x4004B018         DC32     0x4004b018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x4004B01C         DC32     0x4004b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x400FF0CC         DC32     0x400ff0cc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x4004B0A0         DC32     0x4004b0a0
    111          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   KeyboardInit
         8   -> NVIC_EnableIRQ
       0   Switch_Press_ISR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
      46  KeyboardInit
      94  Switch_Press_ISR

 
 172 bytes in section .text
 
 172 bytes of CODE memory

Errors: none
Warnings: none
