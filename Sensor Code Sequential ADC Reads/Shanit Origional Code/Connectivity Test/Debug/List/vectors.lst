###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        20/Mar/2018  09:41:55
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\Sys
#        Common\vectors.c
#    Command line =  
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\Sys
#        Common\vectors.c" -D IAR --preprocess "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\Debug\List\" -lC "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\Debug\List\" -lB "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\Debug\List\" --diag_suppress
#        Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Environment\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Generic
#        Services\Interface\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Uart\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\CDC\" -I "C:\Users\rfrum\OneDrive\2018 Spring
#        Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "C:\Users\rfrum\OneDrive\2018
#        Spring Semester\Senior Design\Sensor Code\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\Sys Common\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -On
#    List file    =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\List\vectors.lst
#    Object file  =  
#        C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\Debug\Obj\vectors.o
#
###############################################################################

C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor Code\Shanit Origional Code\Connectivity Test\PLM\Source\Sys Common\vectors.c
      1          /******************************************************************************
      2           * Filename: vectors.c
      3           *
      4           * Description: Interrupt vector table for ARM CORTEX-M4 processor
      5           *
      6           * Copyright (c) 2012, Freescale Semiconductor, Inc. All rights reserved.
      7           *
      8           ******************************************************************************
      9           *
     10           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
     11           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     12           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     13           * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     14           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     15           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     16           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     17           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     18           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
     19           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
     20           * THE POSSIBILITY OF SUCH DAMAGE.
     21           *
     22           *****************************************************************************/
     23          
     24          #include "PortConfig.h"
     25          #include "vectors.h"
     26          #include "mcg.h"
     27          
     28          /******************************************************************************
     29           ******************************************************************************
     30           * User Interfaces
     31           ******************************************************************************
     32           ******************************************************************************/
     33          #include "ApplicationConf.h"
     34          #include "TMR_Interface.h"
     35          #include "Utilities_Interface.h"
     36          
     37          #if defined(__IAR_SYSTEMS_ICC__)
     38          #include "intrinsics.h"
     39          #endif
     40          
     41          #if defined(__IAR_SYSTEMS_ICC__)
     42          extern void __startup(void);
     43          #else
     44          extern void __thumb_startup(void);
     45          #endif
     46          
     47          extern void PHY_InterruptHandler( void );
     48          extern void Switch_Press_ISR(void);
     49          #if gUsbIncluded_d
     50          extern void USB_ISR(void);
     51          #endif
     52          /******************************************************************************
     53           ******************************************************************************
     54           * Public functions
     55           ******************************************************************************
     56           *****************************************************************************/
     57          
     58          /******************************************************************************
     59           * Name: VECT_NMIInterrupt
     60           * Description: NMI interrupt handler 
     61           * Parameter(s): -
     62           * Return: -
     63           ******************************************************************************/ 

   \                                 In section .text, align 2, keep-with-next
     64          void VECT_NMIInterrupt
     65          (
     66          		void
     67          ) 
     68          {	 
     69          	/* EMPTY IMPLEMENTATION */
     70          }
   \                     VECT_NMIInterrupt: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     71          
     72          /******************************************************************************
     73           * Name: VECT_DefaultISR
     74           * Description: default CPU interrupt handler 
     75           * Parameter(s): -
     76           * Return: -
     77           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     78          void VECT_DefaultISR
     79          (
     80          		void
     81          ) 
     82          {
     83          #ifdef NDEBUG
     84            asm("loop: BL loop");
     85          #else
     86            asm ("BKPT 255");
   \                     VECT_DefaultISR: (+1)
   \   00000000   0xBEFF             BKPT 255
     87          #endif
     88          }
   \   00000002   0x4770             BX       LR               ;; return
     89          
     90          /******************************************************************************
     91           * Name: VECT_HWfaultISR
     92           * Description: hardware fault interrupt handler 
     93           * Parameter(s): -
     94           * Return: -
     95           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     96          void VECT_HWfaultISR
     97          (
     98          		void
     99          ) 
    100          {   
    101          #ifdef NDEBUG
    102            asm("loop: BL loop");
    103          #else
    104            asm ("BKPT 255");
   \                     VECT_HWfaultISR: (+1)
   \   00000000   0xBEFF             BKPT 255
    105          #endif
    106          }
   \   00000002   0x4770             BX       LR               ;; return
    107          
    108          #if defined(__IAR_SYSTEMS_ICC__)
    109          #pragma location = ".intvec"

   \                                 In section .intvec, align 4
    110          const pfVectorEntry_t  __vector_table[] = 	
   \                     __vector_table:
   \   00000000   0x........         DC32 __BOOT_STACK_ADDRESS, __iar_program_start, VECT_NMIInterrupt
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 VECT_HWfaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000001C   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000002C   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000003C   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000004C   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000005C   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000006C   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000007C   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000008C   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000009C   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   000000AC   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   000000BC   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, Uart1Isr, Uart1ErrorIsr
   \              0x........   
   \              0x........   
   \              0x........   
   \   000000CC   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   000000DC   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \   000000E8   0x........         DC32 TMR_InterruptHandler, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \   000000F4   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, PIT_ISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000104   0x........         DC32 PIT_ISR, PIT_ISR, PIT_ISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000118   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000128   0x........         DC32 VECT_DefaultISR, VECT_DefaultISR, PHY_InterruptHandler
   \              0x........   
   \              0x........   
   \   00000134   0x........         DC32 Switch_Press_ISR, VECT_DefaultISR, VECT_DefaultISR
   \              0x........   
   \              0x........   
   \   00000140   0x........         DC32 VECT_DefaultISR
    111          {
    112          	(pfVectorEntry_t)__BOOT_STACK_ADDRESS,	/*	0x0000_0000	0		ARM core Initial Stack Pointer	*/
    113          	(pfVectorEntry_t)__iar_program_start,				/*	0x0000_0004	1		ARM core Initial Program Counter	*/
    114          #elif defined(__GNUC__)
    115          	const pfVectorEntry_t __vector_table[] __attribute__ ((section(".vectortable"))) =
    116          	{
    117          	  (pfVectorEntry_t)__SP_INIT,                     /* 0x00  0x00000000   -   ivINT_Initial_Stack_Pointer   */
    118          	  (pfVectorEntry_t)__thumb_startup,         /* 0x01  0x00000004   -   ivINT_Initial_Program_Counter  */
    119          #endif
    120          	
    121          /*********************************** MK21DN512 / MK21DX256 ***********************************************/
    122          #if defined (MCU_MK21DN512) || defined (MCU_MK21DX256)
    123            (pfVectorEntry_t)&VECT_NMIInterrupt,  /*  0x0000_0008  2    ARM core Non-maskable Interrupt (NMI)  */
    124            (pfVectorEntry_t)&VECT_HWfaultISR,  /*  0x0000_000C  3    ARM core Hard Fault  */
    125            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0010  4    ARM core MemManage Fault  */
    126            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0014  5    ARM core Bus Fault  */
    127            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0018  6    ARM core Usage Fault  */
    128            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_001C  7      */
    129            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0020  8      */
    130            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0024  9      */
    131            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0028  10      */
    132            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_002C  11    ARM core Supervisor call (SVCall)  */
    133            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0030  12    ARM core Debug Monitor  */
    134            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0034  13      */
    135            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0038  14    ARM core Pendable request for system service  */
    136            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_003C  15    ARM core System tick timer (SysTick)  */
    137            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0040  16  0  DMA DMA channel 0 transfer complete  */
    138            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0044  17  1  DMA DMA channel 1 transfer complete  */
    139            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0048  18  2  DMA DMA channel 2 transfer complete  */
    140            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_004C  19  3  DMA DMA channel 3 transfer complete  */
    141            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0050  20  4  DMA DMA channel 4 transfer complete  */
    142            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0054  21  5  DMA DMA channel 5 transfer complete  */
    143            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0058  22  6  DMA DMA channel 6 transfer complete  */
    144            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_005C  23  7  DMA DMA channel 7 transfer complete  */
    145            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0060  24  8  DMA DMA channel 8 transfer complete  */
    146            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0064  25  9  DMA DMA channel 9 transfer complete  */
    147            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0068  26  10  DMA DMA channel 10 transfer complete  */
    148            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_006C  27  11  DMA DMA channel 11 transfer complete  */
    149            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0070  28  12  DMA DMA channel 12 transfer complete  */
    150            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0074  29  13  DMA DMA channel 13 transfer complete  */
    151            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0078  30  14  DMA DMA channel 14 transfer complete  */
    152            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_007C  31  15  DMA DMA channel 15 transfer complete  */
    153            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0080  32  16  DMA DMA error interrupt channels 0-15  */
    154            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0084  33  17  MCM   */
    155            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0088  34  18  Flash memory Command complete  */
    156            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_008C  35  19  Flash memory Read collision  */
    157            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0090  36  20  Mode Controller Low-voltage detect  */
    158            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0094  37  21  LLWU Low Leakage Wakeup  */
    159            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0098  38  22  WDOG   */
    160            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_009C  39  23  RNG Randon Number Generator  */
    161            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00A0  40  24  I2C0   */
    162            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00A4  41  25  I2C1   */
    163            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00A8  42  26  SPI0 Single interrupt vector for all sources  */
    164            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00AC  43  27  SPI1 Single interrupt vector for all sources  */
    165            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00B0  44  28  I2S0 Transmit  */
    166            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00B4  45  29  I2S0 Receive  */
    167            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00B8  46  30  UART0 Single interrupt vector for UART LON  */
    168          #if (gUart1_Enabled_d == TRUE) && (gUart1_c == 0)
    169            (pfVectorEntry_t)Uart1Isr,        /*  0x0000_00BC  47  31  UART0 Single interrupt vector for UART status  */
    170            (pfVectorEntry_t)Uart1ErrorIsr,   /*  0x0000_00C0  48  32  UART0 Single interrupt vector for UART error  */
    171          #elif (gUart2_Enabled_d == TRUE) && (gUart2_c == 0)
    172            (pfVectorEntry_t)Uart2Isr,        /*  0x0000_00BC  47  31  UART0 Single interrupt vector for UART status  */
    173            (pfVectorEntry_t)Uart2ErrorIsr,   /*  0x0000_00C0  48  32  UART0 Single interrupt vector for UART error  */
    174          #else
    175            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00BC  47  31  UART0 Single interrupt vector for UART status  */
    176            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00C0  48  32  UART0 Single interrupt vector for UART error  */
    177          #endif
    178          #if (gUart1_Enabled_d == TRUE) && (gUart1_c == 1)
    179            (pfVectorEntry_t)Uart1Isr,        /*  0x0000_00C4  49  33  UART1 Single interrupt vector for UART status  */
    180            (pfVectorEntry_t)Uart1ErrorIsr,   /*  0x0000_00C8  50  34  UART1 Single interrupt vector for UART error  */
    181          #elif (gUart2_Enabled_d == TRUE) && (gUart2_c == 1)
    182            (pfVectorEntry_t)Uart2Isr,        /*  0x0000_00C4  49  33  UART1 Single interrupt vector for UART status  */
    183            (pfVectorEntry_t)Uart2ErrorIsr,   /*  0x0000_00C8  50  34  UART1 Single interrupt vector for UART error  */
    184          #else
    185            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00C4  49  33  UART1 Single interrupt vector for UART status  */
    186            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00C8  50  34  UART1 Single interrupt vector for UART error  */
    187          #endif
    188            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00CC  51  35  UART2 Single interrupt vector for UART status  */
    189            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00D0  52  36  UART2 Single interrupt vector for UART error  */
    190            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00D4  53  37  UART3 Single interrupt vector for UART status  */
    191            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00D8  54  38  UART3 Single interrupt vector for UART error  */
    192            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00DC  55  39  ADC0   */
    193            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00E0  56  40  CMP0   */
    194            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00E4  57  41  CMP1   */
    195          #if (gTMR_Enabled_d == TRUE)
    196            (pfVectorEntry_t)TMR_InterruptHandler, /*  0x0000_00E8  58  42  FTM0 Single interrupt vector for all sources  */
    197          #else
    198            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00E8  58  42  FTM0 Single interrupt vector for all sources  */
    199          #endif
    200          #if (gTMR2_Enabled == TRUE)
    201            (pfVectorEntry_t)TMR2_InterruptHandler,  /*  0x0000_00EC  59  43  FTM1 Single interrupt vector for all sources  */
    202          #else
    203            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00EC  59  43  FTM1 Single interrupt vector for all sources  */
    204          #endif
    205            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00F0  60  44  FTM2 Single interrupt vector for all sources  */
    206            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00F4  61  45  CMT   */
    207          #if (gLpmIncluded_d == 1)
    208            (pfVectorEntry_t)PWRLib_RTC_Isr, /*  0x0000_00F8  62  46  RTC Alarm interrupt  */
    209          #else
    210            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00F8  62  46  RTC Alarm interrupt  */
    211          #endif
    212            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_00FC  63  47  RTC Seconds interrupt  */
    213            (pfVectorEntry_t)PIT_ISR,  /*  0x0000_0100  64  48  PIT Channel 0  */
    214            (pfVectorEntry_t)PIT_ISR,  /*  0x0000_0104  65  49  PIT Channel 1  */
    215            (pfVectorEntry_t)PIT_ISR,  /*  0x0000_0108  66  50  PIT Channel 2  */
    216            (pfVectorEntry_t)PIT_ISR,  /*  0x0000_010C  67  51  PIT Channel 3  */
    217            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0110  68  52  PDB   */
    218          #if gUsbIncluded_d
    219            (pfVectorEntry_t)USB_ISR,          /*  0x0000_0114  69  53*/
    220          #else
    221            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0114  69  53  USB OTG   */
    222          #endif
    223            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0118  70  54  USB Charger  */
    224            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_011C  71  55     */
    225            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0120  72  56  DAC0   */
    226            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0124  73  57  MCG   */
    227          #if (gLpmIncluded_d == 1)
    228            (pfVectorEntry_t)PWRLib_LPTMR_Isr,  /*  0x0000_0128  74  58  Low Power Timer   */
    229          #else
    230            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0128  74  58  Low Power Timer   */
    231          #endif
    232            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_012C  75  59  Port control module Pin detect (Port A)  */
    233            (pfVectorEntry_t)PHY_InterruptHandler, /*  0x0000_0130  76  60  Port control module Pin detect (Port B)  */
    234            (pfVectorEntry_t)Switch_Press_ISR, /*  0x0000_0134  77  61  Port control module Pin detect (Port C)  */
    235            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0138  78  62  Port control module Pin detect (Port D)  */
    236            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_013C  79  63  Port control module Pin detect (Port E)  */
    237            (pfVectorEntry_t)VECT_DefaultISR,  /*  0x0000_0140  80  64  Software Software interrupt4  */
    238          	};
    239          
    240          #endif /* MCU_MK21DN512 */
    241                  

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   VECT_DefaultISR
       0   VECT_HWfaultISR
       0   VECT_NMIInterrupt


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  VECT_DefaultISR
       4  VECT_HWfaultISR
       2  VECT_NMIInterrupt
     324  __vector_table

 
 324 bytes in section .intvec
  10 bytes in section .text
 
  10 bytes of CODE  memory
 324 bytes of CONST memory

Errors: none
Warnings: none
