###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        02/Sep/2018  13:33:21
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\Common\usb_class.c
#    Command line =  
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\Common\usb_class.c" -D IAR --preprocess
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\" -lC
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\" -lB
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\"
#        --diag_suppress Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Environment\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Interface\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\Generic Services\Interface\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Uart\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\CDC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Sys Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\LPM\" -On
#    List file    =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\usb_class.lst
#    Object file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\Obj\usb_class.o
#
###############################################################################

F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Common\usb_class.c
      1          /******************************************************************************
      2           *
      3           * Freescale Semiconductor Inc.
      4           * (c) Copyright 2004-2010 Freescale Semiconductor, Inc.
      5           * ALL RIGHTS RESERVED.
      6           *
      7           ******************************************************************************
      8           *
      9           * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
     10           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
     11           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
     12           * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
     13           * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
     14           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
     15           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
     16           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     17           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
     18           * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
     19           * THE POSSIBILITY OF SUCH DAMAGE.
     20           *
     21           **************************************************************************//*!
     22           *
     23           * @file usb_class.c
     24           *
     25           * @author
     26           *
     27           * @version
     28           *
     29           * @date
     30           *
     31           * @brief The file contains USB stack Class module implementation.
     32           *
     33           *****************************************************************************/
     34          
     35          /******************************************************************************
     36           * Includes
     37           *****************************************************************************/
     38          #include "USB_Configuration.h"  
     39          #include "usb_class.h"      /* USB class Header File */
     40          #include "usb_dciapi.h"   
     41          #include "usb_devapi.h"     /* USB device Header file */
     42          #include "usb_framework.h"  /* USB framework module header file */
     43          #include "USB.h"
     44          #include "Interrupt.h"   
     45          
     46          #if gUsbIncluded_d
     47          
     48          /*****************************************************************************
     49           * Constant and Macro's
     50           *****************************************************************************/
     51          
     52          /****************************************************************************
     53           * Global Variables
     54           ****************************************************************************/
     55           /* Class callback pointer */
     56           #define  gapfClassCallback(controller_ID) gpfClassFrameworkCallback
     57          /* save the device state before device goes to suspend state */

   \                                 In section .bss, align 2
     58          static uint16_t gaDeviceStateBeforeSuspend[gNumUsbControllers_d];
   \                     gaDeviceStateBeforeSuspend:
   \   00000000                      DS8 2
     59          /*****************************************************************************
     60           * Local Types - None
     61           *****************************************************************************/
     62          
     63          /*****************************************************************************
     64           * Local Functions Prototypes
     65           *****************************************************************************/
     66          static void USB_Service_Suspend (usbDeviceEvent_t * event );
     67          static void USB_Service_Resume (usbDeviceEvent_t * event );
     68          static void USB_Service_Stall (usbDeviceEvent_t * event );
     69          static void USB_Service_SOF (usbDeviceEvent_t * event );
     70          static void USB_Service_Reset (usbDeviceEvent_t * event );
     71          static void USB_Service_Error (usbDeviceEvent_t * event );
     72          
     73          /*****************************************************************************
     74           * Local Variables
     75           *****************************************************************************/
     76          
     77           /*****************************************************************************
     78           * Local Functions - None
     79           *****************************************************************************/
     80          
     81          /*****************************************************************************
     82           * Global Functions
     83           *****************************************************************************/
     84          /**************************************************************************//*!
     85           *
     86           * @name  USB_Service_Suspend
     87           *
     88           * @brief The funtion is called when host suspends the USB port
     89           *
     90           * @param event     : Pointer to USB Event Structure
     91           *
     92           * @return None
     93           ******************************************************************************
     94           * Sets the device state as gUsbDeviceState_Suspend_d
     95           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     96          static void USB_Service_Suspend (
     97              usbDeviceEvent_t * event /* [IN] Pointer to USB Event Structure */
     98          )
     99          {
   \                     USB_Service_Suspend: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    100          #if  gUsbAppNotificationOnSuspend_d
    101            usbMsg_t usbMsg;  
    102          #endif
    103            /* Get the status of the device before suspend, so that on resume we can get back to the same state */
    104            (void)USB_DeviceGetStatus(event->controllerId,gUsbComponentStatus_DeviceState_d, &gaDeviceStateBeforeSuspend[event->controllerId]);
   \   00000004   0x....             LDR.N    R0,??DataTable6
   \   00000006   0x7821             LDRB     R1,[R4, #+0]
   \   00000008   0xEB10 0x0241      ADDS     R2,R0,R1, LSL #+1
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x.... 0x....      BL       USB_DeviceGetStatus
   \   00000014   0x0005             MOVS     R5,R0
    105            /* Set the device state in the Device Layer to SUSPEND */
    106            (void)USB_DeviceSetStatus(event->controllerId, gUsbComponentStatus_DeviceState_d,gUsbDeviceState_Suspend_d);
   \   00000016   0x2280             MOVS     R2,#+128
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x7820             LDRB     R0,[R4, #+0]
   \   0000001C   0x.... 0x....      BL       USB_DeviceSetStatus
    107          #if  gUsbAppNotificationOnSuspend_d
    108            usbMsg.controllerId = event->controllerId;
    109            usbMsg.eventType = gUsbToAppEvent_Suspend_c;
    110            gapfClassCallback(event->controllerId)(event->controllerId, gUsbToAppEvent_Suspend_c, &usbMsg);
    111          #endif  
    112          }
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    113          
    114          /**************************************************************************//*!
    115           *
    116           * @name  USB_Service_Resume
    117           *
    118           * @brief The funtion is called when host resumes the USB port
    119           *
    120           * @param event     : Pointer to USB Event Structure
    121           *
    122           * @return None
    123           ******************************************************************************
    124           * Restore the state of the device before suspend
    125           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    126          static void USB_Service_Resume (
    127              usbDeviceEvent_t * event /* [IN] Pointer to USB Event Structure */
    128          )
    129          {
   \                     USB_Service_Resume: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    130            uint16_t deviceState;
    131            (void)USB_DeviceGetStatus(event->controllerId, gUsbComponentStatus_DeviceState_d,&deviceState);
   \   00000006   0xAA00             ADD      R2,SP,#+0
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x.... 0x....      BL       USB_DeviceGetStatus
    132            if(deviceState == gUsbDeviceState_Suspend_d)
   \   00000010   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000014   0x2980             CMP      R1,#+128
   \   00000016   0xD107             BNE.N    ??USB_Service_Resume_0
    133            {
    134              /*Set the device state in the Device Layer to the state before suspend */
    135              (void)USB_DeviceSetStatus(event->controllerId,
    136                      gUsbComponentStatus_DeviceState_d, gaDeviceStateBeforeSuspend[event->controllerId]);
   \   00000018   0x....             LDR.N    R0,??DataTable6
   \   0000001A   0x7821             LDRB     R1,[R4, #+0]
   \   0000001C   0xF830 0x2011      LDRH     R2,[R0, R1, LSL #+1]
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x.... 0x....      BL       USB_DeviceSetStatus
    137            }
    138          }
   \                     ??USB_Service_Resume_0: (+1)
   \   00000028   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    139          
    140          /**************************************************************************//*!
    141           *
    142           * @name  USB_Service_Stall
    143           *
    144           * @brief The funtion is called when endpoint is stalled
    145           *
    146           * @param event: Pointer to USB Event Structure
    147           *
    148           * @return None
    149           ******************************************************************************
    150           * This function sends STALL Packet for the endpoint to be stalled. Also, sets
    151           * the status of Endpoint as STALLED
    152           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    153          static void USB_Service_Stall (
    154              usbDeviceEvent_t * event /* [IN] Pointer to USB Event Structure */
    155          )
    156          {
   \                     USB_Service_Stall: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    157            if(event->epNum == gUsbControlEndpoint_d)
   \   00000004   0x7860             LDRB     R0,[R4, #+1]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD108             BNE.N    ??USB_Service_Stall_0
    158            {
    159            /* Update the Endpoint Status in the Device Layer to Idle */
    160            (void)USB_DeviceSetStatus(event->controllerId,
    161                      (uint8_t)(gUsbComponentStatus_Endpoint_d | gUsbControlEndpoint_d |
    162                      (event->direction << gUsbComponent_DirectionShift_d)),
    163                      (uint16_t)gUsbStatus_Idle_d);
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000000E   0x01C0             LSLS     R0,R0,#+7
   \   00000010   0xF050 0x0110      ORRS     R1,R0,#0x10
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x.... 0x....      BL       USB_DeviceSetStatus
    164            }
    165            return;
   \                     ??USB_Service_Stall_0: (+1)
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    166          }
    167          
    168          /**************************************************************************//*!
    169           *
    170           * @name  USB_Service_SOF
    171           *
    172           * @brief The funtion is called when SOF flag is set (from ISR)
    173           *
    174           * @param event: Pointer to USB Event Structure
    175           *
    176           * @return None
    177           ******************************************************************************
    178           * This function is called when SOF token is received by controller. Updates
    179           * SOF Count status.
    180           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          static void USB_Service_SOF (
    182              usbDeviceEvent_t * event     /* [IN] Pointer to USB Event Structure */
    183          )
    184          {
   \                     USB_Service_SOF: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    185            uint16_t sofCount,deviceState;
    186            uint8_t i;
    187            /* update SOF */
    188            sofCount = *((uint16_t*)event->pBuffer);
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0x0005             MOVS     R5,R0
    189            /* write SOF to status */
    190            for(i=0 ; i< gNumUsbControllers_d ; i++)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0006             MOVS     R6,R0
   \                     ??USB_Service_SOF_0: (+1)
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0x2E00             CMP      R6,#+0
   \   00000014   0xD112             BNE.N    ??USB_Service_SOF_1
    191            {
    192              (void)USB_DeviceGetStatus( i , gUsbComponentStatus_DeviceState_d, &deviceState);
   \   00000016   0xAA00             ADD      R2,SP,#+0
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x0030             MOVS     R0,R6
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x.... 0x....      BL       USB_DeviceGetStatus
    193              if(deviceState < gUsbDeviceState_Suspend_d)
   \   00000022   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000026   0x2980             CMP      R1,#+128
   \   00000028   0xDA06             BGE.N    ??USB_Service_SOF_2
    194              {
    195                (void)USB_DeviceSetStatus( i , gUsbComponentStatus_SOFCount_d , sofCount);   
   \   0000002A   0x002A             MOVS     R2,R5
   \   0000002C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002E   0x2105             MOVS     R1,#+5
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x.... 0x....      BL       USB_DeviceSetStatus
    196              }
    197            }
   \                     ??USB_Service_SOF_2: (+1)
   \   00000038   0x1C76             ADDS     R6,R6,#+1
   \   0000003A   0xE7E9             B.N      ??USB_Service_SOF_0
    198            return;
   \                     ??USB_Service_SOF_1: (+1)
   \   0000003C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    199          }
    200          /**************************************************************************//*!
    201           *
    202           * @name  USB_Service_Reset
    203           *
    204           * @brief The funtion is called upon a bus reset event.
    205                        Initializes the control endpoint.
    206           *
    207           * @param event: Pointer to USB Event Structure
    208           *
    209           * @return None
    210           ******************************************************************************
    211           * Reset Callback function. This function re-initializes CONTROL Endpoint
    212           *****************************************************************************/
    213          
    214          

   \                                 In section .text, align 2, keep-with-next
    215          static void USB_Service_Reset 
    216          (
    217              usbDeviceEvent_t * event  /* [IN] Pointer to USB Event Structure */
    218          )
    219          {
   \                     USB_Service_Reset: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x0004             MOVS     R4,R0
    220            usbEpStruct_t epStruct;
    221            usbMsg_t usbMsg;
    222          
    223            /* Initialize the endpoint 0 in both directions */
    224            epStruct.direction = gUsbEpDirection_In_c;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xF88D 0x0002      STRB     R0,[SP, #+2]
    225            epStruct.number = gUsbControlEndpoint_d;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    226            epStruct.size = gpaUsbClassDescriptor[event->controllerId]->controlEpSize;
   \   00000014   0x....             LDR.N    R0,??DataTable6_1
   \   00000016   0x7821             LDRB     R1,[R4, #+0]
   \   00000018   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000001C   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    227            epStruct.type = gUsbEpType_Control_c;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF88D 0x0001      STRB     R0,[SP, #+1]
    228            /* Deinit Endpoint in case its already initialized */
    229            (void)USB_DeviceDeinitEndpoint(event->controllerId , epStruct.number, epStruct.direction);
   \   0000002A   0xF89D 0x2002      LDRB     R2,[SP, #+2]
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x7820             LDRB     R0,[R4, #+0]
   \   00000034   0x.... 0x....      BL       USB_DeviceDeinitEndpoint
   \   00000038   0x0005             MOVS     R5,R0
    230            epStruct.direction = gUsbEpDirection_Out_c;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF88D 0x0002      STRB     R0,[SP, #+2]
    231            (void)USB_DeviceDeinitEndpoint(event->controllerId,	epStruct.number, epStruct.direction);
   \   00000040   0xF89D 0x2002      LDRB     R2,[SP, #+2]
   \   00000044   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000048   0x7820             LDRB     R0,[R4, #+0]
   \   0000004A   0x.... 0x....      BL       USB_DeviceDeinitEndpoint
   \   0000004E   0x0006             MOVS     R6,R0
    232             /* now initialize the endpoint */
    233            epStruct.direction = gUsbEpDirection_In_c;	
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xF88D 0x0002      STRB     R0,[SP, #+2]
    234            (void)USB_DeviceInitEndpoint(event->controllerId, &epStruct, TRUE);
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0xA900             ADD      R1,SP,#+0
   \   0000005A   0x7820             LDRB     R0,[R4, #+0]
   \   0000005C   0x.... 0x....      BL       USB_DeviceInitEndpoint
   \   00000060   0x0007             MOVS     R7,R0
    235            epStruct.direction = gUsbEpDirection_Out_c;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xF88D 0x0002      STRB     R0,[SP, #+2]
    236            (void)USB_DeviceInitEndpoint(event->controllerId, &epStruct, TRUE);
   \   00000068   0x2201             MOVS     R2,#+1
   \   0000006A   0xA900             ADD      R1,SP,#+0
   \   0000006C   0x7820             LDRB     R0,[R4, #+0]
   \   0000006E   0x.... 0x....      BL       USB_DeviceInitEndpoint
   \   00000072   0x4680             MOV      R8,R0
    237            /* set the default device state */
    238            (void)USB_DeviceSetStatus(event->controllerId , gUsbComponentStatus_DeviceState_d , gUsbDeviceState_Default_d);
   \   00000074   0x2202             MOVS     R2,#+2
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0x7820             LDRB     R0,[R4, #+0]
   \   0000007A   0x.... 0x....      BL       USB_DeviceSetStatus
   \   0000007E   0x4681             MOV      R9,R0
    239            /* set the default device state */
    240            (void)USB_DeviceSetStatus(event->controllerId, gUsbComponentStatus_Device_d, gbmUsbAttributes_SelfPowered_d >> gUsbSelfPoweredBitShift_d);
   \   00000080   0x2201             MOVS     R2,#+1
   \   00000082   0x2106             MOVS     R1,#+6
   \   00000084   0x7820             LDRB     R0,[R4, #+0]
   \   00000086   0x.... 0x....      BL       USB_DeviceSetStatus
   \   0000008A   0x4682             MOV      R10,R0
    241            // gbmUsbAttributes_SelfPowered_d must be moved in usbClassDescriptor_t
    242            /* set the EndPoint Status as Idle in the device layer */
    243            (void)USB_DeviceSetStatus(event->controllerId,
    244                  (uint8_t)(gUsbComponentStatus_Endpoint_d | gUsbControlEndpoint_d |
    245                  (gUsbEpDirection_In_c << gUsbComponent_DirectionShift_d)),
    246                  gUsbStatus_Idle_d);
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x2190             MOVS     R1,#+144
   \   00000090   0x7820             LDRB     R0,[R4, #+0]
   \   00000092   0x.... 0x....      BL       USB_DeviceSetStatus
   \   00000096   0x4683             MOV      R11,R0
    247            /* let the application know that bus reset has taken place */
    248            usbMsg.controllerId = event->controllerId;
   \   00000098   0x7820             LDRB     R0,[R4, #+0]
   \   0000009A   0xF88D 0x0008      STRB     R0,[SP, #+8]
    249            usbMsg.eventType = gUsbToAppEvent_BusReset_c;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0xF88D 0x0009      STRB     R0,[SP, #+9]
    250            gapfClassCallback(event->controllerId)(event->controllerId, gUsbToAppEvent_BusReset_c, &usbMsg);
   \   000000A4   0xAA02             ADD      R2,SP,#+8
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0x7820             LDRB     R0,[R4, #+0]
   \   000000AA   0x....             LDR.N    R3,??DataTable6_2
   \   000000AC   0x681B             LDR      R3,[R3, #+0]
   \   000000AE   0x4798             BLX      R3
    251            return;
   \   000000B0   0xB007             ADD      SP,SP,#+28
   \   000000B2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    252          }
    253          
    254          /**************************************************************************//*!
    255           *
    256           * @name  USB_Service_Error
    257           *
    258           * @brief The funtion is called when an error has been detected
    259           *
    260           * @param event: Pointer to USB Event Structure
    261           *
    262           * @return None
    263           ******************************************************************************
    264           * Calls application with the error code received from the lower layer
    265           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    266          static void USB_Service_Error (
    267              usbDeviceEvent_t * event /* [IN] Pointer to USB Event Structure */
    268          )
    269          {
   \                     USB_Service_Error: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    270            /* notify the application of the error */
    271            usbMsg_t usbMsg;
    272            usbMsg.controllerId = event->controllerId;
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    273            usbMsg.eventType = gUsbToAppEvent_Error_c;
   \   0000000A   0x2005             MOVS     R0,#+5
   \   0000000C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    274            usbMsg.eventParam.errorEvent.errors = event->errors;
   \   00000010   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000012   0xF88D 0x0004      STRB     R0,[SP, #+4]
    275            gapfClassCallback(event->controllerId)(event->controllerId, gUsbToAppEvent_Error_c,&usbMsg);
   \   00000016   0xAA00             ADD      R2,SP,#+0
   \   00000018   0x2105             MOVS     R1,#+5
   \   0000001A   0x7820             LDRB     R0,[R4, #+0]
   \   0000001C   0x....             LDR.N    R3,??DataTable6_2
   \   0000001E   0x681B             LDR      R3,[R3, #+0]
   \   00000020   0x4798             BLX      R3
    276            return;
   \   00000022   0xBD1F             POP      {R0-R4,PC}       ;; return
    277          }
    278          
    279          
    280          /**************************************************************************//*!
    281           *
    282           * @name  USB_ClassInit
    283           *
    284           * @brief The funtion initializes the Class Module
    285           *
    286           * @param controller_ID         : Controller ID
    287           * @param class_callback        : Class callback
    288           * @param other_req_callback    : Other Requests Callback
    289           *
    290           * @return status
    291           *         gUsbErr_NoError_c           : When Successfull
    292           *         Others           : Errors
    293           ******************************************************************************
    294           * Initializes USB Class Module
    295           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    296          uint8_t USB_ClassInit (
    297              uint8_t    controllerId,                /* [IN] Controller ID */
    298              pfUsbToAppEventHandler_t classCallback,      /* [IN] Class Callback */
    299              pfusbReqHandler_t       otherReqCallback   /* [IN] Other Requests Callback */
    300          )
    301          {
   \                     USB_ClassInit: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    302            uint8_t status = USB_Framework_Init(controllerId , classCallback , otherReqCallback);
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       USB_Framework_Init
   \   00000014   0x0007             MOVS     R7,R0
    303            /* save callback address */
    304            gapfClassCallback(controllerId) = classCallback;
   \   00000016   0x....             LDR.N    R0,??DataTable6_2
   \   00000018   0x6005             STR      R5,[R0, #+0]
    305            if(status == gUsbErr_NoError_c)
   \   0000001A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001C   0x2F00             CMP      R7,#+0
   \   0000001E   0xD13A             BNE.N    ??USB_ClassInit_0
    306            {
    307              /* Register all the services here */
    308              status |= USB_DeviceRegisterService(controllerId , gUsbService_BusReset_d , USB_Service_Reset);
   \   00000020   0x....             LDR.N    R2,??DataTable6_3
   \   00000022   0x2110             MOVS     R1,#+16
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       USB_DeviceRegisterService
   \   0000002C   0x4338             ORRS     R0,R0,R7
   \   0000002E   0x0007             MOVS     R7,R0
    309              status |= USB_DeviceRegisterService(controllerId , gUsbService_SOF_d , USB_Service_SOF);
   \   00000030   0x....             LDR.N    R2,??DataTable6_4
   \   00000032   0x2111             MOVS     R1,#+17
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       USB_DeviceRegisterService
   \   0000003C   0x4338             ORRS     R0,R0,R7
   \   0000003E   0x0007             MOVS     R7,R0
    310              status |= USB_DeviceRegisterService(controllerId , gUsbService_Sleep_d , USB_Service_Suspend);
   \   00000040   0x....             LDR.N    R2,??DataTable6_5
   \   00000042   0x2113             MOVS     R1,#+19
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       USB_DeviceRegisterService
   \   0000004C   0x4338             ORRS     R0,R0,R7
   \   0000004E   0x0007             MOVS     R7,R0
    311              status |= USB_DeviceRegisterService(controllerId , gUsbService_Resume_d,USB_Service_Resume);
   \   00000050   0x....             LDR.N    R2,??DataTable6_6
   \   00000052   0x2112             MOVS     R1,#+18
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x.... 0x....      BL       USB_DeviceRegisterService
   \   0000005C   0x4338             ORRS     R0,R0,R7
   \   0000005E   0x0007             MOVS     R7,R0
    312              status |= USB_DeviceRegisterService(controllerId , gUsbService_Stall_d , USB_Service_Stall);
   \   00000060   0x....             LDR.N    R2,??DataTable6_7
   \   00000062   0x2115             MOVS     R1,#+21
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0x.... 0x....      BL       USB_DeviceRegisterService
   \   0000006C   0x4338             ORRS     R0,R0,R7
   \   0000006E   0x0007             MOVS     R7,R0
    313              status |= USB_DeviceRegisterService(controllerId , gUsbService_Error_d , USB_Service_Error);
   \   00000070   0x....             LDR.N    R2,??DataTable6_8
   \   00000072   0x2114             MOVS     R1,#+20
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x.... 0x....      BL       USB_DeviceRegisterService
   \   0000007C   0x4338             ORRS     R0,R0,R7
   \   0000007E   0x0007             MOVS     R7,R0
    314               /* set the device state as powered */
    315              (void)USB_DeviceSetStatus(controllerId , gUsbComponentStatus_DeviceState_d , gUsbDeviceState_Powered_d);
   \   00000080   0x2203             MOVS     R2,#+3
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x0020             MOVS     R0,R4
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0x.... 0x....      BL       USB_DeviceSetStatus
    316              gaDeviceStateBeforeSuspend[controllerId] = gUsbDeviceState_Powered_d;
   \   0000008C   0x2103             MOVS     R1,#+3
   \   0000008E   0x....             LDR.N    R2,??DataTable6
   \   00000090   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000092   0xF822 0x1014      STRH     R1,[R2, R4, LSL #+1]
    317            }
    318            return status;
   \                     ??USB_ClassInit_0: (+1)
   \   00000096   0x0038             MOVS     R0,R7
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    319          }
    320          
    321          /**************************************************************************//*!
    322           *
    323           * @name  USB_ClassDeInit
    324           *
    325           * @brief The funtion De-initializes the Class Module
    326           *
    327           * @param controller_ID         : Controller ID
    328           *
    329           * @return status
    330           *         gUsbErr_NoError_c           : When Successfull
    331           *         Others           : Errors
    332           ******************************************************************************
    333           * De-initializes USB Class Module
    334           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    335          uint8_t USB_ClassDeInit 
    336          (
    337              uint8_t    controllerId          /* [IN] Controller ID */
    338          ) 
    339          {
   \                     USB_ClassDeInit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    340            uint8_t status = gUsbErr_NoError_c;
   \   00000004   0x2500             MOVS     R5,#+0
    341            status = USB_Framework_DeInit(controllerId);    
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       USB_Framework_DeInit
   \   0000000E   0x0005             MOVS     R5,R0
    342            /* Free class_callback */
    343            gapfClassCallback(controllerId) = NULL;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable6_2
   \   00000014   0x6008             STR      R0,[R1, #+0]
    344            return status;
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    345          }
    346          
    347          /**************************************************************************//*!
    348           *
    349           * @name  USB_ClassSendData
    350           *
    351           * @brief The funtion calls the device to send data upon recieving an IN token
    352           *
    353           * @param controller_ID     : Controller ID
    354           * @param ep_num            : Endpoint number
    355           * @param buff_ptr          : Buffer to send
    356           * @param size              : Length of transfer
    357           *
    358           * @return status
    359           *         gUsbErr_NoError_c           : When Successfull
    360           *         Others           : Errors
    361           ******************************************************************************
    362           * Used by Application to send Data on USB Bus if not suspended
    363           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    364          uint8_t USB_ClassSendData_ (
    365              uint8_t           controllerId, /* [IN] Controller ID */
    366              uint8_t           epNum,        /* [IN] Endpoint number */
    367              uint8_t*          pBuff,      /* [IN] Buffer to send */
    368              usbPacketSize_t   size  ,         /* [IN] Length of the transfer */
    369              bool_t            sendShort
    370          )
    371          {
   \                     USB_ClassSendData_: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0017             MOVS     R7,R2
   \   0000000C   0x4698             MOV      R8,R3
   \   0000000E   0x9C0C             LDR      R4,[SP, #+48]
    372            uint8_t status = gUsbErr_NoError_c;
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
    373            uint16_t deviceState, state;
    374            uint32_t ccr;
    375            if(controllerId >= gNumUsbControllers_d)
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x2D00             CMP      R5,#+0
   \   00000018   0xD001             BEQ.N    ??USB_ClassSendData__0
    376            {
    377              return gUsbErr_InvalidParam_c;
   \   0000001A   0x20D0             MOVS     R0,#+208
   \   0000001C   0xE046             B.N      ??USB_ClassSendData__1
    378            }
    379            //USB_Lock();  
    380            ccr = IntDisableAll();
   \                     ??USB_ClassSendData__0: (+1)
   \   0000001E   0x.... 0x....      BL       IntDisableAll
   \   00000022   0x4682             MOV      R10,R0
    381            (void)USB_DeviceGetStatus(controllerId , gUsbComponentStatus_DeviceState_d , &deviceState);
   \   00000024   0xAA01             ADD      R2,SP,#+4
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       USB_DeviceGetStatus
   \   00000030   0x4683             MOV      R11,R0
    382            (void)USB_DeviceGetStatus(controllerId , gUsbComponentStatus_Device_d , &state);
   \   00000032   0xF10D 0x0206      ADD      R2,SP,#+6
   \   00000036   0x2106             MOVS     R1,#+6
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       USB_DeviceGetStatus
    383            if((deviceState == gUsbDeviceState_Suspend_d) && 
    384                     (state & gUsbRemoteWakeupStatusMask_d ) && 
    385                     (USB_Framework_RemoteWakeup(controllerId) == TRUE))
   \   00000040   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000044   0x2980             CMP      R1,#+128
   \   00000046   0xD11C             BNE.N    ??USB_ClassSendData__2
   \   00000048   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000004C   0x0780             LSLS     R0,R0,#+30
   \   0000004E   0xD518             BPL.N    ??USB_ClassSendData__2
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x.... 0x....      BL       USB_Desc_RemoteWakeup
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD112             BNE.N    ??USB_ClassSendData__2
    386            {
    387              /* Resume the bus */
    388                USB_DeviceAssertResume(controllerId);    
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x.... 0x....      BL       USB_DeviceAssertResume
    389                deviceState = gaDeviceStateBeforeSuspend[controllerId];
   \   00000064   0x....             LDR.N    R0,??DataTable6
   \   00000066   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000068   0xF830 0x0015      LDRH     R0,[R0, R5, LSL #+1]
   \   0000006C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    390              /* Set the device state in the Device Layer to DEFAULT */
    391                (void)USB_DeviceSetStatus(controllerId,gUsbComponentStatus_DeviceState_d, gaDeviceStateBeforeSuspend[controllerId]);
   \   00000070   0x....             LDR.N    R0,??DataTable6
   \   00000072   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000074   0xF830 0x2015      LDRH     R2,[R0, R5, LSL #+1]
   \   00000078   0x2101             MOVS     R1,#+1
   \   0000007A   0x0028             MOVS     R0,R5
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x.... 0x....      BL       USB_DeviceSetStatus
    392              
    393          	}
    394            if(deviceState != gUsbDeviceState_Suspend_d)
   \                     ??USB_ClassSendData__2: (+1)
   \   00000082   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000086   0x2880             CMP      R0,#+128
   \   00000088   0xD00B             BEQ.N    ??USB_ClassSendData__3
    395            {
    396              /* if not suspended */
    397              status = USB_DeviceSendData(controllerId, epNum, pBuff, size, sendShort);
   \   0000008A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008C   0x9400             STR      R4,[SP, #+0]
   \   0000008E   0x4643             MOV      R3,R8
   \   00000090   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000092   0x003A             MOVS     R2,R7
   \   00000094   0x0031             MOVS     R1,R6
   \   00000096   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000098   0x0028             MOVS     R0,R5
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x.... 0x....      BL       USB_DeviceSendData
   \   000000A0   0x4681             MOV      R9,R0
    398            }
    399           // USB_UnLock();
    400            IntRestoreAll(ccr);
   \                     ??USB_ClassSendData__3: (+1)
   \   000000A2   0x4650             MOV      R0,R10
   \   000000A4   0x.... 0x....      BL       IntRestoreAll
    401            return status;
   \   000000A8   0x4648             MOV      R0,R9
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??USB_ClassSendData__1: (+1)
   \   000000AC   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    402           }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     gaDeviceStateBeforeSuspend

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     gpaUsbClassDescriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     gpfClassFrameworkCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     USB_Service_Reset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     USB_Service_SOF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     USB_Service_Suspend

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     USB_Service_Resume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     USB_Service_Stall

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     USB_Service_Error
    403          
    404          
    405          
    406          #endif // gUsbIncluded_d

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   USB_ClassDeInit
        16   -> USB_Framework_DeInit
      24   USB_ClassInit
        24   -> USB_DeviceRegisterService
        24   -> USB_DeviceSetStatus
        24   -> USB_Framework_Init
      48   USB_ClassSendData_
        48   -> IntDisableAll
        48   -> IntRestoreAll
        48   -> USB_Desc_RemoteWakeup
        48   -> USB_DeviceAssertResume
        48   -> USB_DeviceGetStatus
        48   -> USB_DeviceSendData
        48   -> USB_DeviceSetStatus
      24   USB_Service_Error
        24   -- Indirect call
      64   USB_Service_Reset
        64   -- Indirect call
        64   -> USB_DeviceDeinitEndpoint
        64   -> USB_DeviceInitEndpoint
        64   -> USB_DeviceSetStatus
      16   USB_Service_Resume
        16   -> USB_DeviceGetStatus
        16   -> USB_DeviceSetStatus
      24   USB_Service_SOF
        24   -> USB_DeviceGetStatus
        24   -> USB_DeviceSetStatus
       8   USB_Service_Stall
         8   -> USB_DeviceSetStatus
      16   USB_Service_Suspend
        16   -> USB_DeviceGetStatus
        16   -> USB_DeviceSetStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
      28  USB_ClassDeInit
     156  USB_ClassInit
     176  USB_ClassSendData_
      36  USB_Service_Error
     182  USB_Service_Reset
      42  USB_Service_Resume
      62  USB_Service_SOF
      30  USB_Service_Stall
      34  USB_Service_Suspend
       2  gaDeviceStateBeforeSuspend

 
   2 bytes in section .bss
 782 bytes in section .text
 
 782 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
