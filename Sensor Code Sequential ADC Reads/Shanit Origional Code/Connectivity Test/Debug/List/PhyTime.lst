###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        02/Sep/2018  13:33:19
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\PhyTime.c
#    Command line =  
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\PhyTime.c" -D IAR --preprocess
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\" -lC
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\" -lB
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\"
#        --diag_suppress Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Environment\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Interface\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\Generic Services\Interface\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Uart\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\CDC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Sys Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\LPM\" -On
#    List file    =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\PhyTime.lst
#    Object file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\Obj\PhyTime.o
#
###############################################################################

F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional Code\Connectivity Test\PLM\Source\Radio\MC1324x\PHY\PhyTime.c
      1          /*****************************************************************************
      2           *                               INCLUDED HEADERS                            *
      3           *---------------------------------------------------------------------------*
      4           * Add to this section all the headers that this module needs to include.    *
      5           *---------------------------------------------------------------------------*
      6           *****************************************************************************/
      7          #include "EmbeddedTypes.h"
      8          #include "PortConfig.h"
      9          #include "TransceiverDrv.h"
     10          #include "TransceiverReg.h"
     11          #include "Phy.h"
     12          #include "Interrupt.h"
     13          
     14          /*****************************************************************************
     15           *                               PRIVATE VARIABLES                           *
     16           *---------------------------------------------------------------------------*
     17           * Add to this section all the variables and constants that have local       *
     18           * (file) scope.                                                             *
     19           * Each of this declarations shall be preceded by the 'static' keyword.      *
     20           * These variables / constants cannot be accessed outside this module.       *
     21           *---------------------------------------------------------------------------*
     22           *****************************************************************************/
     23          
     24          /*****************************************************************************
     25           *                               PUBLIC VARIABLES                            *
     26           *---------------------------------------------------------------------------*
     27           * Add to this section all the variables and constants that have global      *
     28           * (project) scope.                                                          *
     29           * These variables / constants can be accessed outside this module.          *
     30           * These variables / constants shall be preceded by the 'extern' keyword in  *
     31           * the interface header.                                                     *
     32           *---------------------------------------------------------------------------*
     33           *****************************************************************************/
     34          
     35          /*****************************************************************************
     36           *                           PRIVATE FUNCTIONS PROTOTYPES                    *
     37           *---------------------------------------------------------------------------*
     38           * Add to this section all the functions prototypes that have local (file)   *
     39           * scope.                                                                    *
     40           * These functions cannot be accessed outside this module.                   *
     41           * These declarations shall be preceded by the 'static' keyword.             *
     42           *---------------------------------------------------------------------------*
     43           *****************************************************************************/
     44          
     45          /*****************************************************************************
     46           *                                PRIVATE FUNCTIONS                          *
     47           *---------------------------------------------------------------------------*
     48           * Add to this section all the functions that have local (file) scope.       *
     49           * These functions cannot be accessed outside this module.                   *
     50           * These definitions shall be preceded by the 'static' keyword.              *
     51           *---------------------------------------------------------------------------*
     52           *****************************************************************************/
     53          
     54          /*****************************************************************************
     55           *                             PUBLIC FUNCTIONS                              *
     56           *---------------------------------------------------------------------------*
     57           * Add to this section all the functions that have global (project) scope.   *
     58           * These functions can be accessed outside this module.                      *
     59           * These functions shall have their declarations (prototypes) within the     *
     60           * interface header file and shall be preceded by the 'extern' keyword.      *
     61           *---------------------------------------------------------------------------*
     62           *****************************************************************************/
     63          
     64          /*---------------------------------------------------------------------------
     65           * Name: PhyTimeSetEventTrigger
     66           * Description: -
     67           * Parameters: -
     68           * Return: -
     69           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     70          void PhyTimeSetEventTrigger
     71          (
     72            uint16_t startTime
     73          )
     74          {
   \                     PhyTimeSetEventTrigger: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
     75            uint8_t phyCtrl1Reg, phyCtrl3Reg, irqSts3Reg;
     76            uint16_t startTimeTmp = startTime;
   \   00000004   0xF8AD 0x4000      STRH     R4,[SP, #+0]
     77            
     78            phyCtrl1Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL1);
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   0000000E   0x0005             MOVS     R5,R0
     79            phyCtrl3Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL3);
   \   00000010   0x2005             MOVS     R0,#+5
   \   00000012   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000016   0x0006             MOVS     R6,R0
     80            
     81            
     82            phyCtrl3Reg &= ~(cPHY_CTRL3_TMR2CMP_EN);// disable TMR2 compare
   \   00000018   0xF016 0x06DF      ANDS     R6,R6,#0xDF
     83            phyCtrl1Reg |= cPHY_CTRL1_TMRTRIGEN;    // enable autosequence start by TC2 match
   \   0000001C   0xF055 0x0580      ORRS     R5,R5,#0x80
     84            
     85            
     86            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL3, phyCtrl3Reg);
   \   00000020   0x0031             MOVS     R1,R6
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x2005             MOVS     R0,#+5
   \   00000026   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
     87            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL1, phyCtrl1Reg);
   \   0000002A   0x0029             MOVS     R1,R5
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0x2003             MOVS     R0,#+3
   \   00000030   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
     88            
     89            
     90            MC1324xDrv_DirectAccessSPIMultiByteWrite( (uint8_t) T2PRIMECMP_LSB, (uint8_t *) &startTimeTmp, 2);
   \   00000034   0x2202             MOVS     R2,#+2
   \   00000036   0xA900             ADD      R1,SP,#+0
   \   00000038   0x2015             MOVS     R0,#+21
   \   0000003A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIMultiByteWrite
     91            
     92            irqSts3Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS3);
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000044   0x0007             MOVS     R7,R0
     93            
     94            // TC2PRIME_EN must be enabled in PHY_CTRL4 register
     95            phyCtrl3Reg |= cPHY_CTRL3_TMR2CMP_EN;   // enable TMR2 compare
   \   00000046   0xF056 0x0620      ORRS     R6,R6,#0x20
     96            irqSts3Reg &= ~(cIRQSTS3_TMR2MSK);      // unmask TMR2 interrupt
   \   0000004A   0xF017 0x07DF      ANDS     R7,R7,#0xDF
     97            irqSts3Reg &= 0xF0;                            // do not change IRQ others status
   \   0000004E   0xF017 0x07F0      ANDS     R7,R7,#0xF0
     98            irqSts3Reg |= (cIRQSTS3_TMR2IRQ);       // aknowledge TMR2 IRQ 
   \   00000052   0xF057 0x0702      ORRS     R7,R7,#0x2
     99            
    100            
    101            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL3, phyCtrl3Reg);
   \   00000056   0x0031             MOVS     R1,R6
   \   00000058   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005A   0x2005             MOVS     R0,#+5
   \   0000005C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    102            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS3, irqSts3Reg);
   \   00000060   0x0039             MOVS     R1,R7
   \   00000062   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    103            
    104            //PHY_DEBUG_LOG2(PDBG_SET_EVENT_TRIGGER, PP_PHY_TC2PRIMEH, PP_PHY_TC2PRIMEL); //TODO
    105          }
   \   0000006A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    106          
    107          /*---------------------------------------------------------------------------
    108           * Name: PhyTimeSetEventTimeout
    109           * Description: -
    110           * Parameters: -
    111           * Return: -
    112           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    113          void PhyTimeSetEventTimeout
    114          (
    115            zbClock24_t *pEndTime
    116          )
    117          {
   \                     PhyTimeSetEventTimeout: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    118            uint8_t phyCtrl4Reg, phyCtrl3Reg, irqSts3Reg;
    119            
    120          #ifdef PHY_PARAMETERS_VALIDATION
    121            if(NULL == pEndTime)
    122            {
    123              return;
    124            }
    125          #endif // PHY_PARAMETERS_VALIDATION
    126            
    127            phyCtrl4Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL4);
   \   00000004   0x2007             MOVS     R0,#+7
   \   00000006   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   0000000A   0x0005             MOVS     R5,R0
    128            phyCtrl3Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL3);
   \   0000000C   0x2005             MOVS     R0,#+5
   \   0000000E   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000012   0x0006             MOVS     R6,R0
    129            
    130            
    131            phyCtrl3Reg &= ~(cPHY_CTRL3_TMR3CMP_EN);// disable TMR3 compare
   \   00000014   0xF016 0x06BF      ANDS     R6,R6,#0xBF
    132            phyCtrl4Reg |= cPHY_CTRL4_TC3TMOUT;     // enable autosequence stop by TC3 match
   \   00000018   0xF055 0x0540      ORRS     R5,R5,#0x40
    133            
    134            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL3, phyCtrl3Reg);
   \   0000001C   0x0031             MOVS     R1,R6
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x2005             MOVS     R0,#+5
   \   00000022   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    135            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL4, phyCtrl4Reg);
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x2007             MOVS     R0,#+7
   \   0000002C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    136            
    137            MC1324xDrv_DirectAccessSPIMultiByteWrite( (uint8_t) T3CMP_LSB, (uint8_t *) pEndTime, 3);
   \   00000030   0x2203             MOVS     R2,#+3
   \   00000032   0x0021             MOVS     R1,R4
   \   00000034   0x2012             MOVS     R0,#+18
   \   00000036   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIMultiByteWrite
    138            
    139            irqSts3Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS3);
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000040   0x0007             MOVS     R7,R0
    140            
    141            phyCtrl3Reg |= cPHY_CTRL3_TMR3CMP_EN;   // enable TMR3 compare
   \   00000042   0xF056 0x0640      ORRS     R6,R6,#0x40
    142            irqSts3Reg &= ~(cIRQSTS3_TMR3MSK);      // unmask TMR3 interrupt
   \   00000046   0xF017 0x07BF      ANDS     R7,R7,#0xBF
    143            irqSts3Reg &= 0xF0;                     // do not change IRQ status
   \   0000004A   0xF017 0x07F0      ANDS     R7,R7,#0xF0
    144            irqSts3Reg |= (cIRQSTS3_TMR3IRQ);       // aknowledge TMR3 IRQ
   \   0000004E   0xF057 0x0704      ORRS     R7,R7,#0x4
    145            
    146            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL3, phyCtrl3Reg);
   \   00000052   0x0031             MOVS     R1,R6
   \   00000054   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000056   0x2005             MOVS     R0,#+5
   \   00000058   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    147            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS3, irqSts3Reg);
   \   0000005C   0x0039             MOVS     R1,R7
   \   0000005E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    148            
    149            //PHY_DEBUG_LOG3(PDBG_SET_EVENT_TIMEOUT, PP_PHY_T3CMP16, PP_PHY_T3CMP8, PP_PHY_T3CMP0);; //TODO
    150          }
   \   00000066   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    151          
    152          /*---------------------------------------------------------------------------
    153           * Name: PhyTimeDisableEventTimeout
    154           * Description: -
    155           * Parameters: -
    156           * Return: -
    157           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    158          void PhyTimeDisableEventTimeout
    159          (
    160            void
    161          )
    162          {
   \                     PhyTimeDisableEventTimeout: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    163            uint8_t phyCtrl4Reg, phyCtrl3Reg, irqSts3Reg;
    164            
    165            //PHY_DEBUG_LOG(PDBG_DISABLE_EVENT_TIMEOUT); TODO
    166            
    167            phyCtrl4Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL4);
   \   00000002   0x2007             MOVS     R0,#+7
   \   00000004   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000008   0x0004             MOVS     R4,R0
    168            phyCtrl3Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL3);
   \   0000000A   0x2005             MOVS     R0,#+5
   \   0000000C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000010   0x0005             MOVS     R5,R0
    169            
    170            phyCtrl4Reg &= ~(cPHY_CTRL4_TC3TMOUT);  // disable autosequence stop by TC3 match
   \   00000012   0xF014 0x04BF      ANDS     R4,R4,#0xBF
    171            phyCtrl3Reg &= ~(cPHY_CTRL3_TMR3CMP_EN);// disable TMR3 compare
   \   00000016   0xF015 0x05BF      ANDS     R5,R5,#0xBF
    172            
    173            irqSts3Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS3);
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000020   0x0006             MOVS     R6,R0
    174            irqSts3Reg |= cIRQSTS3_TMR3IRQ;         // aknowledge TMR3 IRQ
   \   00000022   0xF056 0x0604      ORRS     R6,R6,#0x4
    175            
    176            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL3, phyCtrl3Reg);
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x2005             MOVS     R0,#+5
   \   0000002C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    177            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL4, phyCtrl4Reg);
   \   00000030   0x0021             MOVS     R1,R4
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x2007             MOVS     R0,#+7
   \   00000036   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    178            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS3, irqSts3Reg);
   \   0000003A   0x0031             MOVS     R1,R6
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    179          }
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return
    180          
    181          /*---------------------------------------------------------------------------
    182           * Name: PhyTimeReadClock
    183           * Description: -
    184           * Parameters: -
    185           * Return: -
    186           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    187          void PhyTimeReadClock
    188          (
    189            zbClock24_t *pRetClk
    190          )
    191          {
   \                     PhyTimeReadClock: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    192          #ifdef PHY_PARAMETERS_VALIDATION
    193            if(NULL == pRetClk)
    194            {
    195              return;
    196            }
    197          #endif // PHY_PARAMETERS_VALIDATION
    198            
    199            //PHY_DEBUG_LOG(PDBG_READ_CLOCK); TODO
    200            
    201            MC1324xDrv_DirectAccessSPIMultiByteRead( (uint8_t) EVENT_TMR_LSB, (uint8_t *) pRetClk, 3);
   \   00000004   0x2203             MOVS     R2,#+3
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0x200C             MOVS     R0,#+12
   \   0000000A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIMultiByteRead
    202            *(((uint8_t *)pRetClk) + 3) = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x70E0             STRB     R0,[R4, #+3]
    203          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    204          
    205          /*---------------------------------------------------------------------------
    206           * Name: PhyTimeInitEventTimer
    207           * Description: -
    208           * Parameters: -
    209           * Return: -
    210           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    211          void PhyTimeInitEventTimer
    212          (
    213            zbClock24_t *pAbsTime
    214          )
    215          {
   \                     PhyTimeInitEventTimer: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    216            uint8_t phyCtrl4Reg;
    217              
    218          #ifdef PHY_PARAMETERS_VALIDATION
    219            if(NULL == pAbsTime)
    220            {
    221              return;
    222            }
    223          #endif // PHY_PARAMETERS_VALIDATION
    224          
    225            //PHY_DEBUG_LOG(PDBG_INIT_EVENT_TIMER); TODO
    226          
    227            phyCtrl4Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL4);
   \   00000004   0x2007             MOVS     R0,#+7
   \   00000006   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   0000000A   0x0005             MOVS     R5,R0
    228            phyCtrl4Reg |= cPHY_CTRL4_TMRLOAD; // self clearing bit
   \   0000000C   0xF055 0x0504      ORRS     R5,R5,#0x4
    229            
    230            MC1324xDrv_DirectAccessSPIMultiByteWrite( (uint8_t) T1CMP_LSB, (uint8_t *) pAbsTime, 3);
   \   00000010   0x2203             MOVS     R2,#+3
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0x2017             MOVS     R0,#+23
   \   00000016   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIMultiByteWrite
    231            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL4, phyCtrl4Reg);
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x2007             MOVS     R0,#+7
   \   00000020   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    232          
    233          }
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   PhyTimeDisableEventTimeout
        16   -> MC1324xDrv_DirectAccessSPIRead
        16   -> MC1324xDrv_DirectAccessSPIWrite
      16   PhyTimeInitEventTimer
        16   -> MC1324xDrv_DirectAccessSPIMultiByteWrite
        16   -> MC1324xDrv_DirectAccessSPIRead
        16   -> MC1324xDrv_DirectAccessSPIWrite
       8   PhyTimeReadClock
         8   -> MC1324xDrv_DirectAccessSPIMultiByteRead
      24   PhyTimeSetEventTimeout
        24   -> MC1324xDrv_DirectAccessSPIMultiByteWrite
        24   -> MC1324xDrv_DirectAccessSPIRead
        24   -> MC1324xDrv_DirectAccessSPIWrite
      24   PhyTimeSetEventTrigger
        24   -> MC1324xDrv_DirectAccessSPIMultiByteWrite
        24   -> MC1324xDrv_DirectAccessSPIRead
        24   -> MC1324xDrv_DirectAccessSPIWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      70  PhyTimeDisableEventTimeout
      38  PhyTimeInitEventTimer
      20  PhyTimeReadClock
     104  PhyTimeSetEventTimeout
     108  PhyTimeSetEventTrigger

 
 340 bytes in section .text
 
 340 bytes of CODE memory

Errors: none
Warnings: none
