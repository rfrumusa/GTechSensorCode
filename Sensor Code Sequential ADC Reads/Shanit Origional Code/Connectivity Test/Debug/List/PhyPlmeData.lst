###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        02/Sep/2018  13:33:19
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\PhyPlmeData.c
#    Command line =  
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\PhyPlmeData.c" -D IAR --preprocess
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\" -lC
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\" -lB
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\List\"
#        --diag_suppress Pe014,Pe001,Pe991,Pa039,Pe520,Pe550,Pe177,Pa082 -o
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Configure\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Environment\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Interface\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\Generic Services\Interface\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Uart\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\APP\CDC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\USB\APP\Descriptor\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\USB\Class\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\USB\Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\USB\Driver\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\TMR\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\PLM\Source\Radio\MC1324x\PHY\" -I "F:\Guardrail Work\Sensor
#        Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional
#        Code\Connectivity Test\PLM\Source\Radio\MC1324x\DRV\" -I "F:\Guardrail
#        Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit
#        Origional Code\Connectivity Test\PLM\Source\Sys Common\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Interface\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\SMAC\Configure\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Source\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Application\Configure\"
#        -I "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\NVM\" -I
#        "C:\Users\Robert\SkyDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "C:\Users\rfrum\OneDrive\2018 Spring Semester\Senior Design\Sensor
#        Code\Shanit Origional Code\Connectivity Test\PLM\Source\ADC\" -I
#        "F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\PLM\Source\LPM\" -On
#    List file    =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity
#        Test\Debug\List\PhyPlmeData.lst
#    Object file  =  
#        F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC
#        Reads\Shanit Origional Code\Connectivity Test\Debug\Obj\PhyPlmeData.o
#
###############################################################################

F:\Guardrail Work\Sensor Code\Git Repo\Sensor Code Sequential ADC Reads\Shanit Origional Code\Connectivity Test\PLM\Source\Radio\MC1324x\PHY\PhyPlmeData.c
      1          /*****************************************************************************
      2           *                               INCLUDED HEADERS                            *
      3           *---------------------------------------------------------------------------*
      4           * Add to this section all the headers that this module needs to include.    *
      5           *---------------------------------------------------------------------------*
      6           *****************************************************************************/
      7          #include "EmbeddedTypes.h"
      8          #include "PortConfig.h"
      9          #include "TransceiverDrv.h"
     10          #include "TransceiverReg.h"
     11          #include "Phy.h"
     12          #include "Interrupt.h"
     13          #include "Utilities_Interface.h" 
     14          
     15          /*****************************************************************************
     16           *                               PRIVATE VARIABLES                           *
     17           *---------------------------------------------------------------------------*
     18           * Add to this section all the variables and constants that have local       *
     19           * (file) scope.                                                             *
     20           * Each of this declarations shall be preceded by the 'static' keyword.      *
     21           * These variables / constants cannot be accessed outside this module.       *
     22           *---------------------------------------------------------------------------*
     23           *****************************************************************************/
     24          
     25                                               //2405   2410    2415    2420    2425    2430    2435    2440    2445    2450    2455    2460    2465    2470    2475    2480

   \                                 In section .rodata, align 4
     26          static const uint8_t  pll_int[16] =  {0x0B,   0x0B,   0x0B,   0x0B,   0x0B,   0x0B,   0x0C,   0x0C,   0x0C,   0x0C,   0x0C,   0x0C,   0x0D,   0x0D,   0x0D,   0x0D};
   \                     pll_int:
   \   00000000   0x0B 0x0B          DC8 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13
   \              0x0B 0x0B    
   \              0x0B 0x0B    
   \              0x0C 0x0C    
   \              0x0C 0x0C    
   \              0x0C 0x0C    
   \              0x0D 0x0D    
   \              0x0D 0x0D    

   \                                 In section .rodata, align 4
     27          static const uint16_t pll_frac[16] = {0x2800, 0x5000, 0x7800, 0xA000, 0xC800, 0xF000, 0x1800, 0x4000, 0x6800, 0x9000, 0xB800, 0xE000, 0x0800, 0x3000, 0x5800, 0x8000};
   \                     pll_frac:
   \   00000000   0x2800 0x5000      DC16 10240, 20480, 30720, 40960, 51200, 61440, 6144, 16384, 26624
   \              0x7800 0xA000
   \              0xC800 0xF000
   \              0x1800 0x4000
   \              0x6800       
   \   00000012   0x9000 0xB800      DC16 36864, 47104, 57344, 2048, 12288, 22528, 32768
   \              0xE000 0x0800
   \              0x3000 0x5800
   \              0x8000       
     28          
     29          /*****************************************************************************
     30           *                               PUBLIC VARIABLES                            *
     31           *---------------------------------------------------------------------------*
     32           * Add to this section all the variables and constants that have global      *
     33           * (project) scope.                                                          *
     34           * These variables / constants can be accessed outside this module.          *
     35           * These variables / constants shall be preceded by the 'extern' keyword in  *
     36           * the interface header.                                                     *
     37           *---------------------------------------------------------------------------*
     38           *****************************************************************************/
     39          

   \                                 In section .data, align 1
     40          static uint8_t gPhyCurrentChannelPAN0 = 0x0B;
   \                     gPhyCurrentChannelPAN0:
   \   00000000   0x0B               DC8 11

   \                                 In section .data, align 1
     41          static uint8_t gPhyCurrentChannelPAN1 = 0x0B;
   \                     gPhyCurrentChannelPAN1:
   \   00000000   0x0B               DC8 11
     42          
     43          /*****************************************************************************
     44           *                           PRIVATE FUNCTIONS PROTOTYPES                    *
     45           *---------------------------------------------------------------------------*
     46           * Add to this section all the functions prototypes that have local (file)   *
     47           * scope.                                                                    *
     48           * These functions cannot be accessed outside this module.                   *
     49           * These declarations shall be preceded by the 'static' keyword.             *
     50           *---------------------------------------------------------------------------*
     51           *****************************************************************************/
     52          
     53          /*****************************************************************************
     54           *                                PRIVATE FUNCTIONS                          *
     55           *---------------------------------------------------------------------------*
     56           * Add to this section all the functions that have local (file) scope.       *
     57           * These functions cannot be accessed outside this module.                   *
     58           * These definitions shall be preceded by the 'static' keyword.              *
     59           *---------------------------------------------------------------------------*
     60           *****************************************************************************/
     61          
     62          /*****************************************************************************
     63           *                             PUBLIC FUNCTIONS                              *
     64           *---------------------------------------------------------------------------*
     65           * Add to this section all the functions that have global (project) scope.   *
     66           * These functions can be accessed outside this module.                      *
     67           * These functions shall have their declarations (prototypes) within the     *
     68           * interface header file and shall be preceded by the 'extern' keyword.      *
     69           *---------------------------------------------------------------------------*
     70           *****************************************************************************/
     71          
     72          
     73          /*---------------------------------------------------------------------------
     74           * Name: PhyPdDataRequest
     75           * Description: -
     76           * Parameters: -
     77           * Return: -
     78           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     79          uint8_t PhyPdDataRequest
     80          (
     81            phyPacket_t *pTxPacket,
     82            uint8_t phyTxMode,
     83            phyRxParams_t *pRxParams
     84          )
     85          {
   \                     PhyPdDataRequest: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     86            volatile uint8_t phyCtrl1Reg, phyCtrl2Reg, phyCtrl4Reg, irqSts1Reg, irqSts2Reg, irqSts3Reg;
     87            //volatile uint8_t pllInt, pllFracLsb, pllFracMsb;
     88            
     89              
     90            
     91          #ifdef PHY_PARAMETERS_VALIDATION
     92            // null pointer
     93            if(NULL == pTxPacket)
     94            {
     95              return gPhyInvalidParam_c;
     96            }
     97          
     98            
     99            // cannot have packets shorter than FCS field (2 byte)
    100            if(pTxPacket->frameLength < 2)
    101            {
    102              return gPhyInvalidParam_c;
    103            }
    104          
    105            // if CCA required ...
    106            if(gCcaEnMask_c & phyTxMode)
    107            { // ... cannot perform other types than MODE1 and MODE2
    108              if( (gCcaCCA_MODE1_c != (gCcaTypeMask_c & phyTxMode)) && (gCcaCCA_MODE2_c != (gCcaTypeMask_c & phyTxMode)) )
    109              {
    110                return gPhyInvalidParam_c;
    111              }
    112              // ... cannot perform Continuous CCA on T or TR sequences
    113              if(gContinuousEnMask_c & phyTxMode)
    114              {
    115                return gPhyInvalidParam_c;
    116              }
    117            }
    118          
    119          #endif // PHY_PARAMETERS_VALIDATION
    120          
    121            /**/
    122            if( gIdle_c != PhyGetSeqState() )
   \   0000000A   0x.... 0x....      BL       PhyPpGetState
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD001             BEQ.N    ??PhyPdDataRequest_0
    123            {
    124                return gPhyBusy_c;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE064             B.N      ??PhyPdDataRequest_1
    125            }
    126            
    127            
    128            MC1324xDrv_PB_SPIBurstWrite( (uint8_t *) pTxPacket, (uint8_t) (pTxPacket->frameLength - 1)); 
   \                     ??PhyPdDataRequest_0: (+1)
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x1E41             SUBS     R1,R0,#+1
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       MC1324xDrv_PB_SPIBurstWrite
    129            phyCtrl1Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL1); 
   \   00000022   0x2003             MOVS     R0,#+3
   \   00000024   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
    130            phyCtrl2Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL2);  
   \   0000002C   0x2004             MOVS     R0,#+4
   \   0000002E   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000032   0xF88D 0x0001      STRB     R0,[SP, #+1]
    131            phyCtrl4Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL4);
   \   00000036   0x2007             MOVS     R0,#+7
   \   00000038   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   0000003C   0xF88D 0x0005      STRB     R0,[SP, #+5]
    132            
    133            (void)phyCtrl1Reg;
   \   00000040   0xF89D 0x7000      LDRB     R7,[SP, #+0]
    134            (void)phyCtrl2Reg;
   \   00000044   0xF89D 0x8001      LDRB     R8,[SP, #+1]
    135            
    136             PhyPassRxParams(NULL);
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      BL       PhyPassRxParams
    137             PhyPassRxDataPtr(NULL);
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       PhyPassRxDataPtr
    138              
    139             phyCtrl1Reg &= (uint8_t) ~(cPHY_CTRL1_XCVSEQ);
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0xF010 0x00F8      ANDS     R0,R0,#0xF8
   \   0000005C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    140             phyCtrl1Reg |=  gTX_c;
   \   00000060   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000064   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000068   0xF88D 0x0000      STRB     R0,[SP, #+0]
    141          
    142            
    143            phyCtrl2Reg &= (uint8_t) ~(cPHY_CTRL2_SEQMSK); // unmask SEQ interrupt
   \   0000006C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000070   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   00000074   0xF88D 0x0001      STRB     R0,[SP, #+1]
    144            
    145            irqSts1Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS1);
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   0000007E   0xF88D 0x0004      STRB     R0,[SP, #+4]
    146            irqSts2Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS2);
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000088   0xF88D 0x0003      STRB     R0,[SP, #+3]
    147            irqSts3Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS3);
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000092   0xF88D 0x0002      STRB     R0,[SP, #+2]
    148            
    149            irqSts3Reg |= (uint8_t) (cIRQSTS3_TMR3MSK);   // mask TMR3 interrupt
   \   00000096   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000009A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000009E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    150            
    151            // ensure that no spurious interrupts are raised
    152            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS1, irqSts1Reg);
   \   000000A2   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    153            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS2, irqSts2Reg);
   \   000000AC   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    154            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS3, irqSts3Reg);
   \   000000B6   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   000000BA   0x2002             MOVS     R0,#+2
   \   000000BC   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    155            
    156            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL2, phyCtrl2Reg);
   \   000000C0   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000C4   0x2004             MOVS     R0,#+4
   \   000000C6   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    157            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL4, phyCtrl4Reg);
   \   000000CA   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   000000CE   0x2007             MOVS     R0,#+7
   \   000000D0   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    158            
    159            // start the TX or TRX sequence
    160            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL1, phyCtrl1Reg);  
   \   000000D4   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000D8   0x2003             MOVS     R0,#+3
   \   000000DA   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    161            
    162            return gPhySuccess_c;
   \   000000DE   0x2000             MOVS     R0,#+0
   \                     ??PhyPdDataRequest_1: (+1)
   \   000000E0   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    163          }
    164          
    165          /*---------------------------------------------------------------------------
    166           * Name: PhyPlmeRxRequest
    167           * Description: -
    168           * Parameters: -
    169           * Return: -
    170           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    171          uint8_t PhyPlmeRxRequest
    172          (
    173            phyPacket_t *pRxData,
    174            phyRxParams_t *pRxParams
    175          )
    176          {
   \                     PhyPlmeRxRequest: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    177            volatile uint8_t phyCtrl1Reg, phyCtrl2Reg, irqSts1Reg, irqSts2Reg, irqSts3Reg; //, seqState, phyCtrl4Reg;
    178            //volatile uint8_t pllInt, pllFracLsb, pllFracMsb, phyStsIar;
    179          
    180            if( gIdle_c != PhyGetSeqState() )
   \   00000008   0x.... 0x....      BL       PhyPpGetState
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD001             BEQ.N    ??PhyPlmeRxRequest_0
    181            {
    182              return gPhyBusy_c;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE050             B.N      ??PhyPlmeRxRequest_1
    183            }
    184          
    185            PhyPassRxParams(pRxParams);
   \                     ??PhyPlmeRxRequest_0: (+1)
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x.... 0x....      BL       PhyPassRxParams
    186            PhyPassRxDataPtr(pRxData);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       PhyPassRxDataPtr
    187            
    188            phyCtrl1Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL1);
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000026   0xF88D 0x0000      STRB     R0,[SP, #+0]
    189            phyCtrl2Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL2);
   \   0000002A   0x2004             MOVS     R0,#+4
   \   0000002C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000030   0xF88D 0x0002      STRB     R0,[SP, #+2]
    190           // phyCtrl4Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL4);
    191            
    192            /* program the RX sequence */
    193            phyCtrl1Reg &= (uint8_t) ~(cPHY_CTRL1_XCVSEQ);
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF010 0x00F8      ANDS     R0,R0,#0xF8
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    194            phyCtrl1Reg |=  gRX_c;
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000048   0xF88D 0x0000      STRB     R0,[SP, #+0]
    195            
    196            phyCtrl2Reg &= (uint8_t) ~(cPHY_CTRL2_SEQMSK); // unmask SEQ interrupt
   \   0000004C   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000050   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   00000054   0xF88D 0x0002      STRB     R0,[SP, #+2]
    197           //phyCtrl2Reg &= (uint8_t) ~(cPHY_CTRL2_RXMSK); // unmask RX interrupt
    198           // phyCtrl4Reg |= (uint8_t) (cPHY_CTRL4_PROMISCUOUS);
    199            
    200          
    201            irqSts1Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS1);
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   0000005E   0xF88D 0x0004      STRB     R0,[SP, #+4]
    202            irqSts2Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS2);
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000068   0xF88D 0x0003      STRB     R0,[SP, #+3]
    203            irqSts3Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS3);
   \   0000006C   0x2002             MOVS     R0,#+2
   \   0000006E   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000072   0xF88D 0x0001      STRB     R0,[SP, #+1]
    204            
    205            
    206            irqSts3Reg |= (uint8_t) (cIRQSTS3_TMR3MSK);   // mask TMR3 interrupt
   \   00000076   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000007A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000007E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    207            
    208          /*
    209            pllInt =     MC1324xDrv_DirectAccessSPIRead(PLL_INT0);
    210            pllFracLsb = MC1324xDrv_DirectAccessSPIRead(PLL_FRAC0_LSB);
    211            pllFracMsb = MC1324xDrv_DirectAccessSPIRead(PLL_FRAC0_MSB);
    212            */
    213            // ensure that no spurious interrupts are raised
    214            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS1, irqSts1Reg);
   \   00000082   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    215            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS2, irqSts2Reg);
   \   0000008C   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    216            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS3, irqSts3Reg);
   \   00000096   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000009A   0x2002             MOVS     R0,#+2
   \   0000009C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    217            
    218           // MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL4, phyCtrl4Reg);
    219            
    220            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL2, phyCtrl2Reg);
   \   000000A0   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   000000A4   0x2004             MOVS     R0,#+4
   \   000000A6   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    221            // start the RX sequence
    222            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL1, phyCtrl1Reg);
   \   000000AA   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000AE   0x2003             MOVS     R0,#+3
   \   000000B0   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    223          
    224              return gPhySuccess_c;
   \   000000B4   0x2000             MOVS     R0,#+0
   \                     ??PhyPlmeRxRequest_1: (+1)
   \   000000B6   0xBD3E             POP      {R1-R5,PC}       ;; return
    225          }
    226          
    227          /*---------------------------------------------------------------------------
    228           * Name: PhyPlmeCcaEdRequest
    229           * Description: -
    230           * Parameters: -
    231           * Return: -
    232           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    233          uint8_t PhyPlmeCcaEdRequest
    234          (
    235            uint8_t ccaParam
    236          )
    237          {
   \                     PhyPlmeCcaEdRequest: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
    238            uint8_t phyCtrl1Reg, phyCtrl2Reg, phyCtrl4Reg, irqSts1Reg, irqSts2Reg, irqSts3Reg;
    239            
    240            //PHY_DEBUG_LOG(PDBG_PLME_CCA_ED_REQUEST); TODO
    241          
    242          #ifdef PHY_PARAMETERS_VALIDATION
    243            // illegal CCA type
    244            if(gInvalidCcaType_c == (gCcaTypeMask_c & ccaParam))
    245            {
    246              return gPhyInvalidParam_c;
    247            }
    248          
    249            // cannot perform Continuous CCA using ED type
    250            if( (gContinuousEnMask_c & ccaParam) && (gCcaED_c == (gCcaTypeMask_c & ccaParam)) )
    251            {
    252              return gPhyInvalidParam_c;
    253            }
    254          
    255            // cannot perform ED request using other type than gCcaED_c
    256            if( (gCcaEnMask_c & ccaParam) && (gCcaED_c != (gCcaTypeMask_c & ccaParam)) )
    257            {
    258              return gPhyInvalidParam_c;
    259            }
    260          
    261            // cannot perform ED request using Continuous mode
    262            if( (gContinuousEnMask_c & ccaParam) && ((gCcaEnMask_c & ccaParam)==0) )
    263            {
    264              return gPhyInvalidParam_c;
    265            }
    266          
    267          #endif // PHY_PARAMETERS_VALIDATION
    268          
    269            if( gIdle_c != PhyGetSeqState() )
   \   00000006   0x.... 0x....      BL       PhyPpGetState
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD001             BEQ.N    ??PhyPlmeCcaEdRequest_0
    270            {
    271              return gPhyBusy_c;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE052             B.N      ??PhyPlmeCcaEdRequest_1
    272            }
    273          
    274            phyCtrl1Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL1);
   \                     ??PhyPlmeCcaEdRequest_0: (+1)
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000018   0x0005             MOVS     R5,R0
    275            phyCtrl2Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL2);
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000020   0x0006             MOVS     R6,R0
    276            phyCtrl4Reg = MC1324xDrv_DirectAccessSPIRead(PHY_CTRL4);
   \   00000022   0x2007             MOVS     R0,#+7
   \   00000024   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000028   0x4682             MOV      R10,R0
    277            
    278            // write in PHY CTRL4 the desired type of CCA
    279            phyCtrl4Reg &= (uint8_t) ~(cPHY_CTRL4_CCATYPE << cPHY_CTRL4_CCATYPE_Shift_c);
   \   0000002A   0xF01A 0x0AE7      ANDS     R10,R10,#0xE7
    280            phyCtrl4Reg |= (uint8_t) ((gCcaTypeMask_c & ccaParam) << (cPHY_CTRL4_CCATYPE_Shift_c - gCcaTypePos_c));
   \   0000002E   0xF014 0x0003      ANDS     R0,R4,#0x3
   \   00000032   0xEA5A 0x0AC0      ORRS     R10,R10,R0, LSL #+3
    281            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL4, phyCtrl4Reg);
   \   00000036   0x4651             MOV      R1,R10
   \   00000038   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003A   0x2007             MOVS     R0,#+7
   \   0000003C   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    282            
    283            // slotted operation
    284            if(gSlottedEnMask_c & ccaParam)
   \   00000040   0x0620             LSLS     R0,R4,#+24
   \   00000042   0xD502             BPL.N    ??PhyPlmeCcaEdRequest_2
    285            {
    286              phyCtrl1Reg |= (uint8_t) (cPHY_CTRL1_SLOTTED);
   \   00000044   0xF055 0x0540      ORRS     R5,R5,#0x40
   \   00000048   0xE001             B.N      ??PhyPlmeCcaEdRequest_3
    287            }
    288            else
    289            {
    290              phyCtrl1Reg &= (uint8_t) ~(cPHY_CTRL1_SLOTTED);
   \                     ??PhyPlmeCcaEdRequest_2: (+1)
   \   0000004A   0xF015 0x05BF      ANDS     R5,R5,#0xBF
    291            }
    292            
    293            // continuous CCA
    294            if(gContinuousEnMask_c & ccaParam)
   \                     ??PhyPlmeCcaEdRequest_3: (+1)
   \   0000004E   0x0760             LSLS     R0,R4,#+29
   \   00000050   0xD504             BPL.N    ??PhyPlmeCcaEdRequest_4
    295            {
    296              // start the continuous CCA sequence
    297              // immediately or by TC2', depending on a previous PhyTimeSetEventTrigger() call)
    298               phyCtrl1Reg &= (uint8_t) ~(cPHY_CTRL1_XCVSEQ);
   \   00000052   0xF015 0x05F8      ANDS     R5,R5,#0xF8
    299               phyCtrl1Reg |= gCCCA_c;
   \   00000056   0xF055 0x0505      ORRS     R5,R5,#0x5
   \   0000005A   0xE003             B.N      ??PhyPlmeCcaEdRequest_5
    300              // at the end of the scheduled sequence, an interrupt will occur:
    301              // CCA , SEQ or TMR3
    302            }
    303            // normal CCA (not continuous)
    304            else
    305            {
    306              // start the CCA or ED sequence (this depends on CcaType used)
    307              // immediately or by TC2', depending on a previous PhyTimeSetEventTrigger() call)
    308               phyCtrl1Reg &= (uint8_t) ~(cPHY_CTRL1_XCVSEQ);
   \                     ??PhyPlmeCcaEdRequest_4: (+1)
   \   0000005C   0xF015 0x05F8      ANDS     R5,R5,#0xF8
    309               phyCtrl1Reg |= gCCA_c;
   \   00000060   0xF055 0x0503      ORRS     R5,R5,#0x3
    310              // at the end of the scheduled sequence, an interrupt will occur:
    311              // CCA , SEQ or TMR3
    312            }
    313            
    314            phyCtrl2Reg &= (uint8_t) ~(cPHY_CTRL2_SEQMSK); // unmask SEQ interrupt
   \                     ??PhyPlmeCcaEdRequest_5: (+1)
   \   00000064   0xF016 0x06FE      ANDS     R6,R6,#0xFE
    315            
    316            irqSts1Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS1);
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   0000006E   0x0007             MOVS     R7,R0
    317            irqSts2Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS2);
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   00000076   0x4680             MOV      R8,R0
    318            irqSts3Reg = MC1324xDrv_DirectAccessSPIRead(IRQSTS3);
   \   00000078   0x2002             MOVS     R0,#+2
   \   0000007A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIRead
   \   0000007E   0x4681             MOV      R9,R0
    319            
    320            irqSts3Reg |= (uint8_t) (cIRQSTS3_TMR3IRQ);   // mask TMR3 interrupt
   \   00000080   0xF059 0x0904      ORRS     R9,R9,#0x4
    321            
    322            // ensure that no spurious interrupts are raised
    323            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS1, irqSts1Reg);
   \   00000084   0x0039             MOVS     R1,R7
   \   00000086   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    324            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS2, irqSts2Reg);
   \   0000008E   0x4641             MOV      R1,R8
   \   00000090   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    325            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) IRQSTS3, irqSts3Reg);
   \   00000098   0x4649             MOV      R1,R9
   \   0000009A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009C   0x2002             MOVS     R0,#+2
   \   0000009E   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    326            
    327            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL2, phyCtrl2Reg);
   \   000000A2   0x0031             MOVS     R1,R6
   \   000000A4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A6   0x2004             MOVS     R0,#+4
   \   000000A8   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    328            // start the CCA/ED or CCCA sequence
    329            MC1324xDrv_DirectAccessSPIWrite( (uint8_t) PHY_CTRL1, phyCtrl1Reg);
   \   000000AC   0x0029             MOVS     R1,R5
   \   000000AE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B0   0x2003             MOVS     R0,#+3
   \   000000B2   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    330            
    331            return gPhySuccess_c;
   \   000000B6   0x2000             MOVS     R0,#+0
   \                     ??PhyPlmeCcaEdRequest_1: (+1)
   \   000000B8   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    332          }
    333          
    334          /*---------------------------------------------------------------------------
    335           * Name: PhyAdjustCcaOffsetCmp
    336           * Description: -
    337           * Parameters: -
    338           * Return: -
    339           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    340          uint8_t PhyAdjustCcaOffsetCmpReg
    341          (
    342            uint8_t ccaOffset
    343          )
    344          {
   \                     PhyAdjustCcaOffsetCmpReg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    345            #ifdef PHY_PARAMETERS_VALIDATION
    346            if(NULL == ccaOffset)
    347            {
    348              return;
    349            }
    350          #endif // PHY_PARAMETERS_VALIDATION 
    351            MC1324xDrv_DirectAccessSPIWrite(CCA1_ED_OFFSET_COMP, ccaOffset);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x2023             MOVS     R0,#+35
   \   0000000A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    352            return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    353          }
    354          
    355          /*---------------------------------------------------------------------------
    356           * Name: PhyPlmeSetClockOutRateReg
    357           * Description: -
    358           * Parameters: -
    359           * Return: -
    360           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    361          uint8_t PhyPlmeSetClockOutRateReg
    362          (
    363            uint8_t clockOutRate
    364          )
    365          {
   \                     PhyPlmeSetClockOutRateReg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    366            MC1324xDrv_DirectAccessSPIWrite(CLK_OUT_CTRL, clockOutRate);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x203C             MOVS     R0,#+60
   \   0000000A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    367            return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    368          }
    369          
    370          /*---------------------------------------------------------------------------
    371           * Name: PhySetRadioTimerPrescalerReg
    372           * Description: -
    373           * Parameters: -
    374           * Return: -
    375           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    376          uint8_t PhySetRadioTimerPrescalerReg
    377          (
    378            uint8_t timeBase
    379          )
    380          {
   \                     PhySetRadioTimerPrescalerReg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    381            MC1324xDrv_IndirectAccessSPIWrite(TMR_PRESCALE,timeBase);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x2028             MOVS     R0,#+40
   \   0000000A   0x.... 0x....      BL       MC1324xDrv_IndirectAccessSPIWrite
    382            return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    383            
    384          }
    385          
    386          /*---------------------------------------------------------------------------
    387           * Name: PhyPlmeSetCurrentChannelRequestPAN0
    388           * Description: -
    389           * Parameters: -
    390           * Return: -
    391           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    392          uint8_t PhyPlmeSetCurrentChannelRequestPAN0
    393          (
    394            uint8_t channel
    395          )
    396          {
   \                     PhyPlmeSetCurrentChannelRequestPAN0: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    397            //PHY_DEBUG_LOG(PDBG_PLME_SET_CHAN_REQUEST); TODO
    398          
    399          #ifdef PHY_PARAMETERS_VALIDATION
    400            if((channel < 11) || (channel > 26)) 
    401            {
    402              return gPhyInvalidParam_c;
    403            }
    404          #endif // PHY_PARAMETERS_VALIDATION
    405          
    406            /**/
    407            if( gIdle_c != PhyGetSeqState() )
   \   00000004   0x.... 0x....      BL       PhyPpGetState
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD001             BEQ.N    ??PhyPlmeSetCurrentChannelRequestPAN0_0
    408            {
    409              return gPhyBusy_c;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE014             B.N      ??PhyPlmeSetCurrentChannelRequestPAN0_1
    410            }
    411            
    412            gPhyCurrentChannelPAN0 = channel;
   \                     ??PhyPlmeSetCurrentChannelRequestPAN0_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable3
   \   00000012   0x7004             STRB     R4,[R0, #+0]
    413            MC1324xDrv_DirectAccessSPIWrite(PLL_INT0, pll_int[channel - 11]);
   \   00000014   0x....             LDR.N    R0,??DataTable3_1
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x1820             ADDS     R0,R4,R0
   \   0000001A   0xF810 0x1C0B      LDRB     R1,[R0, #-11]
   \   0000001E   0x2020             MOVS     R0,#+32
   \   00000020   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    414            MC1324xDrv_DirectAccessSPIMultiByteWrite(PLL_FRAC0_LSB, (uint8_t *) &pll_frac[channel - 11], 2);
   \   00000024   0x2202             MOVS     R2,#+2
   \   00000026   0x....             LDR.N    R0,??DataTable3_2
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0xEB10 0x0044      ADDS     R0,R0,R4, LSL #+1
   \   0000002E   0xF1B0 0x0116      SUBS     R1,R0,#+22
   \   00000032   0x2021             MOVS     R0,#+33
   \   00000034   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIMultiByteWrite
    415            return gPhySuccess_c;
   \   00000038   0x2000             MOVS     R0,#+0
   \                     ??PhyPlmeSetCurrentChannelRequestPAN0_1: (+1)
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    416          }
    417          
    418          /*---------------------------------------------------------------------------
    419           * Name: PhyPlmeSetCurrentChannelRequestPAN1
    420           * Description: -
    421           * Parameters: -
    422           * Return: -
    423           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    424          uint8_t PhyPlmeSetCurrentChannelRequestPAN1
    425          (
    426            uint8_t channel
    427          )
    428          {
   \                     PhyPlmeSetCurrentChannelRequestPAN1: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    429            //PHY_DEBUG_LOG(PDBG_PLME_SET_CHAN_REQUEST); TODO
    430          
    431          #ifdef PHY_PARAMETERS_VALIDATION
    432            if((channel < 11) || (channel > 26)) 
    433            {
    434              return gPhyInvalidParam_c;
    435            }
    436          #endif // PHY_PARAMETERS_VALIDATION
    437          
    438            if( gIdle_c != PhyGetSeqState() )
   \   00000004   0x.... 0x....      BL       PhyPpGetState
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD001             BEQ.N    ??PhyPlmeSetCurrentChannelRequestPAN1_0
    439            {
    440              return gPhyBusy_c;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE014             B.N      ??PhyPlmeSetCurrentChannelRequestPAN1_1
    441            }
    442            gPhyCurrentChannelPAN1 = channel;
   \                     ??PhyPlmeSetCurrentChannelRequestPAN1_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable3_3
   \   00000012   0x7004             STRB     R4,[R0, #+0]
    443            MC1324xDrv_DirectAccessSPIWrite(PLL_INT1, pll_int[channel - 11]);
   \   00000014   0x....             LDR.N    R0,??DataTable3_1
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x1820             ADDS     R0,R4,R0
   \   0000001A   0xF810 0x1C0B      LDRB     R1,[R0, #-11]
   \   0000001E   0x2010             MOVS     R0,#+16
   \   00000020   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    444            MC1324xDrv_DirectAccessSPIMultiByteWrite(PLL_FRAC1_LSB, (uint8_t *) &pll_frac[channel - 11], 2);
   \   00000024   0x2202             MOVS     R2,#+2
   \   00000026   0x....             LDR.N    R0,??DataTable3_2
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0xEB10 0x0044      ADDS     R0,R0,R4, LSL #+1
   \   0000002E   0xF1B0 0x0116      SUBS     R1,R0,#+22
   \   00000032   0x2011             MOVS     R0,#+17
   \   00000034   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIMultiByteWrite
    445            return gPhySuccess_c;
   \   00000038   0x2000             MOVS     R0,#+0
   \                     ??PhyPlmeSetCurrentChannelRequestPAN1_1: (+1)
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    446          }
    447          
    448          /*---------------------------------------------------------------------------
    449           * Name: PhyPlmeGetCurrentChannelRequestPAN0
    450           * Description: -
    451           * Parameters: -
    452           * Return: -
    453           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    454          uint8_t PhyPlmeGetCurrentChannelRequestPAN0
    455          ( 
    456            void
    457          )
    458          {
    459            return gPhyCurrentChannelPAN0;
   \                     PhyPlmeGetCurrentChannelRequestPAN0: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    460          }
    461          
    462          /*---------------------------------------------------------------------------
    463           * Name: PhyPlmeGetCurrentChannelRequestPAN1
    464           * Description: -
    465           * Parameters: -
    466           * Return: -
    467           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    468          uint8_t PhyPlmeGetCurrentChannelRequestPAN1
    469          (
    470            void
    471          )
    472          {
    473            return gPhyCurrentChannelPAN1;
   \                     PhyPlmeGetCurrentChannelRequestPAN1: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_3
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    474          }
    475          
    476          /*---------------------------------------------------------------------------
    477           * Name: PhyPlmeSetPwrLevelRequest
    478           * Description: -
    479           * Parameters: -
    480           * Return: -
    481           *---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    482          uint8_t PhyPlmeSetPwrLevelRequest
    483          (
    484            uint8_t pwrStep
    485          )
    486          {
   \                     PhyPlmeSetPwrLevelRequest: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    487            //PHY_DEBUG_LOG(PDBG_PLME_SET_POWER_REQUEST); TODO
    488            
    489          #ifdef PHY_PARAMETERS_VALIDATION
    490            if((pwrStep < 3) || (pwrStep > 31)) //-40 dBm to 16 dBm
    491            {
    492              return gPhyInvalidParam_c;
    493            }
    494          #endif // PHY_PARAMETERS_VALIDATION
    495            
    496            MC1324xDrv_DirectAccessSPIWrite(PA_PWR, (uint8_t)(pwrStep & 0x1F));
   \   00000004   0xF014 0x011F      ANDS     R1,R4,#0x1F
   \   00000008   0x2023             MOVS     R0,#+35
   \   0000000A   0x.... 0x....      BL       MC1324xDrv_DirectAccessSPIWrite
    497            return gPhySuccess_c;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    498          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     gPhyCurrentChannelPAN0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     pll_int

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     pll_frac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     gPhyCurrentChannelPAN1

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   PhyAdjustCcaOffsetCmpReg
         8   -> MC1324xDrv_DirectAccessSPIWrite
      32   PhyPdDataRequest
        32   -> MC1324xDrv_DirectAccessSPIRead
        32   -> MC1324xDrv_DirectAccessSPIWrite
        32   -> MC1324xDrv_PB_SPIBurstWrite
        32   -> PhyPassRxDataPtr
        32   -> PhyPassRxParams
        32   -> PhyPpGetState
      32   PhyPlmeCcaEdRequest
        32   -> MC1324xDrv_DirectAccessSPIRead
        32   -> MC1324xDrv_DirectAccessSPIWrite
        32   -> PhyPpGetState
       0   PhyPlmeGetCurrentChannelRequestPAN0
       0   PhyPlmeGetCurrentChannelRequestPAN1
      24   PhyPlmeRxRequest
        24   -> MC1324xDrv_DirectAccessSPIRead
        24   -> MC1324xDrv_DirectAccessSPIWrite
        24   -> PhyPassRxDataPtr
        24   -> PhyPassRxParams
        24   -> PhyPpGetState
       8   PhyPlmeSetClockOutRateReg
         8   -> MC1324xDrv_DirectAccessSPIWrite
       8   PhyPlmeSetCurrentChannelRequestPAN0
         8   -> MC1324xDrv_DirectAccessSPIMultiByteWrite
         8   -> MC1324xDrv_DirectAccessSPIWrite
         8   -> PhyPpGetState
       8   PhyPlmeSetCurrentChannelRequestPAN1
         8   -> MC1324xDrv_DirectAccessSPIMultiByteWrite
         8   -> MC1324xDrv_DirectAccessSPIWrite
         8   -> PhyPpGetState
       8   PhyPlmeSetPwrLevelRequest
         8   -> MC1324xDrv_DirectAccessSPIWrite
       8   PhySetRadioTimerPrescalerReg
         8   -> MC1324xDrv_IndirectAccessSPIWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      18  PhyAdjustCcaOffsetCmpReg
     228  PhyPdDataRequest
     188  PhyPlmeCcaEdRequest
       6  PhyPlmeGetCurrentChannelRequestPAN0
       6  PhyPlmeGetCurrentChannelRequestPAN1
     184  PhyPlmeRxRequest
      18  PhyPlmeSetClockOutRateReg
      60  PhyPlmeSetCurrentChannelRequestPAN0
      60  PhyPlmeSetCurrentChannelRequestPAN1
      18  PhyPlmeSetPwrLevelRequest
      18  PhySetRadioTimerPrescalerReg
       1  gPhyCurrentChannelPAN0
       1  gPhyCurrentChannelPAN1
      32  pll_frac
      16  pll_int

 
   2 bytes in section .data
  48 bytes in section .rodata
 820 bytes in section .text
 
 820 bytes of CODE  memory
  48 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none
